<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Axios学习笔记</title>
      <link href="/2022/10/13/Axios%E5%85%A5%E9%97%A8%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/13/Axios%E5%85%A5%E9%97%A8%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="预备工具"><a href="#预备工具" class="headerlink" title="预备工具"></a>预备工具</h2><blockquote><ol><li>作为一个前端开发工程师，在后端还没有ready的时候，不可避免的要使用mock的数据。很多时候，我们并不想使用简单的静态数据，而是希望自己起一个本地的mock-server来完全模拟请求以及请求回来的过程。json-server是一个很好的可以替我们完成这一工作的工具。我们只需要提供一个json文件，或者写几行简单的js脚本就可以模拟出RESTful API的接口。</li><li>安装json-server<br><code>npm install -g json-server</code></li><li>创建db.json<br>在一个文件夹下新建一个db.json文件</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;posts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typicode&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;some comment&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;profile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typicode&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>启动json-server<br>在当前文件夹下输入如下命令：<code>json-server db.json</code></li><li><a href="https://github.com/typicode/json-server">文档</a></li></ol></blockquote><h1 id="一、Axios的理解与使用"><a href="#一、Axios的理解与使用" class="headerlink" title="一、Axios的理解与使用"></a>一、Axios的理解与使用</h1><h2 id="Ⅰ-axios-是什么"><a href="#Ⅰ-axios-是什么" class="headerlink" title="Ⅰ-axios 是什么?"></a>Ⅰ-axios 是什么?</h2><blockquote><ol><li>前端最流行的 ajax 请求库 </li><li>react/vue 官方都推荐使用 axios 发 ajax 请求 </li><li>文档: <a href="https://github.com/axios/axios">https://github.com/axios/axios</a></li></ol></blockquote><h2 id="Ⅱ-axios-特点"><a href="#Ⅱ-axios-特点" class="headerlink" title="Ⅱ-axios 特点"></a>Ⅱ-axios 特点</h2><blockquote><ol><li>基于 xhr + promise 的异步 ajax 请求库 </li><li>浏览器端/node 端都可以使用 </li><li>支持请求／响应拦截器 </li><li>支持请求取消 </li><li>请求/响应数据转换 </li><li>批量发送多个请求</li></ol></blockquote><h2 id="Ⅲ-axios-常用语法"><a href="#Ⅲ-axios-常用语法" class="headerlink" title="Ⅲ-axios 常用语法"></a>Ⅲ-axios 常用语法</h2><blockquote><ol><li>axios(config): <code>通用/最本质</code>的发任意类型请求的方式 </li><li>axios(url[, config]): 可以只指定 url 发 get 请求 </li><li>axios.request(config): 等同于 axios(config) </li><li>axios.get(url[, config]): 发 get 请求 </li><li>axios.delete(url[, config]): 发 delete 请求 </li><li>axios.post(url[, data, config]): 发 post 请求</li><li>axios.put(url[, data, config]): 发 put 请求 </li><li>axios.defaults.xxx: 请求的默认全局配置 </li><li>axios.interceptors.request.use(): 添加请求拦截器 </li><li>axios.interceptors.response.use(): 添加响应拦截器 </li><li>axios.create([config]): 创建一个新的 axios(它没有下面的功能) </li><li>axios.Cancel(): 用于创建取消请求的错误对象 </li><li>axios.CancelToken(): 用于创建取消请求的 token 对象 </li><li>axios.isCancel(): 是否是一个取消请求的错误 </li><li>axios.all(promises): 用于批量执行多个异步请求 </li><li>axios.spread(): 用来指定接收所有成功数据的回调函数的方法</li></ol></blockquote><h2 id="Ⅳ-原理图"><a href="#Ⅳ-原理图" class="headerlink" title="Ⅳ-原理图"></a>Ⅳ-原理图</h2><p><img src="Axios%E5%85%A5%E9%97%A8%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/Axios%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="Axios系统学习笔记原理图"></p><h2 id="Ⅴ-难点语法的理解和使用"><a href="#Ⅴ-难点语法的理解和使用" class="headerlink" title="Ⅴ-难点语法的理解和使用"></a>Ⅴ-难点语法的理解和使用</h2><h3 id="1、axios-create-config"><a href="#1、axios-create-config" class="headerlink" title="1、axios.create(config)"></a>1、axios.create(config)</h3><blockquote><ol><li><p>根据指定配置创建一个新的 axios, 也就就每个新 axios 都有自己的配置 </p></li><li><p>新 axios 只是没有取消请求和批量发请求的方法, 其它所有语法都是一致的 </p></li><li><p>为什么要设计这个语法?</p></li></ol><p>  (1) 需求: 项目中有部分接口需要的配置与另一部分接口需要的配置不太一样, 如何处理 </p><p>  (2) 解决: 创建 2 个新 axios, 每个都有自己特有的配置, 分别应用到不同要 求的接口请求中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建实例对象  /getJoke</span></span><br><span class="line">  <span class="keyword">const</span> duanzi = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.apiopen.top&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> onather = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;https://b.com&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">2000</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//这里  duanzi 与 axios 对象的功能几近是一样的</span></span><br><span class="line">  <span class="comment">// duanzi(&#123;</span></span><br><span class="line">  <span class="comment">//     url: &#x27;/getJoke&#x27;,</span></span><br><span class="line">  <span class="comment">// &#125;).then(response =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     console.log(response);</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">  duanzi.<span class="title function_">get</span>(<span class="string">&#x27;/getJoke&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="2、拦截器函数-ajax-请求-请求的回调函数的调用顺序"><a href="#2、拦截器函数-ajax-请求-请求的回调函数的调用顺序" class="headerlink" title="2、拦截器函数/ajax 请求/请求的回调函数的调用顺序"></a>2、拦截器函数/ajax 请求/请求的回调函数的调用顺序</h3><blockquote><ol><li>说明: 调用 axios()并不是立即发送 ajax 请求, 而是需要经历一个较长的流程 </li><li>流程: 请求拦截器2 =&gt; 请求拦截器1 =&gt; 发ajax请求 =&gt; 响应拦截器1 =&gt; 响应拦截器 2 =&gt; 请求的回调 </li><li>注意: 此流程是通过 promise 串连起来的, 请求拦截器传递的是 config, 响应 拦截器传递的是 response</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// Promise</span></span><br><span class="line">  <span class="comment">// 设置请求拦截器  config 配置对象</span></span><br><span class="line">  axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功 - 1号&#x27;</span>);</span><br><span class="line">    <span class="comment">//修改 config 中的参数</span></span><br><span class="line">    config.<span class="property">params</span> = &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">100</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败 - 1号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功 - 2号&#x27;</span>);</span><br><span class="line">    <span class="comment">//修改 config 中的参数</span></span><br><span class="line">    config.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败 - 2号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置响应拦截器</span></span><br><span class="line">  axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功 1号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">// return response;</span></span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败 1号&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功 2号&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败 2号&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//发送请求</span></span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自定义回调处理成功的结果&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3、取消请求"><a href="#3、取消请求" class="headerlink" title="3、取消请求"></a>3、取消请求</h3><blockquote><ol><li>基本流程 配置 cancelToken 对象 </li><li>缓存用于取消请求的 cancel 函数 </li><li>在后面特定时机调用 cancel 函数取消请求 </li><li>在错误回调中判断如果 error 是 cancel, 做相应处理</li><li>实现功能 点击按钮, 取消某个正在请求中的请求,</li><li>实现功能 点击按钮, 取消某个正在请求中的请求</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//获取按钮</span></span><br><span class="line">  <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">  <span class="comment">//2.声明全局变量</span></span><br><span class="line">  <span class="keyword">let</span> cancel = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//发送请求</span></span><br><span class="line">  btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//检测上一次的请求是否已经完成</span></span><br><span class="line">    <span class="keyword">if</span> (cancel !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//取消上一次的请求</span></span><br><span class="line">      <span class="title function_">cancel</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">      <span class="comment">//1. 添加配置对象的属性</span></span><br><span class="line">      <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.<span class="title class_">CancelToken</span>(<span class="keyword">function</span> (<span class="params">c</span>) &#123;</span><br><span class="line">        <span class="comment">//3. 将 c 的值赋值给 cancel</span></span><br><span class="line">        cancel = c;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">      <span class="comment">//将 cancel 的值初始化</span></span><br><span class="line">      cancel = <span class="literal">null</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//绑定第二个事件取消请求</span></span><br><span class="line">  btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="title function_">cancel</span>(); &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Ⅵ-默认配置"><a href="#Ⅵ-默认配置" class="headerlink" title="Ⅵ-默认配置"></a>Ⅵ-默认配置</h2><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认配置</span></span><br><span class="line">       axios.<span class="property">defaults</span>.<span class="property">method</span> = <span class="string">&#x27;GET&#x27;</span>;<span class="comment">//设置默认的请求类型为 GET</span></span><br><span class="line">       axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:3000&#x27;</span>;<span class="comment">//设置基础 URL</span></span><br><span class="line">       axios.<span class="property">defaults</span>.<span class="property">params</span> = &#123;<span class="attr">id</span>:<span class="number">100</span>&#125;;</span><br><span class="line">       axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">3000</span>;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">       btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">axios</span>(&#123;</span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;/posts&#x27;</span></span><br><span class="line">           &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="二、Axios的难点问题"><a href="#二、Axios的难点问题" class="headerlink" title="二、Axios的难点问题"></a>二、Axios的难点问题</h1><h2 id="Ⅰ-目录结构"><a href="#Ⅰ-目录结构" class="headerlink" title="Ⅰ-目录结构"></a>Ⅰ-目录结构</h2><blockquote><p>├── /dist/ # 项目输出目录<br>├── /lib/ # 项目源码目录<br>│ ├── /adapters/ # 定义请求的适配器 xhr、http<br>│ │ ├── http.js # 实现 http 适配器(包装 http 包)<br>│ │ └── xhr.js # 实现 xhr 适配器(包装 xhr 对象)<br>│ ├── /cancel/ # 定义取消功能<br>│ ├── /core/ # 一些核心功能<br>│ │ ├── Axios.js # axios 的核心主类<br>│ │ ├── dispatchRequest.js # 用来调用 http 请求适配器方法发送请求的函数<br>│ │ ├── InterceptorManager.js # 拦截器的管理器<br>│ │ └── settle.js # 根据 http 响应状态，改变 Promise 的状态<br>│ ├── /helpers/ # 一些辅助方法<br>│ ├── axios.js # 对外暴露接口<br>│ ├── defaults.js # axios 的默认配置<br>│ └── utils.js # 公用工具<br>├── package.json # 项目信息<br>├── index.d.ts # 配置 TypeScript 的声明文件<br>└── index.js # 入口文件</p></blockquote><h2 id="Ⅱ-axios-与-Axios-的关系"><a href="#Ⅱ-axios-与-Axios-的关系" class="headerlink" title="Ⅱ-axios 与 Axios 的关系"></a>Ⅱ-axios 与 Axios 的关系</h2><blockquote><ol><li>从<code>语法</code>上来说: axios 不是 Axios 的实例</li><li>从<code>功能</code>上来说: axios 是 Axios 的实例</li><li>axios 是 <code>Axios.prototype.request</code> 函数 bind()返回的函数</li><li>axios 作为对象有 Axios 原型对象上的所有方法, 有 Axios 对象上所有属性</li></ol></blockquote><h2 id="Ⅲ-instance-与-axios-的区别"><a href="#Ⅲ-instance-与-axios-的区别" class="headerlink" title="Ⅲ- instance 与 axios 的区别?"></a>Ⅲ- instance 与 axios 的区别?</h2><blockquote><ol><li>相同:<br>(1) 都是一个能发任意请求的函数: request(config)<br>(2) 都有发特定请求的各种方法: get()/post()/put()/delete()<br>(3) 都有默认配置和拦截器的属性: defaults/interceptors</li><li>不同:<br>(1) 默认配置很可能不一样<br>(2) instance 没有 axios 后面添加的一些方法: create()/CancelToken()/all()</li></ol></blockquote><h2 id="Ⅳ-axios运行的整体流程"><a href="#Ⅳ-axios运行的整体流程" class="headerlink" title="Ⅳ-axios运行的整体流程"></a>Ⅳ-axios运行的整体流程</h2><blockquote><ol><li><p>整体流程:<br>request(config) ==&gt; dispatchRequest(config) ==&gt; xhrAdapter(config)</p></li><li><p>request(config):<br>将请求拦截器 / dispatchRequest() / 响应拦截器 通过 promise 链串连起来,<br> 返回 promise</p></li><li><p>dispatchRequest(config):<br>转换请求数据 ===&gt; 调用 xhrAdapter()发请求 ===&gt; 请求返回后转换响应数<br> 据. 返回 promise</p></li><li><p>xhrAdapter(config):<br>创建 XHR 对象, 根据 config 进行相应设置, 发送特定请求, 并接收响应数据,<br> 返回 promise </p></li><li><p>流程图:</p></li></ol><p><img src="Axios%E5%85%A5%E9%97%A8%E4%B8%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/Axios%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="Axios系统学习流程图"></p></blockquote><h2 id="Ⅴ-axios-的请求-响应拦截器是什么"><a href="#Ⅴ-axios-的请求-响应拦截器是什么" class="headerlink" title="Ⅴ-axios 的请求/响应拦截器是什么?"></a>Ⅴ-axios 的请求/响应拦截器是什么?</h2><blockquote><ol><li>请求拦截器:<br>Ⅰ- 在真正发送请求前执行的回调函数<br>Ⅱ- 可以对请求进行检查或配置进行特定处理<br>Ⅲ- 成功的回调函数, 传递的默认是 config(也必须是)<br>Ⅳ- 失败的回调函数, 传递的默认是 error</li><li>响应拦截器<br>Ⅰ- 在请求得到响应后执行的回调函数<br>Ⅱ- 可以对响应数据进行特定处理<br>Ⅲ- 成功的回调函数, 传递的默认是 response<br>Ⅳ- 失败的回调函数, 传递的默认是 error</li></ol></blockquote><h2 id="Ⅵ-axios-的请求-响应数据转换器是什么"><a href="#Ⅵ-axios-的请求-响应数据转换器是什么" class="headerlink" title="Ⅵ-axios 的请求/响应数据转换器是什么?"></a>Ⅵ-axios 的请求/响应数据转换器是什么?</h2><blockquote><ol><li>请求转换器: 对请求头和请求体数据进行特定处理的函数</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (utils.<span class="title function_">isObject</span>(data)) &#123;</span><br><span class="line"> <span class="title function_">setContentTypeIfUnset</span>(headers, <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>响应转换器: 将响应体 json 字符串解析为 js 对象或数组的函数</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="property">data</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(response.<span class="property">data</span>)</span><br></pre></td></tr></table></figure></blockquote><h2 id="Ⅶ-response与error-的整体结构"><a href="#Ⅶ-response与error-的整体结构" class="headerlink" title="Ⅶ- response与error  的整体结构"></a>Ⅶ- response与error  的整体结构</h2><blockquote><ol><li>response的整体结构</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&#123;</span><br><span class="line">data, status,statusText,headers,config,request</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>error  的整体结构</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&#123;</span><br><span class="line">message,response,request,</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Ⅷ-如何取消未完成的请求"><a href="#Ⅷ-如何取消未完成的请求" class="headerlink" title="Ⅷ-如何取消未完成的请求?"></a>Ⅷ-如何取消未完成的请求?</h2><blockquote><ol><li>当配置了 cancelToken 对象时, 保存 cancel 函数<br>(1) 创建一个用于将来中断请求的 cancelPromise<br>(2) 并定义了一个用于取消请求的 cancel 函数<br>(3) 将 cancel 函数传递出来</li><li>调用 cancel()取消请求<br>(1) 执行 cacel 函数, 传入错误信息 message<br>(2) 内部会让 cancelPromise 变为成功, 且成功的值为一个 Cancel 对象<br>(3) 在 cancelPromise 的成功回调中中断请求, 并让发请求的 proimse 失败,<br>失败的 reason 为 Cancel 对象</li></ol></blockquote><h1 id="三、Axios源码模拟实现"><a href="#三、Axios源码模拟实现" class="headerlink" title="三、Axios源码模拟实现"></a>三、Axios源码模拟实现</h1><h2 id="Ⅰ-axios-的创建过程模拟实现"><a href="#Ⅰ-axios-的创建过程模拟实现" class="headerlink" title="Ⅰ- axios 的创建过程模拟实现"></a>Ⅰ- axios 的创建过程模拟实现</h2><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">//构造函数</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">config</span>) &#123;</span><br><span class="line">     <span class="comment">//初始化</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">defaults</span> = config; <span class="comment">//为了创建 default 默认属性</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">intercepters</span> = &#123;</span><br><span class="line">       <span class="attr">request</span>: &#123;&#125;,</span><br><span class="line">       <span class="attr">response</span>: &#123;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//原型添加相关的方法</span></span><br><span class="line">   <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送 AJAX 请求 请求的类型为 &#x27;</span> + config.<span class="property">method</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">       <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">post</span> = <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">       <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span></span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//声明函数</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params">config</span>) &#123;</span><br><span class="line">     <span class="comment">//实例化一个对象</span></span><br><span class="line">     <span class="keyword">let</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(config); <span class="comment">// context.get()  context.post()  但是不能当做函数使用 context() X</span></span><br><span class="line">     <span class="comment">//创建请求函数</span></span><br><span class="line">     <span class="keyword">let</span> instance = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(</span><br><span class="line">     context); <span class="comment">// instance 是一个函数 并且可以 instance(&#123;&#125;)  此时 instance 不能 instance.get X</span></span><br><span class="line">     <span class="comment">//将 Axios.prototype 对象中的方法添加到instance函数对象中,才可以instance.get....</span></span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">       instance[key] = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>[key].<span class="title function_">bind</span>(context); <span class="comment">// this.default  this.interceptors</span></span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="comment">//为 instance 函数对象添加属性 default 与 interceptors</span></span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">keys</span>(context).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">       instance[key] = context[key];</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> axios = <span class="title function_">createInstance</span>();</span><br><span class="line">   <span class="comment">//发送请求</span></span><br><span class="line">   <span class="comment">// axios(&#123;method:&#x27;POST&#x27;&#125;);</span></span><br><span class="line">   axios.<span class="title function_">get</span>(&#123;&#125;);</span><br><span class="line">   axios.<span class="title function_">post</span>(&#123;&#125;);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Ⅱ-axios发送请求过程详解"><a href="#Ⅱ-axios发送请求过程详解" class="headerlink" title="Ⅱ-axios发送请求过程详解"></a>Ⅱ-axios发送请求过程详解</h2><blockquote><ol><li>整体流程:<br> request(config) ==&gt; dispatchRequest(config) ==&gt; xhrAdapter(config)</li><li>request(config):<br> 将请求拦截器 / dispatchRequest() / 响应拦截器 通过 promise 链串连起来,<br> 返回 promise</li><li>dispatchRequest(config):<br> 转换请求数据 ===&gt; 调用 xhrAdapter()发请求 ===&gt; 请求返回后转换响应数<br> 据. 返回 promise</li><li>xhrAdapter(config):<br> 创建 XHR 对象, 根据 config 进行相应设置, 发送特定请求, 并接收响应数据,<br> 返回 promise </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// axios 发送请求   axios  Axios.prototype.request  bind</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//1. 声明构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">config</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="variable language_">this</span>.<span class="property">config</span> = config;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//发送请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//创建一个 promise 对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//声明一个数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">let</span> chains = [dispatchRequest, <span class="literal">undefined</span>]; <span class="comment">// undefined 占位</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//调用 then 方法指定回调</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">let</span> result = promise.<span class="title function_">then</span>(chains[<span class="number">0</span>], chains[<span class="number">1</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//返回 promise 的结果</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">return</span> result;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//2. dispatchRequest 函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//调用适配器发送请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">return</span> <span class="title function_">xhrAdapter</span>(config).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//响应的结果进行转换处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//....</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">return</span> response;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">throw</span> error;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//3. adapter 适配器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">function</span> <span class="title function_">xhrAdapter</span>(<span class="params">config</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xhrAdapter 函数执行&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//发送 AJAX 请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//初始化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       xhr.<span class="title function_">open</span>(config.<span class="property">method</span>, config.<span class="property">url</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//发送</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//绑定事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">//判断成功的条件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             <span class="comment">//成功的状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             <span class="title function_">resolve</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="comment">//配置对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">config</span>: config,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="comment">//响应体</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">data</span>: xhr.<span class="property">response</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="comment">//响应头</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">headers</span>: xhr.<span class="title function_">getAllResponseHeaders</span>(), <span class="comment">//字符串  parseHeaders</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="comment">// xhr 请求对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">request</span>: xhr,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="comment">//响应状态码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">status</span>: xhr.<span class="property">status</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="comment">//响应状态字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">statusText</span>: xhr.<span class="property">statusText</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             <span class="comment">//失败的状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请求失败 失败的状态码为&#x27;</span> + xhr.<span class="property">status</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//4. 创建 axios 函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">let</span> axios = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(<span class="literal">null</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Ⅲ-拦截器的模拟实现"><a href="#Ⅲ-拦截器的模拟实现" class="headerlink" title="Ⅲ-拦截器的模拟实现"></a>Ⅲ-拦截器的模拟实现</h2><blockquote><ol><li>array.shift()该方法用于把数组的第一个元素从其中删除，并返回第一个元素的值</li><li>思路为先将拦截器的响应回调与请求回调都压入一个数组中,之后进行遍历运行</li><li><code>promise = promise.then(chains.shift(), chains.shift());</code> 通过循环使用promise的then链条得到最终的结果–&gt;等式前面的<code>promise</code>将被最终的结果覆盖</li></ol></blockquote><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>拦截器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;script src=&quot;./node_modules/axios/dist/mine-axios.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//构造函数</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">config</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">this</span>.<span class="property">config</span> = config;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">this</span>.<span class="property">interceptors</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">request</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(),</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">response</span>: <span class="keyword">new</span> <span class="title class_">InterceptorManager</span>(),</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//发送请求  难点与重点</span></span></span><br><span class="line"><span class="language-javascript">       <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span>(<span class="params">config</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//创建一个 promise 对象</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//创建一个数组</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">const</span> chains = [dispatchRequest, <span class="literal">undefined</span>];</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//处理拦截器</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//请求拦截器 将请求拦截器的回调 压入到 chains 的前面  request.handles = []</span></span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">               chains.<span class="title function_">unshift</span>(item.<span class="property">fulfilled</span>, item.<span class="property">rejected</span>);</span></span><br><span class="line"><span class="language-javascript">           &#125;);</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//响应拦截器</span></span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="property">handlers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">               chains.<span class="title function_">push</span>(item.<span class="property">fulfilled</span>, item.<span class="property">rejected</span>);</span></span><br><span class="line"><span class="language-javascript">           &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// console.log(chains);</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//遍历</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">while</span>(chains.<span class="property">length</span> &gt; <span class="number">0</span>)&#123; </span></span><br><span class="line"><span class="language-javascript">               <span class="comment">//array.shift()</span></span></span><br><span class="line"><span class="language-javascript">               promise = promise.<span class="title function_">then</span>(chains.<span class="title function_">shift</span>(), chains.<span class="title function_">shift</span>());</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> promise;</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//返回一个promise 队形</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="title function_">resolve</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="attr">status</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">                   <span class="attr">statusText</span>: <span class="string">&#x27;OK&#x27;</span></span></span><br><span class="line"><span class="language-javascript">               &#125;);</span></span><br><span class="line"><span class="language-javascript">           &#125;);</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//创建实例</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(&#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//创建axios函数</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> axios = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(context);</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//将 context 属性 config interceptors 添加至 axios 函数对象身上</span></span></span><br><span class="line"><span class="language-javascript">       <span class="title class_">Object</span>.<span class="title function_">keys</span>(context).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">           axios[key] = context[key];</span></span><br><span class="line"><span class="language-javascript">       &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//拦截器管理器构造函数</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">InterceptorManager</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">this</span>.<span class="property">handlers</span> = [];</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">use</span> = <span class="keyword">function</span>(<span class="params">fulfilled, rejected</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">               fulfilled,</span></span><br><span class="line"><span class="language-javascript">               rejected</span></span><br><span class="line"><span class="language-javascript">           &#125;)</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//以下为功能测试代码</span></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 设置请求拦截器  config 配置对象</span></span></span><br><span class="line"><span class="language-javascript">       axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> <span class="title function_">one</span>(<span class="params">config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功 - 1号&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> config;</span></span><br><span class="line"><span class="language-javascript">       &#125;, <span class="keyword">function</span> <span class="title function_">one</span>(<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败 - 1号&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span></span><br><span class="line"><span class="language-javascript">       &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> <span class="title function_">two</span>(<span class="params">config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功 - 2号&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> config;</span></span><br><span class="line"><span class="language-javascript">       &#125;, <span class="keyword">function</span> <span class="title function_">two</span>(<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败 - 2号&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span></span><br><span class="line"><span class="language-javascript">       &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 设置响应拦截器</span></span></span><br><span class="line"><span class="language-javascript">       axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功 1号&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> response;</span></span><br><span class="line"><span class="language-javascript">       &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败 1号&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span></span><br><span class="line"><span class="language-javascript">       &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功 2号&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> response;</span></span><br><span class="line"><span class="language-javascript">       &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败 2号&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span></span><br><span class="line"><span class="language-javascript">       &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">       &#125;);</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Ⅳ-请求取消功能模拟实现"><a href="#Ⅳ-请求取消功能模拟实现" class="headerlink" title="Ⅳ-请求取消功能模拟实现"></a>Ⅳ-请求取消功能模拟实现</h2><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>取消请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">crossorigin</span>=<span class="string">&#x27;anonymous&#x27;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- &lt;script src=&quot;./node_modules/axios/dist/mine-axios.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>axios取消请求<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span> 发送请求 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span> 取消请求 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//构造函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">Axios</span>(<span class="params">config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">this</span>.<span class="property">config</span> = config;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//原型 request 方法</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">return</span> <span class="title function_">dispatchRequest</span>(config);</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//dispatchRequest 函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">return</span> <span class="title function_">xhrAdapter</span>(config);</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//xhrAdapter</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">xhrAdapter</span>(<span class="params">config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//发送 AJAX 请求</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//实例化对象</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//初始化</span></span></span><br><span class="line"><span class="language-javascript">       xhr.<span class="title function_">open</span>(config.<span class="property">method</span>, config.<span class="property">url</span>);</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//发送</span></span></span><br><span class="line"><span class="language-javascript">       xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//处理结果</span></span></span><br><span class="line"><span class="language-javascript">       xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//判断结果</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="comment">//设置为成功的状态</span></span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">resolve</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">status</span>: xhr.<span class="property">status</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">statusText</span>: xhr.<span class="property">statusText</span></span></span><br><span class="line"><span class="language-javascript">             &#125;);</span></span><br><span class="line"><span class="language-javascript">           &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请求失败&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//关于取消请求的处理</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">if</span> (config.<span class="property">cancelToken</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//对 cancelToken 对象身上的 promise 对象指定成功的回调</span></span></span><br><span class="line"><span class="language-javascript">         config.<span class="property">cancelToken</span>.<span class="property">promise</span>.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">           xhr.<span class="title function_">abort</span>();</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//将整体结果设置为失败</span></span></span><br><span class="line"><span class="language-javascript">           <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请求已经被取消&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">         &#125;);</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//创建 axios 函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> context = <span class="keyword">new</span> <span class="title class_">Axios</span>(&#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> axios = <span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span>.<span class="title function_">bind</span>(context);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//CancelToken 构造函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">CancelToken</span>(<span class="params">executor</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//声明一个变量</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> resolvePromise;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//为实例对象添加属性</span></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">this</span>.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//将 resolve 赋值给 resolvePromise</span></span></span><br><span class="line"><span class="language-javascript">       resolvePromise = resolve</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//调用 executor 函数</span></span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">executor</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//执行 resolvePromise 函数</span></span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">resolvePromise</span>();</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//获取按钮 以上为模拟实现的代码</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//2.声明全局变量</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> cancel = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">   btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//检测上一次的请求是否已经完成</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">if</span> (cancel !== <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//取消上一次的请求</span></span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">cancel</span>();</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//创建 cancelToken 的值</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> cancelToken = <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> (<span class="params">c</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       cancel = c;</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//1. 添加配置对象的属性</span></span></span><br><span class="line"><span class="language-javascript">       <span class="attr">cancelToken</span>: cancelToken</span></span><br><span class="line"><span class="language-javascript">     &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//将 cancel 的值初始化</span></span></span><br><span class="line"><span class="language-javascript">       cancel = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//绑定第二个事件取消请求</span></span></span><br><span class="line"><span class="language-javascript">   btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">cancel</span>();</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="四、自己对于某些问题解答与理解"><a href="#四、自己对于某些问题解答与理解" class="headerlink" title="四、自己对于某些问题解答与理解"></a>四、自己对于某些问题解答与理解</h1><h2 id="Ⅰ-axios同步与异步转换-在外部取值"><a href="#Ⅰ-axios同步与异步转换-在外部取值" class="headerlink" title="Ⅰ-axios同步与异步转换,在外部取值"></a>Ⅰ-axios同步与异步转换,在外部取值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  axios  =  <span class="built_in">require</span> (<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"> <span class="comment">//创建实例对象 </span></span><br><span class="line"> <span class="keyword">const</span> $http = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:53000&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">11000</span>  <span class="comment">//请求超时时间</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">resolveCommon</span> = (<span class="params"></span>)=&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> data=$http(&#123; <span class="attr">url</span>:<span class="string">&quot;/test&quot;</span>&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>v.<span class="property">data</span>)  <span class="comment">//等于 `.then(v=&gt;&#123;return v&#125;)`</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  <span class="comment">//打印结果: Promise &#123; &lt;pending&gt; &#125; </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">resolveAsync</span>=<span class="keyword">async</span> (<span class="params"></span>)=&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> data=<span class="keyword">await</span> $http(&#123; <span class="attr">url</span>:<span class="string">&quot;/test&quot;</span>&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>v.<span class="property">data</span>)  <span class="comment">//等于 `.then(v=&gt;&#123;return v&#125;)`,我再then()中返回出去,让外部承接</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)  <span class="comment">//获得正确的值</span></span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * 打印结果&#123; id: 1000,course_name: &#x27;这是请求数据1&#x27;, autor: &#x27;袁明&#x27;, college: &#x27;金并即总变史&#x27;,category_Id: 2&#125;</span></span><br><span class="line"><span class="comment">    *  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//模拟新增数据,将上一步的结果简单加工一下</span></span><br><span class="line">   data.<span class="property">course_name</span>=data.<span class="property">course_name</span>+<span class="number">1</span></span><br><span class="line"> $http(&#123;</span><br><span class="line">   <span class="attr">url</span>:<span class="string">&quot;/test&quot;</span>,</span><br><span class="line">   <span class="attr">method</span>:<span class="string">&quot;put&quot;</span>,</span><br><span class="line">   data</span><br><span class="line"> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(v)  <span class="comment">//直接打印了 需要再取出参照上一步</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">resolveCommon</span>()  <span class="comment">//调用普通promise函数</span></span><br><span class="line"><span class="title function_">resolveAsync</span>()    <span class="comment">//调用await+async</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记整合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML规范</title>
      <link href="/2022/10/13/HTML%E8%A7%84%E8%8C%83/"/>
      <url>/2022/10/13/HTML%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-代码规范"><a href="#HTML-代码规范" class="headerlink" title="HTML 代码规范"></a>HTML 代码规范</h2><blockquote><p>很多 Web 开发人员对 HTML 的代码规范知之甚少。</p><p>在2000年至2010年，许多Web开发人员从 HTML 转换到 XHTML,使用 XHTML 开发人员逐渐养成了比较好的 HTML 编写规范。</p><p>而针对于 HTML5 ，我们应该形成比较好的代码规范，以下提供了几种规范的建议</p></blockquote><h2 id="Ⅰ-HTML整体结构"><a href="#Ⅰ-HTML整体结构" class="headerlink" title="Ⅰ - HTML整体结构"></a><strong>Ⅰ - HTML整体结构</strong></h2><h3 id="1、-DOCTYPE-声明"><a href="#1、-DOCTYPE-声明" class="headerlink" title="1、 DOCTYPE 声明"></a>1、 DOCTYPE 声明</h3><blockquote><p>一个 DOCTYPE 必须包含以下部分，并严格按照顺序出现：</p><ol><li>一个 ASCII 字符串 “<code>&lt;!DOCTYPE&gt;</code>” ，大小写不敏感</li><li>一个或多个空白字符</li><li>一个 ASCII 字符串” <code>html</code> ”，大小写不敏感</li><li>一个可选的历史遗留的 DOCTYPE 字符串 （<a href="http://www.w3.org/TR/2014/REC-html5-20141028/syntax.html#doctype-legacy-string">DOCTYPE legacy string</a>），或者一个可选的已过时但被允许的 DOCTYPE 字符串 （<a href="http://www.w3.org/TR/2014/REC-html5-20141028/syntax.html#obsolete-permitted-doctype-string">obsolete permitted DOCTYPE string</a>） 字符串</li><li>一个或多个空白字符</li><li>一个编码为 U+003E 的字符 “<code>&gt;</code>”</li></ol></blockquote><h3 id="2、HTML基础代码块"><a href="#2、HTML基础代码块" class="headerlink" title="2、HTML基础代码块"></a>2、HTML基础代码块</h3><blockquote><ol><li>文件应以<code>&lt;!DOCTYPE.....&gt;</code>首行顶格开始，这句话告诉浏览器这是一个什么文件，通常会使用<code>&lt;!DOCTYPE html&gt;</code>。</li><li>必须在head元素内部的meta标签内声明文档的字符编码charset, 如：<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>，这句代码告诉浏览器应该此HTML文件使用的字符集是什么，如果不加此行代码，那么在浏览器中可能显示为乱码</li><li> 页面的title是极为重要的不可缺少的一项。通常用我们编辑器快捷键就能得到(VSCode中敲 <code>!</code>号后按tab 就能补全得到)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="3、HTML代码结构和视觉顺序基本保持一致"><a href="#3、HTML代码结构和视觉顺序基本保持一致" class="headerlink" title="3、HTML代码结构和视觉顺序基本保持一致"></a>3、HTML代码结构和视觉顺序基本保持一致</h3><blockquote><ol><li>按照从上之下，从左到右的视觉顺序书写HTML结构。</li><li>有时候<strong>为了便于搜索引擎抓取</strong>,我们也会将重要内容在HTML结构顺序上提前，因为搜索引擎抓取网页内容是自上而下的，所以将重要内容在HTML结构顺序上提前可便于抓取重要的内容</li><li>不要使用table布局，现在基本上被淘汰了，而应该代之以div来布局，方便控制。</li></ol></blockquote><h3 id="4、结构、表现、行为三者分类，避免内联"><a href="#4、结构、表现、行为三者分类，避免内联" class="headerlink" title="4、结构、表现、行为三者分类，避免内联"></a>4、结构、表现、行为三者分类，避免内联</h3><blockquote><ul><li>使用link引入外部css文件到head中。<strong>注意：一般我们不使用@import来引入外部css文件</strong></li><li>使用script将js文件引入，并置于body底部，这时js文件会最后加载，html会最先加载，用户体验会更好。（注意：并不是所有的js文件都要放置于body的底部，如当我们需要使用js文件动态修改meta元素内容时，需要将js文件引入到head标签中)</li></ul></blockquote><h3 id="5、保持良好的树形结构"><a href="#5、保持良好的树形结构" class="headerlink" title="5、保持良好的树形结构"></a>5、保持良好的树形结构</h3><blockquote><ul><li>每一个块级元素都另起一行，每一行都是用tab缩进对齐。<strong>如果不是块级元素，比如几个行内元素，我们把他写在一行即可。</strong>注意：html、 head、 body ，其他的大都正常缩进</li><li>当然，我们也可以在大的模块之间用空行空开，在模块内不要使用多余的空行,下面为实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>努力学习的汪<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML整体结构规范<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>行内元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>写在一行<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="6、关于使用className的小细节"><a href="#6、关于使用className的小细节" class="headerlink" title="6、关于使用className的小细节"></a>6、关于使用className的小细节</h3><blockquote><p>　　1. 一个标签上引用的className不要过多，越少越好。<br>　　2. 对于一个语义化的内部标签，应该尽量避免使用className</p></blockquote><hr><h2 id="Ⅱ-HTML代码格式"><a href="#Ⅱ-HTML代码格式" class="headerlink" title="Ⅱ - HTML代码格式"></a><strong>Ⅱ - HTML代码格式</strong></h2><h3 id="1、使用小写元素名"><a href="#1、使用小写元素名" class="headerlink" title="1、使用小写元素名"></a>1、使用小写元素名</h3><blockquote><p>HTML5 元素名可以使用大写和小写字母。推荐使用小写字母：</p><blockquote><ul><li>混合了大小写的风格是非常糟糕的。</li><li>开发人员通常使用小写 (类似 XHTML)。</li><li>小写风格看起来更加清爽。</li><li>小写字母容易编写。</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 不推荐  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">SECTION</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">SECTION</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">&lt;!-- 非常糟  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">Section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">SECTION</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">&lt;!-- 推荐的  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="2、建议关闭所有-HTML-元素"><a href="#2、建议关闭所有-HTML-元素" class="headerlink" title="2、建议关闭所有 HTML 元素"></a>2、建议关闭所有 HTML 元素</h3><blockquote><p>在 HTML5 中, 你不一定要关闭所有元素 (例如 <code>&lt;p&gt;</code>元素)，但我们建议每个元素都要添加关闭标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 不推荐  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。</span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">&lt;!-- 推荐的  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是空的标签,也建议要自闭合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">&gt;//自闭合,建议这么写</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="3、使用小写属性名"><a href="#3、使用小写属性名" class="headerlink" title="3、使用小写属性名"></a>3、使用小写属性名</h3><blockquote><p>HTML5 属性名允许使用大写和小写字母。我们推荐使用小写字母属性名:</p><blockquote><ul><li>同时使用大写写是非常不好的习惯。</li><li>开发人员通常使用小写 (类似 XHTML)。</li><li>小写风格看起来更加清爽。</li><li>小写字母容易编写。</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 不推荐  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">CLASS</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">&gt;<span class="comment">&lt;!-- 推荐的  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4、属性值"><a href="#4、属性值" class="headerlink" title="4、属性值"></a>4、属性值</h3><blockquote><p>HTML5 属性值可以不用引号。但我们推荐使用引号:</p><blockquote><ul><li>如果属性值含有空格需要使用引号。</li><li>混合风格不推荐的，建议统一风格。</li><li>属性值使用引号易于阅读。</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 以下实例属性值包含空格，没有使用引号，所以不能起作用  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">table</span> <span class="attr">striped</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">&gt;<span class="comment">&lt;!-- 以下使用了双引号，是正确的  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table striped&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="5、图片属性"><a href="#5、图片属性" class="headerlink" title="5、图片属性"></a>5、图片属性</h3><blockquote><ul><li>图片通常使用 <a href="https://www.w3cschool.cn/htmltags/att-img-alt.html">alt 属性</a>。 在图片不能显示时，它能替代图片显示。</li><li>定义好图片的尺寸，在加载时可以预留指定空间，减少闪烁。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;html5.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;HTML5&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100px;height:100px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="6、-号前后少用空格和等号"><a href="#6、-号前后少用空格和等号" class="headerlink" title="6、= 号前后少用空格和等号"></a>6、= 号前后少用空格和等号</h3><blockquote><p>等号前后可以使用空格。但我们推荐少用空格 (<strong>与JS不同</strong>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 不推荐  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span> = <span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">&lt;!-- 推荐的  --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="7、避免一行代码过长"><a href="#7、避免一行代码过长" class="headerlink" title="7、避免一行代码过长"></a>7、避免一行代码过长</h3><blockquote><p>使用 HTML 编辑器，左右滚动代码是不方便的。</p><p>每行代码尽量少于 80 个字符。</p></blockquote><h3 id="8、空行和缩进"><a href="#8、空行和缩进" class="headerlink" title="8、空行和缩进"></a>8、空行和缩进</h3><blockquote><ul><li>不要无缘无故添加空行</li><li>为每个逻辑功能块添加空行，这样更易于阅读。</li><li>缩进使用两个空格，不建议使用 <strong>TAB</strong>。</li><li>比较短的代码间不要使用不必要的空行和缩进。</li></ul><blockquote><h6 id="不推荐的-可以看到多余的空行会导致我们阅读困难"><a href="#不推荐的-可以看到多余的空行会导致我们阅读困难" class="headerlink" title="不推荐的:可以看到多余的空行会导致我们阅读困难"></a>不推荐的:可以看到多余的空行会导致我们阅读困难</h6></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML整体结构规范<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>行内<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>好好学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>努力学习的汪<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>hongjilin<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>新生代农民工<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h6 id="推荐的"><a href="#推荐的" class="headerlink" title="推荐的"></a>推荐的</h6></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML整体结构规范<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>行内<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>好好学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下方因为是列表,不同功能块,所以也可以加空行,不加也可,建议不加(除非大的功能块)  --&gt;</span>   </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>努力学习的汪<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>hongjilin<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>新生代农民工<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="9、省略-lt-html-gt-和-lt-body-gt"><a href="#9、省略-lt-html-gt-和-lt-body-gt" class="headerlink" title="9、省略 &lt;html&gt; 和 &lt;body&gt; ?"></a>9、省略 <code>&lt;html&gt; </code>和 <code>&lt;body&gt;</code> ?</h3><blockquote><p>在标准 HTML5 中， <code>&lt;html&gt;</code> 和 <code>&lt;body&gt;</code> 标签是可以省略的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 以下 HTML5 文档是正确的--&gt;</span>   </span><br><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h6 id="但是不推荐省略-lt-html-gt-和-lt-body-gt-标签。"><a href="#但是不推荐省略-lt-html-gt-和-lt-body-gt-标签。" class="headerlink" title="但是不推荐省略 &lt;html&gt; 和 &lt;body&gt; 标签。"></a>但是<strong>不推荐省略 <code>&lt;html&gt;</code> 和 <code>&lt;body&gt;</code> 标签。</strong></h6></blockquote><ul><li><html> 元素是文档的根元素，用于描述页面的语言</li><li>声明语言是为了方便屏幕阅读器及搜索引擎。</li><li>省略 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 在 DOM 和 XML 软件中会崩溃。</li><li>省略 <code>&lt;body&gt;</code> 在旧版浏览器 (IE9)会发生错误。</li></ul><blockquote><h6 id="在标准-HTML5-中，-lt-head-gt-标签是可以省略的-但是同样建议不省略"><a href="#在标准-HTML5-中，-lt-head-gt-标签是可以省略的-但是同样建议不省略" class="headerlink" title="在标准 HTML5 中， &lt;head&gt;标签是可以省略的,但是同样建议不省略"></a>在标准 HTML5 中， <code>&lt;head&gt;</code>标签是可以省略的,但是同样建议不省略</h6></blockquote><p>默认情况下，浏览器会将 <code>&lt;body&gt;</code> 之前的内容添加到一个默认的 <code>&lt;head&gt;</code> 元素上。</p></blockquote><h3 id="10、元数据"><a href="#10、元数据" class="headerlink" title="10、元数据"></a>10、元数据</h3><blockquote><p>HTML5 中 <code>&lt;title&gt;</code> 元素是必须的，标题名描述了页面的主题:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">title</span>&gt;</span>努力学习的汪的HTML规范代码示范<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标题和语言可以让搜索引擎很快了解你页面的主题:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>努力学习的汪的HTML规范代码示范<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="11、样式表-–-gt-css"><a href="#11、样式表-–-gt-css" class="headerlink" title="11、样式表 –&gt; css"></a>11、样式表 –&gt; css</h3><blockquote><ul><li>将左花括号与选择器放在同一行。</li><li>左花括号与选择器间添加一个空格。</li><li>使用两个空格来缩进。</li><li>冒号与属性值之间添加一个空格。</li><li><strong>逗号和符号之后使用一个空格</strong>。这个基本是约定俗成的了</li><li>每个属性与值结尾都要使用符号。</li><li>只有属性值包含空格时才使用引号。</li><li>右花括号放在新的一行。</li><li>每行最多 80 个字符。</li></ul><blockquote><h6 id="短的规则可以写成一行"><a href="#短的规则可以写成一行" class="headerlink" title="短的规则可以写成一行:"></a>短的规则可以写成一行:</h6></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="selector-tag">p</span><span class="selector-class">.into</span> &#123;<span class="attribute">font-family</span>: Verdana; <span class="attribute">font-size</span>: <span class="number">16em</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><h6 id="长的规则可以写成多行"><a href="#长的规则可以写成多行" class="headerlink" title="长的规则可以写成多行:"></a>长的规则可以写成多行:</h6></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="selector-tag">body</span> &#123;</span><br><span class="line"> <span class="attribute">background-color</span>: lightgrey;</span><br><span class="line"> <span class="attribute">font-family</span>: <span class="string">&quot;Arial Black&quot;</span>, Helvetica, sans-serif;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">16em</span>;</span><br><span class="line"> <span class="attribute">color</span>: black;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="12、使用小写文件名"><a href="#12、使用小写文件名" class="headerlink" title="12、使用小写文件名"></a>12、使用小写文件名</h3><blockquote><ul><li>大多 Web 服务器 (Apache, Unix) 对大小写敏感：london.jpg 不能通过 London.jpg 访问。</li><li>其他 Web 服务器 (Microsoft, IIS) 对大小写不敏感：london.jpg 可以通过 London.jpg 或 london.jpg 访问。</li><li>你必须保持统一的风格，我们建议统一使用小写的文件名。</li></ul></blockquote><h3 id="13、文件扩展名"><a href="#13、文件扩展名" class="headerlink" title="13、文件扩展名"></a>13、文件扩展名</h3><blockquote><ul><li>HTML 文件后缀可以是 <strong>.html</strong> (或 <strong>.htm</strong>)。</li><li>CSS 文件后缀是 <strong>.css</strong> 。</li><li>JavaScript 文件后缀是 <strong>.js</strong> 。</li></ul></blockquote><h3 id="14、-htm-和-html-的区别"><a href="#14、-htm-和-html-的区别" class="headerlink" title="14、.htm 和 .html 的区别"></a>14、.htm 和 .html 的区别</h3><blockquote><p>.htm 和 .html 的扩展名文件本质上是没有区别的。浏览器和 Web 服务器都会把它们当作 HTML 文件来处理。</p><blockquote><h6 id="大体上区别在于："><a href="#大体上区别在于：" class="headerlink" title="大体上区别在于："></a>大体上区别在于：</h6></blockquote><ul><li>.htm 应用在早期 DOS 系统，系统现在后缀只能有三个字符。</li><li>在 Unix 系统中后缀没有特别限制，一般用 .html。</li></ul><blockquote><h6 id="技术上的区别"><a href="#技术上的区别" class="headerlink" title="技术上的区别"></a>技术上的区别</h6></blockquote><ul><li>如果一个 URL 没有指定文件名 (如 //<a href="http://www.w3cschool.cn/css/">www.w3cschool.cn/css/</a>), 服务器会返回默认的文件名。</li><li>通常默认文件名为 index.html, index.htm, default.html, 和 default.htm。</li><li>如果服务器只配置了 “index.html” 作为默认文件，你必须将文件命名为 “index.html”, 而不是 “index.htm”。</li><li>但是，通常服务器可以设置多个默认文件，你可以根据需要设置默认文件吗。</li><li>不管怎样，HTML 完整的后缀是 “.html”。</li></ul></blockquote><h3 id="语法总结与补充"><a href="#语法总结与补充" class="headerlink" title="语法总结与补充"></a>语法总结与补充</h3><blockquote><ul><li>用两个空格来代替制表符（tab） – 这是唯一能保证在所有环境下获得一致展现的方法。</li><li>嵌套元素应当缩进一次（即两个空格）。</li><li>对于属性的定义，<strong>尽量使用双引号，不要使用单引号</strong>。</li><li>不要在自闭合（self-closing）元素的尾部添加斜线 – <a href="http://dev.w3.org/html5/spec-author-view/syntax.html#syntax-start-tag">HTML5 规范</a>中明确说明这是可选的。</li><li>不要省略可选的结束标签（closing tag）（例如，<code>&lt;/li&gt;</code> 或 <code>&lt;/body&gt;</code>）。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./hong.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;努力学习的汪的头像&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;hello world&quot;</span>&gt;</span>你好!阿汪<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="Ⅲ-HTML-注释规范"><a href="#Ⅲ-HTML-注释规范" class="headerlink" title="Ⅲ - HTML 注释规范"></a><strong>Ⅲ - HTML 注释规范</strong></h2><blockquote><p>这个注释规范每个团队都不一样的,主要团队能互相看得懂即可,这里列举我看到的觉得比较好的规范</p></blockquote><h3 id="1、遵循标准"><a href="#1、遵循标准" class="headerlink" title="1、遵循标准"></a>1、遵循标准</h3><blockquote><p>HTML注释规范写法应该遵循以下标准：</p><ul><li>必须以4个有序字符开始：编码为 U+003C LESS-THAN SIGN 的小于号, 编码为 U+0021 EXCLAMATION MARK 的感叹号, 编码为 U+002D HYPHEN-MINUS 横线, 编码为 U+002D HYPHEN-MINUS横线 ，即 “&lt;!–”</li><li>在此之后是注释内容，注释的内容有以下限制：不能以单个 “&gt;” (U+003E) 字符开始不能以由 “-“（U+002D HYPHEN-MINUS）和 ”&gt;” (U+003E) 组合的字符开始，即 “-&gt;”不能包含两个连续的 U+002D HYPHEN-MINUS 字符，即 “–”不能以一个 U+002D HYPHEN-MINUS 字符结束，即 “-”</li><li>必须以3个有序字符结束：U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS, U+003E GREATER-THAN SIGN，即 “–&gt;”</li></ul><blockquote><h6 id="标准写法"><a href="#标准写法" class="headerlink" title="标准写法"></a>标准写法</h6></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 这是一个正确的注释 --&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h6 id="错误的写法"><a href="#错误的写法" class="headerlink" title="错误的写法"></a>错误的写法</h6></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!--&gt;这是一个错误的注释 --&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!---&gt;这是第二个错误的注释--&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!--这是--第三个--错误注释--&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!--这是第四个错误注释---&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="2、长注释"><a href="#2、长注释" class="headerlink" title="2、长注释"></a>2、长注释</h3><blockquote><p>比较长的评论可以在 <code>&lt;!-- 和 --&gt;</code> 中分行写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 从前有个新生代农民工,他非常努力学习,同时又是一个单身狗</span></span><br><span class="line"><span class="comment"> 所以他叫 努力学习的汪 ~~</span></span><br><span class="line"><span class="comment">&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>长评论第一个字符缩进两个空格，更易于阅读。</p></blockquote><h3 id="3、单行注释"><a href="#3、单行注释" class="headerlink" title="3、单行注释"></a>3、单行注释</h3><blockquote><ul><li>一般用于简单的描述，如某些状态描述、属性描述等</li><li>本人觉得比较好的习惯就是: 注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- Comment Text --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h6 id="不推荐"><a href="#不推荐" class="headerlink" title="不推荐"></a>不推荐</h6></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- Comment Text --&gt;</span> </span><br></pre></td></tr></table></figure></blockquote><h3 id="4、模块注释"><a href="#4、模块注释" class="headerlink" title="4、模块注释"></a>4、模块注释</h3><blockquote><ul><li>一般用于描述模块的名称以及模块开始与结束的位置</li><li>注释内容前后各一个空格字符，<code>&lt;!-- S Comment Text --&gt;</code> 表示模块开始</li><li><code>&lt;!-- E Comment Text --&gt;</code> 表示模块结束，模块与模块之间相隔一行</li></ul><blockquote><h6 id="推荐写法"><a href="#推荐写法" class="headerlink" title="推荐写法"></a>推荐写法</h6></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- S 模块A --&gt;</span>   </span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_a&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!-- E 模块 A --&gt;</span></span><br><span class="line">   </span><br><span class="line">&gt;<span class="comment">&lt;!-- S 模块 B --&gt;</span>   </span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_b&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!-- E 模块 B --&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h6 id="不推荐写法"><a href="#不推荐写法" class="headerlink" title="不推荐写法"></a>不推荐写法</h6></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- S 模块 A --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_a&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!-- E 模块 A --&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!-- S 模块 B --&gt;</span>   </span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_b&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!-- E 模块 B --&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="5、嵌套模块注释"><a href="#5、嵌套模块注释" class="headerlink" title="5、嵌套模块注释"></a>5、嵌套模块注释</h3><blockquote><p>当模块注释内再出现模块注释的时候，为了突出主要模块，嵌套模块不再使用 <code>S/E</code> 而是用<code>/</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- S Comment Text --&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!-- E Comment Text --&gt;</span></span><br><span class="line">&gt;换成下面这样</span><br><span class="line">&gt;<span class="comment">&lt;!-- /Comment Text --&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h6 id="注释写在模块结尾标签底部，单独一行。"><a href="#注释写在模块结尾标签底部，单独一行。" class="headerlink" title="注释写在模块结尾标签底部，单独一行。"></a>注释写在模块结尾标签底部，单独一行。</h6></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- S Comment Text A --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_a&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_b&quot;</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- /mod_b --&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_c&quot;</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- /mod_c --&gt;</span>   </span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;<span class="comment">&lt;!-- E Comment Text A --&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Ⅳ-实用为王"><a href="#Ⅳ-实用为王" class="headerlink" title="Ⅳ - 实用为王"></a><strong>Ⅳ - 实用为王</strong></h2><blockquote><p>尽量遵循 HTML 标准和语义，但是不要以牺牲实用性为代价。任何时候都要尽量使用最少的标签并保持最小的复杂度。</p></blockquote><h3 id="1、属性顺序"><a href="#1、属性顺序" class="headerlink" title="1、属性顺序"></a>1、属性顺序</h3><blockquote><p>HTML 属性建议按照以下给出的顺序依次排列，确保代码的易读性</p><ul><li>class</li><li>id, name</li><li>data-*</li><li>src, for, type, href</li><li>title, alt</li><li>aria-*, role</li></ul><p>class 用于标识高度可复用组件，因此应该排在首位。id 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">data-modal</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://gitee.com/hongjilin&quot;</span>&gt;</span></span><br><span class="line"> 点我跳转</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="2、布尔（boolean）型属性"><a href="#2、布尔（boolean）型属性" class="headerlink" title="2、布尔（boolean）型属性"></a>2、布尔（boolean）型属性</h3><blockquote><p>布尔型属性可以在声明时不赋值。XHTML 规范要求为其赋值，但是 HTML5 规范不需要。</p><blockquote><ul><li>元素的布尔型属性如果有值，就是 true，如果没有值，就是 false。</li><li><strong>如果一定</strong>要为其赋值的话，请参考 WhatWG 规范：</li><li>如果属性存在，其值必须是空字符串或 […] 属性的规范名称，并且不要再收尾添加空白符。</li></ul></blockquote><p>简单来说就是不用赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">selected</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="3、减少标签的数量"><a href="#3、减少标签的数量" class="headerlink" title="3、减少标签的数量"></a>3、减少标签的数量</h3><blockquote><p>编写 HTML 代码时，尽量避免多余的父元素。很多时候，这需要迭代和重构来实现。请看下面的案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 并不怎么好的写法 --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">&lt;!-- 更好的写法 --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="Ⅴ-W3C-XHTML1-0标准需要留意的几个问题"><a href="#Ⅴ-W3C-XHTML1-0标准需要留意的几个问题" class="headerlink" title="Ⅴ - W3C XHTML1.0标准需要留意的几个问题"></a><strong>Ⅴ - W3C XHTML1.0标准需要留意的几个问题</strong></h2><blockquote><p>前面说了那么多,也不知道看进去了多少. 光说不练假把式,看看下方几个问题你说出几个,也权当是巩固一下知识点</p></blockquote><h3 id="1、在-lt-div-class-hong-gt-My-name-is-努力学习的汪-lt-div-gt-这段语句中有什么错误？"><a href="#1、在-lt-div-class-hong-gt-My-name-is-努力学习的汪-lt-div-gt-这段语句中有什么错误？" class="headerlink" title="1、在 &lt;div class=hong&gt;My name is 努力学习的汪!&lt;/div&gt; 这段语句中有什么错误？"></a>1、在 <code>&lt;div class=hong&gt;My name is 努力学习的汪!&lt;/div&gt;</code> 这段语句中有什么错误？</h3><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">hong</span>&gt;</span>My name is 努力学习的汪!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标点符号问题</strong>: 其实也是大家最容易忽略的文艺,实际上就是引号忘了加形成了这个错误.虽然很多浏览器在不加引号的情况加仍然能正确识别渲染.但是想要通过眼里的W3C XHTML国际标准是不可能的 </p><blockquote><h6 id="请大家记住等号后面一定要接引号-下面给出正确写法"><a href="#请大家记住等号后面一定要接引号-下面给出正确写法" class="headerlink" title="请大家记住等号后面一定要接引号,下面给出正确写法"></a>请大家记住等号后面一定要接引号,下面给出正确写法</h6></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hong&quot;</span>&gt;</span>My name is 努力学习的汪!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="2、在-lt-SPAN-class-quot-hong-quot-gt-My-name-is-努力学习的汪-lt-SPAN-gt-这段语句中有什么错误？"><a href="#2、在-lt-SPAN-class-quot-hong-quot-gt-My-name-is-努力学习的汪-lt-SPAN-gt-这段语句中有什么错误？" class="headerlink" title="2、在 &lt;SPAN class=&quot;hong&quot;&gt;My name is 努力学习的汪!&lt;/SPAN&gt;这段语句中有什么错误？"></a>2、在 <code>&lt;SPAN class=&quot;hong&quot;&gt;My name is 努力学习的汪!&lt;/SPAN&gt;</code>这段语句中有什么错误？</h3><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">SPAN</span> <span class="attr">class</span>=<span class="string">&quot;hong&quot;</span>&gt;</span>My name is 努力学习的汪!<span class="tag">&lt;/<span class="name">SPAN</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>大小写问题</strong>: 这与第一个问题是一样的,都是容易忽略的细节误问题. </p><blockquote><h6 id="上面说过-尽量使用小写的元素名-下面给出正确写法"><a href="#上面说过-尽量使用小写的元素名-下面给出正确写法" class="headerlink" title="上面说过,尽量使用小写的元素名,下面给出正确写法"></a>上面说过,<strong>尽量使用小写的元素名</strong>,下面给出正确写法</h6></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hong&quot;</span>&gt;</span>My name is 努力学习的汪!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="3、在-lt-p-gt-How-are-you-lt-p-gt-lt-br-gt-lt-p-gt-I-39-m-fine-thanks-lt-p-gt-这段语句中有什么错误？"><a href="#3、在-lt-p-gt-How-are-you-lt-p-gt-lt-br-gt-lt-p-gt-I-39-m-fine-thanks-lt-p-gt-这段语句中有什么错误？" class="headerlink" title="3、在&lt;p&gt;How are you?&lt;/p&gt;&lt;br&gt;&lt;p&gt;I&#39;m fine, thanks.&lt;/p&gt;这段语句中有什么错误？"></a>3、在<code>&lt;p&gt;How are you?&lt;/p&gt;&lt;br&gt;&lt;p&gt;I&#39;m fine, thanks.&lt;/p&gt;</code>这段语句中有什么错误？</h3><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">p</span>&gt;</span>How are you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>I&#x27;m fine, thanks.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　<code>&lt;br /&gt;</code>标签问题。对于强制换行标签<code>&lt;br /&gt;</code>来说，很多老手都分不清它和<code>&lt;br&gt;</code>的区别</p></blockquote><h4 id="a-知识点补充-lt-br-gt-与-lt-br-gt-or-lt-br-gt-的区别"><a href="#a-知识点补充-lt-br-gt-与-lt-br-gt-or-lt-br-gt-的区别" class="headerlink" title="a) 知识点补充: &lt;br /&gt;与&lt;br&gt; or &lt;/br&gt;的区别"></a>a) 知识点补充: <code>&lt;br /&gt;</code>与<code>&lt;br&gt; or &lt;/br&gt;</code>的区别</h4><blockquote><ul><li>在早先发布的html规范中<code>&lt;br&gt;</code>/<code>&lt;hr&gt;</code>/<code>&lt;img&gt;</code>等标记元素是无需“封闭自身”的</li><li>这就造成了html规范本身的不严谨，所以后来参考了更规范的XML语言的语法推出了<code>xhtml</code>。</li><li>在xhtml中所有类似br这样的孤立标签都需要自行封闭，具体的做法就是在标签名字的后面跟个“/”，例如<code>&lt;br /&gt;</code>，因此，是没有<code>&lt;/br&gt;</code>这个写法的。</li><li>从逻辑上讲<code>&lt;br /&gt;</code>=<code>&lt;br&gt;</code>…<code>&lt;/br&gt;</code>，这样做的目的是为了尽量减少网页的代码量，同时保持逻辑严谨。</li></ul></blockquote><h4 id="b-知识点补充-HTML-与-XHTML-之间的差异"><a href="#b-知识点补充-HTML-与-XHTML-之间的差异" class="headerlink" title="b) 知识点补充:HTML 与 XHTML 之间的差异"></a>b) 知识点补充:<strong>HTML 与 XHTML 之间的差异</strong></h4><blockquote><ul><li>在 HTML 中，<code>&lt;br&gt;</code> 标签没有结束标签。</li><li>在 XHTML 中，<code>&lt;br&gt;</code> 标签必须被正确地关闭，比如这样：<code>&lt;br /&gt;</code>。</li><li>同时所有浏览器都支持 <code>&lt;br&gt;</code> 标签。因为这是旧版本的写法,虽然不建议了,但仍需要兼容</li></ul></blockquote><h4 id="c-正确写法"><a href="#c-正确写法" class="headerlink" title="c) 正确写法"></a>c) 正确写法</h4><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">p</span>&gt;</span>How are you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>I&#x27;m fine, thanks.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4、-lt-h1-gt-hey-努力学习的汪-lt-h1-gt-这段语句中有什么错误？"><a href="#4、-lt-h1-gt-hey-努力学习的汪-lt-h1-gt-这段语句中有什么错误？" class="headerlink" title="4、 &lt;h1&gt;~hey~~努力学习的汪~~&lt;/h1&gt; 这段语句中有什么错误？"></a>4、 <code>&lt;h1&gt;~hey~~努力学习的汪~~&lt;/h1&gt;</code> 这段语句中有什么错误？</h3><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>~hey~~努力学习的汪~~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>留意标签结束后面接的标点符号，很多标签结束后都不能接特殊标点符号，比如这里的”~”波浪号，那怎样用才对呢？</p><ul><li>那就使用ISO Latin-1字符集（ISO Latin-1 Character Set），在这里，查找到“<del>”波浪号绝对应的字符集十进制编码是</del>，</li><li>然后就用这个十进制编码代替~波浪号，记住最后的分号不能丢。</li><li>在ISO Latin-1字符集中以已命名实体（Named entity）最优先，十进制编码（Decimal code）其次</li><li>也就是说，一个符号在同时有十进制编码和已命名实体的时候，优先选用已命名实体而不使用十进制编码。</li></ul></blockquote><h3 id="5、-在-lt-form-id-quot-999hong-quot-gt-lt-form-gt-这段语句中有什么错误？"><a href="#5、-在-lt-form-id-quot-999hong-quot-gt-lt-form-gt-这段语句中有什么错误？" class="headerlink" title="5、 在 &lt;form id=&quot;999hong&quot;&gt;&lt;/form&gt; 这段语句中有什么错误？"></a>5、 在<code> &lt;form id=&quot;999hong&quot;&gt;&lt;/form&gt;</code> 这段语句中有什么错误？</h3><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;999hong&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>留意id和class特殊情况。W3C XHTML1.0 标准中规定，在id或class中，第一个字符是不能是数字的，必须是字母</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;hong999&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="6、在-lt-img-src-quot-logo-png-quot-gt-这段语句中有什么错误？"><a href="#6、在-lt-img-src-quot-logo-png-quot-gt-这段语句中有什么错误？" class="headerlink" title="6、在 &lt;img src=&quot;logo.png&quot;&gt; 这段语句中有什么错误？"></a>6、在 <code>&lt;img src=&quot;logo.png&quot;&gt; </code>这段语句中有什么错误？</h3><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;logo.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;img&gt;</code>标签留意。W3C XHTML1.0 标准中规定，在<code>&lt;img&gt;</code>标签中，必须包括 <strong>alt</strong> 元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;hong的图片&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="7、在-lt-script-language-quot-JavaScript-quot-gt-这段语句中有什么错误？"><a href="#7、在-lt-script-language-quot-JavaScript-quot-gt-这段语句中有什么错误？" class="headerlink" title="7、在&lt;script language=&quot;JavaScript&quot;&gt; 这段语句中有什么错误？"></a>7、在<code>&lt;script language=&quot;JavaScript&quot;&gt;</code> 这段语句中有什么错误？</h3><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;JavaScript&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;script&gt;</code>标签留意: W3C XHTML1.0 标准中规定，在<code>&lt;script&gt;</code>标签中，必须包括type元素。</li><li>同时建议要闭合</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;JavaScript&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="8、在-lt-div-gt-lt-h1-gt-My-name-is-努力学习的汪-lt-div-gt-lt-h1-gt-这段语句中有什么错误？"><a href="#8、在-lt-div-gt-lt-h1-gt-My-name-is-努力学习的汪-lt-div-gt-lt-h1-gt-这段语句中有什么错误？" class="headerlink" title="8、在&lt;div&gt;&lt;h1&gt;My name is 努力学习的汪!&lt;/div&gt;&lt;/h1&gt; 这段语句中有什么错误？"></a>8、在<code>&lt;div&gt;&lt;h1&gt;My name is 努力学习的汪!&lt;/div&gt;&lt;/h1&gt; </code>这段语句中有什么错误？</h3><blockquote><p>留意标签开始结束顺序对应嵌套关系,不要乱了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My name is 努力学习的汪!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="9、其他"><a href="#9、其他" class="headerlink" title="9、其他"></a>9、其他</h3><blockquote><ul><li>留意特殊套装:比如：<code>&lt;dl&gt;&lt;dd&gt;&lt;ul&gt;&lt;li&gt;</code>等一些特殊标签，套装顺序中缺一不可。必须按照顺序将<code>&lt;dl&gt;&lt;dd&gt;&lt;ul&gt;&lt;li&gt;</code>四个标签写完全。类似的还有许多。</li><li>留意未打开标签。所谓未打开来自于W3C检测，这类错误显示的错误是 is not open，翻译过来也就是未打开的意思。如果按照中文的意思来理解就是有首无尾或者有尾无首。通常这种错误出现的缘由都是由于有一段代码在修正的时候被删除，而没有顾及到绝对较远的结束或者开始标签。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端代码规范 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ajax学习笔记</title>
      <link href="/2022/10/13/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/13/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Ajax简介"><a href="#一、Ajax简介" class="headerlink" title="一、Ajax简介"></a>一、Ajax简介</h1><blockquote><p>AJAX 简介 AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。</p><p>通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：<code>无刷新获取数据</code>。</p><p>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p></blockquote><h2 id="1、XML简介"><a href="#1、XML简介" class="headerlink" title="1、XML简介"></a>1、XML简介</h2><blockquote><ol><li><p>XML 可扩展标记语言。</p></li><li><p>XML 被设计用来传输和存储数据。 </p></li><li><p>XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签， 全都是自定义标签，用来表示一些数据。</p></li></ol></blockquote><blockquote><p>比如说我有一个学生数据：<br>name = “孙悟空” ; age = 18 ; gender = “男” ;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用 XML 表示：</span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在已经被 JSON 取代了。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;孙悟空&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;男&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2、Ajax的特点"><a href="#2、Ajax的特点" class="headerlink" title="2、Ajax的特点"></a>2、Ajax的特点</h2><h3 id="Ⅰ-AJAX-的优点"><a href="#Ⅰ-AJAX-的优点" class="headerlink" title="Ⅰ-AJAX 的优点"></a>Ⅰ-AJAX 的优点</h3><blockquote><ol><li><p>可以无需刷新页面而与服务器端进行通信。 </p></li><li><p>允许你根据用户事件来更新部分页面内容。</p></li></ol></blockquote><h3 id="Ⅱ-Ajax的缺点"><a href="#Ⅱ-Ajax的缺点" class="headerlink" title="Ⅱ-Ajax的缺点"></a>Ⅱ-Ajax的缺点</h3><blockquote><ol><li><p>没有浏览历史，不能回退</p></li><li><p>存在跨域问题(同源)</p></li><li><p>SEO 不友好</p></li></ol></blockquote><h2 id="3、HTTP简介"><a href="#3、HTTP简介" class="headerlink" title="3、HTTP简介"></a>3、HTTP简介</h2><blockquote><p>HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则、约定,、规则</p></blockquote><h3 id="Ⅰ-请求报文"><a href="#Ⅰ-请求报文" class="headerlink" title="Ⅰ-请求报文"></a>Ⅰ-请求报文</h3><blockquote><p><code>重点是格式与参数</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;行   <span class="variable constant_">POST</span> /s?ie=utf-<span class="number">8</span> <span class="variable constant_">HTTP</span>/<span class="number">1.1</span> </span><br><span class="line"></span><br><span class="line">&gt;头   <span class="title class_">Host</span>: atguigu.<span class="property">com</span></span><br><span class="line">&gt;​    <span class="title class_">Cookie</span>: name=guigu</span><br><span class="line">&gt;​    <span class="title class_">Content</span>-<span class="attr">type</span>: application/x-www-form-urlencoded</span><br><span class="line">&gt;​    <span class="title class_">User</span>-<span class="title class_">Agent</span>: chrome <span class="number">83</span></span><br><span class="line">&gt;空行</span><br><span class="line">&gt;体   username=admin&amp;password=admin</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅱ-响应报文"><a href="#Ⅱ-响应报文" class="headerlink" title="Ⅱ-响应报文"></a>Ⅱ-响应报文</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;行   <span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">200</span>（状态码） <span class="variable constant_">OK</span></span><br><span class="line"></span><br><span class="line">&gt;头   <span class="title class_">Content</span>-<span class="title class_">Type</span>: text/html;charset=utf-<span class="number">8</span></span><br><span class="line">&gt;​    <span class="title class_">Content</span>-<span class="attr">length</span>: <span class="number">2048</span></span><br><span class="line">&gt;​    <span class="title class_">Content</span>-<span class="attr">encoding</span>: gzip</span><br><span class="line">&gt;空行  </span><br><span class="line">&gt;体   &lt;html&gt;</span><br><span class="line">&gt;​      &lt;head&gt;</span><br><span class="line">&gt;​      &lt;/head&gt;</span><br><span class="line">&gt;​      &lt;body&gt;</span><br><span class="line">&gt;​        &lt;h1&gt;尚硅谷&lt;/h1&gt;</span><br><span class="line">&gt;​      &lt;/body&gt;</span><br><span class="line">&gt;​    &lt;/html&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅲ-Chrome网络控制台查看通信报文"><a href="#Ⅲ-Chrome网络控制台查看通信报文" class="headerlink" title="Ⅲ-Chrome网络控制台查看通信报文"></a>Ⅲ-Chrome网络控制台查看通信报文</h3><blockquote><p>1、Network  –&gt; Hearders  请求头</p><p>2、Network  –&gt; Response 响应体:通常返回的是html</p></blockquote><h1 id="二、原生Ajax"><a href="#二、原生Ajax" class="headerlink" title="二、原生Ajax"></a>二、原生Ajax</h1><blockquote><p>1、XMLHttpRequest，AJAX 的所有操作都是通过该对象进行的。</p><p>2、当你前端想设置自定义的请求头时,需要如此后端设置响应头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示接收任意类型的请求</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123; <span class="comment">//响应头 允许跨域     运行自定义响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>); response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure></blockquote><p>//引入express<br>const { response } = require(‘express’);<br>const express = require(‘express’);<br>//创建应用对象<br>const app = express();<br>// 创建路由规则<br>//request 请求报文<br>//response响应报文<br>app.get(‘/‘, (require, response) =&gt; {<br>    //  设置响应<br>    response.send(‘Hello Express’);</p><p>});<br>// 监听端口<br>app.listen(8000, () =&gt; {<br>    console.log(“服务启动，监听中8080端口”);<br>})</p><blockquote><p>3、<code>ajax请求状态</code>:xhr.readyState<br>    0：请求未初始化，还没有调用 open()。</p><p>​    1：请求已经建立，但是还没有发送，还没有调用 send()。</p><p>​    2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</p><p>​    3：请求在处理中；通常响应中已有部分数据可用了，没有全部完成。</p><p>​    4：响应已完成；您可以获取并使用服务器的响应了</p></blockquote><h3 id="〇-Ajax的使用"><a href="#〇-Ajax的使用" class="headerlink" title="〇-Ajax的使用"></a>〇-Ajax的使用</h3><blockquote><p>使用步骤:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="number">1</span>) 创建 <span class="title class_">XMLHttpRequest</span> 对象</span><br><span class="line">&gt;<span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&gt;<span class="number">2</span>) 设置请求信息</span><br><span class="line">&gt;xhr.<span class="title function_">open</span>(method, url);</span><br><span class="line">&gt;<span class="comment">//可以设置请求头，一般不设置</span></span><br><span class="line">&gt;xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">&gt;<span class="number">3</span>) 发送请求</span><br><span class="line">&gt;xhr.<span class="title function_">send</span>(body) <span class="comment">//get 请求不传 body 参数，只有 post 请求使用</span></span><br><span class="line">&gt;<span class="number">4</span>) 接收响应</span><br><span class="line">&gt;<span class="comment">//xhr.responseXML 接收 xml 格式的响应数据</span></span><br><span class="line">&gt;<span class="comment">//xhr.responseText 接收文本格式的响应数据</span></span><br><span class="line">&gt;xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">&gt;<span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">&gt;<span class="keyword">var</span> text = xhr.<span class="property">responseText</span>;</span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&gt;&#125;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅰ-Get方式"><a href="#Ⅰ-Get方式" class="headerlink" title="Ⅰ-Get方式"></a>Ⅰ-Get方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//1. 创建对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  <span class="comment">//2. 初始化 设置请求方法和 url</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:3000/server?a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br><span class="line">  <span class="comment">//3. 发送</span></span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line">  <span class="comment">//4. 事件绑定 处理服务端返回的结果</span></span><br><span class="line">  <span class="comment">// on  when 当....时候</span></span><br><span class="line">  <span class="comment">// readystate 是 xhr 对象中的属性, 表示状态 0(未初始化) 1（open方法调用完毕） 2（send方法调用完毕） 3（服务端返回部分结果） 4（服务端返回所有结果）</span></span><br><span class="line">  <span class="comment">// change  改变时触发</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//判断 (服务端返回了所有的结果)</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="comment">//判断响应状态码 200  404  403 401 500</span></span><br><span class="line">      <span class="comment">// 2xx 成功</span></span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">//处理结果  行 头 空行 体</span></span><br><span class="line">        <span class="comment">//响应 </span></span><br><span class="line">        <span class="comment">// console.log(xhr.status);//状态码</span></span><br><span class="line">        <span class="comment">// console.log(xhr.statusText);//状态字符串</span></span><br><span class="line">        <span class="comment">// console.log(xhr.getAllResponseHeaders());//所有响应头</span></span><br><span class="line">        <span class="comment">// console.log(xhr.response);//响应体</span></span><br><span class="line">        <span class="comment">//设置 result 的文本</span></span><br><span class="line">        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ⅱ-Post方式"><a href="#Ⅱ-Post方式" class="headerlink" title="Ⅱ-Post方式"></a>Ⅱ-Post方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">   result.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseover&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="comment">//1. 创建对象</span></span><br><span class="line">       <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">       <span class="comment">//2. 初始化 设置类型与 URL</span></span><br><span class="line">       xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span><br><span class="line">       <span class="comment">//设置请求头</span></span><br><span class="line">       xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">       xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;atguigu&#x27;</span>);</span><br><span class="line">       <span class="comment">//3. 发送</span></span><br><span class="line">       xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br><span class="line">       <span class="comment">// xhr.send(&#x27;a:100&amp;b:200&amp;c:300&#x27;);</span></span><br><span class="line">       <span class="comment">// xhr.send(&#x27;1233211234567&#x27;);</span></span><br><span class="line">       <span class="comment">//4. 事件绑定</span></span><br><span class="line">       xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="comment">//判断</span></span><br><span class="line">           <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                   <span class="comment">//处理服务端返回的结果</span></span><br><span class="line">                   result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h3 id="Ⅲ-解决ie缓存问题"><a href="#Ⅲ-解决ie缓存问题" class="headerlink" title="Ⅲ-解决ie缓存问题"></a>Ⅲ-解决ie缓存问题</h3><blockquote><p>问题：在一些浏览器中(IE),由于<code>缓存机制</code>的存在，ajax 只会发送的第一次请求，剩余多次请求不会再发送给浏览器而是直接加载缓存中的数据。</p><p>解决方式：浏览器的缓存是根据 url地址来记录的，所以我们只需要修改 url 地址 即可避免缓存问题 <code>xhr.open(&quot;get&quot;,&quot;/testAJAX?t=&quot;+Date.now());</code></p></blockquote><h3 id="Ⅳ-请求超时与网络异常"><a href="#Ⅳ-请求超时与网络异常" class="headerlink" title="Ⅳ-请求超时与网络异常"></a>Ⅳ-请求超时与网络异常</h3><blockquote><p>当你的请求时间过长,或者无网络时,进行的相应处理</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">         <span class="comment">//超时设置 2s 设置</span></span><br><span class="line">         xhr.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line">         <span class="comment">//超时回调</span></span><br><span class="line">         xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="title function_">alert</span>(<span class="string">&quot;网络异常, 请稍后重试!!&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//网络异常回调</span></span><br><span class="line">         xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="title function_">alert</span>(<span class="string">&quot;你的网络似乎出了一些问题!&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">         xhr.<span class="title function_">send</span>();</span><br><span class="line">         xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt; <span class="number">300</span>)&#123;</span><br><span class="line">                     result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><h3 id="Ⅴ-取消请求"><a href="#Ⅴ-取消请求" class="headerlink" title="Ⅴ-取消请求"></a>Ⅴ-取消请求</h3><blockquote><p>在请求发出去后<code>但是未响应完成</code>时可以进行取消请求操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">null</span>;</span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">    x.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abort</span></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    x.<span class="title function_">abort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ⅵ-重复请求问题"><a href="#Ⅵ-重复请求问题" class="headerlink" title="Ⅵ-重复请求问题"></a>Ⅵ-重复请求问题</h3><blockquote><p>利用之前Ⅴ中取消请求知识点,当我点击时判断之前请求是否在发送中,如果是,则停止请求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="comment">//判断标识变量</span></span><br><span class="line">         <span class="keyword">if</span>(isSending) x.<span class="title function_">abort</span>();<span class="comment">// 如果正在发送, 则取消该请求, 创建一个新的请求</span></span><br><span class="line">         x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">         <span class="comment">//修改 标识变量的值</span></span><br><span class="line">         isSending = <span class="literal">true</span>;</span><br><span class="line">         x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">         x.<span class="title function_">send</span>();</span><br><span class="line">         x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="keyword">if</span>(x.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                 <span class="comment">//修改标识变量</span></span><br><span class="line">                 isSending = <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h1 id="三、常见三种Ajax请求方式"><a href="#三、常见三种Ajax请求方式" class="headerlink" title="三、常见三种Ajax请求方式"></a>三、常见三种Ajax请求方式</h1><h2 id="1、jQuery发送AJAX请求"><a href="#1、jQuery发送AJAX请求" class="headerlink" title="1、jQuery发送AJAX请求"></a>1、jQuery发送AJAX请求</h2><blockquote><p>jQuery有三种发送请求方法:</p><p>当你只是简单的请求数据,可以直接使用前两种方式请求,当你需要设置的东西较多的时候,可以使用<code>$.ajax()</code>方法</p></blockquote><h3 id="Ⅰ-get"><a href="#Ⅰ-get" class="headerlink" title="Ⅰ-$.get()"></a>Ⅰ-$.get()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          $.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">          &#125;,<span class="string">&#x27;json&#x27;</span>);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h3 id="Ⅱ-post"><a href="#Ⅱ-post" class="headerlink" title="Ⅱ-$.post()"></a>Ⅱ-$.post()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          $.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h3 id="Ⅲ-ajax"><a href="#Ⅲ-ajax" class="headerlink" title="Ⅲ-$.ajax"></a>Ⅲ-$.ajax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">             <span class="comment">//url</span></span><br><span class="line">             <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,</span><br><span class="line">             <span class="comment">//参数</span></span><br><span class="line">             <span class="attr">data</span>: &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line">             <span class="comment">//请求类型</span></span><br><span class="line">             <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">             <span class="comment">//响应体结果</span></span><br><span class="line">             <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">             <span class="comment">//成功的回调</span></span><br><span class="line">             <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="comment">//超时时间</span></span><br><span class="line">             <span class="attr">timeout</span>: <span class="number">2000</span>,</span><br><span class="line">             <span class="comment">//失败的回调</span></span><br><span class="line">             <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错啦!!&#x27;</span>);</span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="comment">//头信息</span></span><br><span class="line">             <span class="attr">headers</span>: &#123;</span><br><span class="line">                 <span class="attr">c</span>:<span class="number">300</span>,</span><br><span class="line">                 <span class="attr">d</span>:<span class="number">400</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><h2 id="2、Axios发送AJAX请求"><a href="#2、Axios发送AJAX请求" class="headerlink" title="2、Axios发送AJAX请求"></a>2、Axios发送AJAX请求</h2><h3 id="Ⅰ-axios-get"><a href="#Ⅰ-axios-get" class="headerlink" title="Ⅰ-axios.get()"></a>Ⅰ-axios.get()</h3><blockquote><p>axios.get(url,data,params)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置 baseURL</span></span><br><span class="line">  axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//GET 请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">//url 参数</span></span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">vip</span>: <span class="number">7</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//请求头信息</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Ⅱ-axios-get"><a href="#Ⅱ-axios-get" class="headerlink" title="Ⅱ-axios.get()"></a>Ⅱ-axios.get()</h3><blockquote><p>axios.post(url,data,params)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//配置 baseURL</span></span><br><span class="line">   axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>;  </span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     axios.<span class="title function_">post</span>(<span class="string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="line">       <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">       <span class="attr">password</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">     &#125;, &#123;</span><br><span class="line">       <span class="comment">//url </span></span><br><span class="line">       <span class="attr">params</span>: &#123;</span><br><span class="line">         <span class="attr">id</span>: <span class="number">200</span>,</span><br><span class="line">         <span class="attr">vip</span>: <span class="number">9</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">//请求头参数</span></span><br><span class="line">       <span class="attr">headers</span>: &#123;</span><br><span class="line">         <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">         <span class="attr">weight</span>: <span class="number">180</span>,</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Ⅲ-axios-常用"><a href="#Ⅲ-axios-常用" class="headerlink" title="Ⅲ-axios() 常用"></a>Ⅲ-axios() <code>常用</code></h3><blockquote><p>axios({})</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//配置 baseURL</span></span><br><span class="line">   axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>;</span><br><span class="line">btns[<span class="number">2</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="title function_">axios</span>(&#123;</span><br><span class="line">       <span class="comment">//请求方法</span></span><br><span class="line">       <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">       <span class="comment">//url</span></span><br><span class="line">       <span class="attr">url</span>: <span class="string">&#x27;/axios-server&#x27;</span>,</span><br><span class="line">       <span class="comment">//url参数</span></span><br><span class="line">       <span class="attr">params</span>: &#123;</span><br><span class="line">         <span class="attr">vip</span>: <span class="number">10</span>,</span><br><span class="line">         <span class="attr">level</span>: <span class="number">30</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">//头信息,此部分如果使用自定义的头信息,需要服务端进行相应修改,正常不设置</span></span><br><span class="line">       <span class="attr">headers</span>: &#123;</span><br><span class="line">         <span class="attr">a</span>: <span class="number">100</span>,</span><br><span class="line">         <span class="attr">b</span>: <span class="number">200</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">//请求体参数</span></span><br><span class="line">       <span class="attr">data</span>: &#123;</span><br><span class="line">         <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">         <span class="attr">password</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">//响应状态码</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">       <span class="comment">//响应状态字符串</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">       <span class="comment">//响应头信息</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">       <span class="comment">//响应体</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="3、Fetch发送AJAX请求"><a href="#3、Fetch发送AJAX请求" class="headerlink" title="3、Fetch发送AJAX请求"></a>3、Fetch发送AJAX请求</h2><blockquote><p>代码示例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8000/fetch-server?vip=10&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">//请求方法</span></span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="comment">//请求头</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//请求体</span></span><br><span class="line">      <span class="attr">body</span>: <span class="string">&#x27;username=admin&amp;password=admin&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// return response.text();</span></span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="四、跨域与解决"><a href="#四、跨域与解决" class="headerlink" title="四、跨域与解决"></a>四、跨域与解决</h1><blockquote><h5 id="1、什么是跨越？"><a href="#1、什么是跨越？" class="headerlink" title="1、什么是跨越？"></a>1、什么是跨越？</h5><ul><li>一个网页向另一个不同域名/不同协议/不同端口的网页请求资源，这就是跨域。</li><li>跨域原因产生：在当前域名请求网站中，默认不允许通过ajax请求发送其他域名。</li></ul><h5 id="2、为什么会产生跨域请求？"><a href="#2、为什么会产生跨域请求？" class="headerlink" title="2、为什么会产生跨域请求？"></a>2、为什么会产生跨域请求？</h5><ul><li>因为浏览器使用了同源策略</li></ul><h5 id="3、什么是同源策略？"><a href="#3、什么是同源策略？" class="headerlink" title="3、什么是同源策略？"></a>3、什么是同源策略？</h5><ul><li>同源策略是Netscape提出的一个著名的安全策略，现在所有支持JavaScript的浏览器都会使用这个策略。同源策略是浏览器最核心也最基本的安全功能，如果缺少同源策略，浏览器的正常功能可能受到影响。可以说web是构建在同源策略的基础之上的，浏览器只是针对同源策略的一种实现。</li><li>同源： 协议、域名、端口号 必须完全相同。 <code>违背同源策略就是跨域</code>。</li></ul><h5 id="4、为什么浏览器要使用同源策略？"><a href="#4、为什么浏览器要使用同源策略？" class="headerlink" title="4、为什么浏览器要使用同源策略？"></a>4、为什么浏览器要使用同源策略？</h5><ul><li>是为了保证用户的信息安全，防止恶意网站窃取数据，如果网页之间不满足同源要求，将不能:</li><li><ul><li>1、共享Cookie、LocalStorage、IndexDB</li></ul></li><li><ul><li>2、获取DOM</li></ul></li><li><ul><li>3、AJAX请求不能发送</li></ul></li></ul><h5 id="5、跨域的五个解决方式"><a href="#5、跨域的五个解决方式" class="headerlink" title="5、跨域的五个解决方式:"></a>5、跨域的五个解决方式:</h5><p>​    1、前端使用jsonp （不推荐使用）</p><p>​    2、后台Http请求转发</p><p>​    3、后台配置同源Cors （推荐）</p><p>​    4、使用SpringCloud网关</p><p>​    5、使用nginx做转发 (推荐)</p><p>本课程提到了其中的两种:</p></blockquote><h2 id="1、jsonP"><a href="#1、jsonP" class="headerlink" title="1、jsonP"></a>1、jsonP</h2><blockquote><p>1)JSONP 是什么?</p><p>​    JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明 才智开发出来，只支持 get 请求。</p><p>2)JSONP 怎么工作的？</p><p>​    在网页有一些标签天生具有跨域能力，比如：img link iframe script。 JSONP 就是利用 script 标签的跨域能力来发送请求的。</p></blockquote><h3 id="Ⅰ-jsonP的使用"><a href="#Ⅰ-jsonP的使用" class="headerlink" title="Ⅰ-jsonP的使用"></a>Ⅰ-jsonP的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 1. 动态的创建一个 script 标签------------------------------------------------------------</span></span><br><span class="line">   <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line"><span class="comment">//2. 设置 script 的 src， 设置回调函数</span></span><br><span class="line">   script.<span class="property">src</span> = <span class="string">&quot;http://localhost:3000/testAJAX?callback=abc&quot;</span>;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params">data</span>) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(data.<span class="property">name</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">  <span class="comment">// 3. 将 script 添加到 body 中</span></span><br><span class="line">   <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 服务器中路由的处理------------------------------------------------------</span></span><br><span class="line">   router.<span class="title function_">get</span>(<span class="string">&quot;/testAJAX&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到请求&quot;</span>);</span><br><span class="line">     <span class="keyword">var</span> callback = req.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line">     <span class="keyword">var</span> obj = &#123;</span><br><span class="line">       <span class="attr">ame</span>: <span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">       <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">     &#125;</span><br><span class="line">     res.<span class="title function_">send</span>(callback + <span class="string">&quot;(&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h3 id="Ⅱ-jQuery发送jsonP请求"><a href="#Ⅱ-jQuery发送jsonP请求" class="headerlink" title="Ⅱ-jQuery发送jsonP请求"></a>Ⅱ-jQuery发送jsonP请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端代码-----------------------------------------------------------------------------------</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $.<span class="title function_">getJSON</span>(<span class="string">&#x27;http://127.0.0.1:8000/jquery-jsonp-server?callback=?&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#result&#x27;</span>).<span class="title function_">html</span>(<span class="string">`</span></span><br><span class="line"><span class="string">                名称: <span class="subst">$&#123;data.name&#125;</span>&lt;br&gt;</span></span><br><span class="line"><span class="string">                校区: <span class="subst">$&#123;data.city&#125;</span></span></span><br><span class="line"><span class="string">            `</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端代码-----------------------------------------------------------</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jquery-jsonp-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>: [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//将数据转化为字符串</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  <span class="comment">//接收 callback 参数</span></span><br><span class="line">  <span class="keyword">let</span> cb = request.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回结果</span></span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Ⅲ-我自己开发封装的jsonP插件"><a href="#Ⅲ-我自己开发封装的jsonP插件" class="headerlink" title="Ⅲ-我自己开发封装的jsonP插件"></a>Ⅲ-我自己开发封装的jsonP插件</h3><blockquote><p>1、代价:需要前后端联动<br>2、精髓:自动的由插件生成方法名,并在当前的页面动态的生成函数,然后再生成的函数里头调用用户预留的回调函数<br>3、插件：自动化的去模拟基于script去实现跨域请求的过程（对用户来说是黑盒子）<br>4、参数拼接：url已经是带参的。和不带参的<br>5、id优化 额可以添加一个容器来管理id</p></blockquote><blockquote><p>1、前端调用测试封装好的jsonP代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试调用函数</span></span><br><span class="line">    <span class="keyword">let</span> test=<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        jsonP.<span class="title function_">req</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&quot;http://localhost:3000/jsonpx&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>:&#123;</span><br><span class="line">                <span class="attr">a</span>:<span class="string">&quot;111&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">callback</span>:<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;成功&quot;</span>+result)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、服务端测试代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/jsonpx&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, resp, next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> callback=req.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line">    <span class="keyword">let</span> data=req.<span class="property">query</span>.<span class="property">a</span>;</span><br><span class="line">    <span class="keyword">if</span> (!data)&#123;</span><br><span class="line">        resp.<span class="title function_">send</span>(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(&#x27;洪jl:我是服务端代码&#x27;)`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    resp.<span class="title function_">send</span>(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(&#x27;洪jl:我是服务端代码`</span>+data+<span class="string">`&#x27;)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>3、封装原生代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/**author:<span class="doctag">@hongjilin</span></span></span><br><span class="line"><span class="comment">     * 1.声明一个jsonP插件对象</span></span><br><span class="line"><span class="comment">     * 作用：隔开作用域</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">let</span> jsonP = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *2.在插件对象中创建两个名字备用符数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jsonP.<span class="property">char</span> = &#123;</span><br><span class="line">        <span class="title class_">Number</span>: <span class="string">&#x27;0123456789&#x27;</span>,</span><br><span class="line">        <span class="title class_">Letter</span>: <span class="string">&#x27;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过随机数抽取备用字符数组库拼凑函数id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">charLen</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">numLen</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jsonP.<span class="property">newFunId</span> = <span class="keyword">function</span> (<span class="params">charLen, numLen</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> id = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; charLen; i++) &#123;</span><br><span class="line">            id += <span class="variable language_">this</span>.<span class="property">char</span>.<span class="property">Letter</span>.<span class="title function_">charAt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">52</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; numLen; j++) &#123;</span><br><span class="line">            id += <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">url</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">key</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">value</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jsonP.<span class="property">jointUrl</span> = <span class="keyword">function</span> (<span class="params">url, key, value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url &amp;&amp; key &amp;&amp; value) &#123;</span><br><span class="line">            <span class="keyword">let</span> sign = <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">            <span class="comment">//如果是第一次</span></span><br><span class="line">            <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                sign = <span class="string">&#x27;?&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            url += sign + key + <span class="string">&quot;=&quot;</span> + value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     封装err属性方便</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jsonP.<span class="property">err</span> = <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送请求函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> <span class="variable">options</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jsonP.<span class="property">req</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> jsonId=&#123;&#125;;</span><br><span class="line">        <span class="comment">//1.生成方法名</span></span><br><span class="line">        jsonId.<span class="property">funId</span> = <span class="variable language_">this</span>.<span class="title function_">newFunId</span>(<span class="number">4</span>,<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Userurl</span> = options.<span class="property">url</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Userdata</span> = options.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">if</span> (!options) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">err</span>(<span class="string">&quot;输入不能空&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="title class_">Userurl</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">err</span>(<span class="string">&quot;url不能空&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="title class_">Userdata</span>) &#123;</span><br><span class="line">            <span class="comment">//如果没有data,初始化</span></span><br><span class="line">            <span class="title class_">Userdata</span> = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将函数名赋值给userdata的回调函数属性中</span></span><br><span class="line">        <span class="title class_">Userdata</span>.<span class="property">callback</span> = jsonId.<span class="property">funId</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="title class_">Userdata</span>) &#123;</span><br><span class="line">            <span class="title class_">Userurl</span> = <span class="variable language_">this</span>.<span class="title function_">jointUrl</span>(<span class="title class_">Userurl</span>, key, <span class="title class_">Userdata</span>[key])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">        script.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span> , jsonId.<span class="property">funId</span>);</span><br><span class="line">        script.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span> , <span class="title class_">Userurl</span>);</span><br><span class="line">        <span class="comment">//动态生成函数</span></span><br><span class="line">        <span class="keyword">let</span> callback=<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;xxxxxxx&quot;</span>)</span><br><span class="line">            <span class="comment">//业务逻辑回调</span></span><br><span class="line">            <span class="keyword">if</span> (options.<span class="property">callback</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    options.<span class="title function_">callback</span>(result)</span><br><span class="line">                &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">err</span>(e.<span class="property">message</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//善后</span></span><br><span class="line">            <span class="keyword">let</span> tmp=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(jsonId.<span class="property">funId</span>)</span><br><span class="line">            tmp.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(tmp);</span><br><span class="line">            <span class="built_in">eval</span>(jsonId.<span class="property">funId</span>+<span class="string">&#x27;=null&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">&quot;window.&quot;</span>+jsonId.<span class="property">funId</span>+<span class="string">&quot;=function(result)&#123; callback(result) &#125;&quot;</span>)</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2、CORS"><a href="#2、CORS" class="headerlink" title="2、CORS"></a>2、CORS</h2><blockquote><p>1、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">CORS文档链接</a></p><p>2、CORS是什么?</p><p>​    CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方 案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 请求。跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些 源站通过浏览器有权限访问哪些资源</p><p>3、CORS是怎么工作的?</p><p>​    CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应 以后就会对响应放行。</p></blockquote><h3 id="Ⅰ-代码示例"><a href="#Ⅰ-代码示例" class="headerlink" title="Ⅰ-代码示例"></a>Ⅰ-代码示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/cors-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头</span></span><br><span class="line">    <span class="comment">//响应首部中可以携带一个 Access-Control-Allow-Origin 字段</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="comment">//Access-Control-Allow-Headers 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//Access-Control-Allow-Methods 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello CORS&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Ⅱ-HTTP-响应首部字段"><a href="#Ⅱ-HTTP-响应首部字段" class="headerlink" title="Ⅱ-HTTP 响应首部字段"></a>Ⅱ-<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#http_%E5%93%8D%E5%BA%94%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5">HTTP 响应首部字段</a></h3><blockquote><p>本节列出了规范所定义的响应首部字段。上一小节中，我们已经看到了这些首部字段在实际场景中是如何工作的。</p></blockquote><h4 id="1、Access-Control-Allow-Origin"><a href="#1、Access-Control-Allow-Origin" class="headerlink" title="1、Access-Control-Allow-Origin"></a>1、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#access-control-allow-origin">Access-Control-Allow-Origin</a></h4><blockquote><p>响应首部中可以携带一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"><code>Access-Control-Allow-Origin</code></a> 字段，其语法如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: &lt;origin&gt; | *</span><br></pre></td></tr></table></figure><p>其中，origin 参数的值指定了允许访问该资源的外域 URI。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。</p><p>例如，下面的字段值将允许来自 <a href="http://mozilla.com/">http://mozilla.com</a> 的请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: <span class="attr">http</span>:<span class="comment">//mozilla.com</span></span><br></pre></td></tr></table></figure><p>如果服务端指定了具体的域名而非“*”，那么响应首部中的 Vary 字段的值必须包含 Origin。这将告诉客户端：服务器对不同的源站返回不同的内容。</p></blockquote><h4 id="2、Access-Control-Expose-Headers"><a href="#2、Access-Control-Expose-Headers" class="headerlink" title="2、Access-Control-Expose-Headers"></a>2、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#access-control-expose-headers">Access-Control-Expose-Headers</a></h4><blockquote><p>译者注：在跨源访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Expose-Headers"><code>Access-Control-Expose-Headers</code></a> 头让服务器把允许浏览器访问的头放入白名单，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Expose</span>-<span class="title class_">Headers</span>: X-<span class="title class_">My</span>-<span class="title class_">Custom</span>-<span class="title class_">Header</span>, X-<span class="title class_">Another</span>-<span class="title class_">Custom</span>-<span class="title class_">Header</span></span><br></pre></td></tr></table></figure><p>这样浏览器就能够通过getResponseHeader访问<code>X-My-Custom-Header</code>和 <code>X-Another-Custom-Header</code> 响应头了。</p></blockquote><h4 id="3、Access-Control-Max-Age"><a href="#3、Access-Control-Max-Age" class="headerlink" title="3、Access-Control-Max-Age"></a>3、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#access-control-max-age">Access-Control-Max-Age</a></h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Max-Age"><code>Access-Control-Max-Age</code></a> 头指定了preflight请求的结果能够被缓存多久，请参考本文在前面提到的preflight例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Max</span>-<span class="title class_">Age</span>: &lt;delta-seconds&gt;</span><br></pre></td></tr></table></figure><p><code>delta-seconds</code> 参数表示preflight请求的结果在多少秒内有效。</p></blockquote><h4 id="4、Access-Control-Allow-Credentials"><a href="#4、Access-Control-Allow-Credentials" class="headerlink" title="4、Access-Control-Allow-Credentials"></a>4、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#access-control-allow-credentials">Access-Control-Allow-Credentials</a></h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials"><code>Access-Control-Allow-Credentials</code></a> 头指定了当浏览器的<code>credentials</code>设置为true时是否允许浏览器读取response的内容。当用在对preflight预检测请求的响应中时，它指定了实际的请求是否可以使用<code>credentials</code>。请注意：简单 GET 请求不会被预检；如果对此类请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Credentials</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="5、Access-Control-Allow-Methods"><a href="#5、Access-Control-Allow-Methods" class="headerlink" title="5、Access-Control-Allow-Methods"></a>5、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#access-control-allow-methods">Access-Control-Allow-Methods</a></h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods"><code>Access-Control-Allow-Methods</code></a> 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Methods</span>: &lt;method&gt;[, &lt;method&gt;]*</span><br></pre></td></tr></table></figure></blockquote><h4 id="6、Access-Control-Allow-Headers"><a href="#6、Access-Control-Allow-Headers" class="headerlink" title="6、Access-Control-Allow-Headers"></a>6、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#access-control-allow-headers">Access-Control-Allow-Headers</a></h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Headers"><code>Access-Control-Allow-Headers</code></a> 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Headers</span>: &lt;field-name&gt;[, &lt;field-name&gt;]*</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅲ-HTTP-请求首部字段"><a href="#Ⅲ-HTTP-请求首部字段" class="headerlink" title="Ⅲ-HTTP 请求首部字段"></a>Ⅲ-<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#http_%E8%AF%B7%E6%B1%82%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5">HTTP 请求首部字段</a></h3><blockquote><p>本节列出了可用于发起跨源请求的首部字段。请注意，这些首部字段无须手动设置。 当开发者使用 XMLHttpRequest 对象发起跨源请求时，它们已经被设置就绪。</p></blockquote><h4 id="1、Origin"><a href="#1、Origin" class="headerlink" title="1、Origin"></a>1、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#origin">Origin</a></h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> 首部字段表明预检请求或实际请求的源站。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Origin</span>: &lt;origin&gt;</span><br></pre></td></tr></table></figure><p>origin 参数的值为源站 URI。它不包含任何路径信息，只是服务器名称。</p><p><strong>Note:</strong> 有时候将该字段的值设置为空字符串是有用的，例如，当源站是一个 data URL 时。</p><p>注意，在所有访问控制请求（Access control request）中，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> 首部字段<strong>总是</strong>被发送</p></blockquote><h4 id="2、Access-Control-Request-Method"><a href="#2、Access-Control-Request-Method" class="headerlink" title="2、Access-Control-Request-Method"></a>2、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#access-control-request-method">Access-Control-Request-Method</a></h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method"><code>Access-Control-Request-Method</code></a> 首部字段用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Request</span>-<span class="title class_">Method</span>: &lt;method&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="3、Access-Control-Request-Headers"><a href="#3、Access-Control-Request-Headers" class="headerlink" title="3、Access-Control-Request-Headers"></a>3、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#access-control-request-headers">Access-Control-Request-Headers</a></h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers"><code>Access-Control-Request-Headers</code></a> 首部字段用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Request</span>-<span class="title class_">Headers</span>: &lt;field-name&gt;[, &lt;field-name&gt;]*</span><br></pre></td></tr></table></figure></blockquote><hr><hr><h1 id="五、服务端代码示例"><a href="#五、服务端代码示例" class="headerlink" title="五、服务端代码示例"></a>五、服务端代码示例</h1><blockquote><p>配合以上前端代码的服务端代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO AJAX - 2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以接收任意类型的请求 </span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">//响应头</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO AJAX POST&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON 响应</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/json-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">//响应头</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">//响应一个数据</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//对对象进行字符串转换</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  response.<span class="title function_">send</span>(str);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//针对 IE 缓存</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ie&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO IE - 5&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时响应</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/delay&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;延时响应&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jquery-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// response.send(&#x27;Hello jQuery AJAX&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//axios 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/axios-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// response.send(&#x27;Hello jQuery AJAX&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fetch 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/fetch-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// response.send(&#x27;Hello jQuery AJAX&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jsonp服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jsonp-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;尚硅谷atguigu&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//将数据转化为字符串</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  <span class="comment">//返回结果</span></span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户名检测是否存在</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/check-username&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">exist</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;用户名已经存在&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//将数据转化为字符串</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  <span class="comment">//返回结果</span></span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jquery-jsonp-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>: [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//将数据转化为字符串</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  <span class="comment">//接收 callback 参数</span></span><br><span class="line">  <span class="keyword">let</span> cb = request.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回结果</span></span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/cors-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;hello CORS&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 监听端口启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动, 8000 端口监听中....&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记整合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序笔记</title>
      <link href="/2022/10/13/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/13/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、初识微信小程序"><a href="#一、初识微信小程序" class="headerlink" title="一、初识微信小程序"></a>一、初识微信小程序</h1><h2 id="1、什么是微信小程序"><a href="#1、什么是微信小程序" class="headerlink" title="1、什么是微信小程序"></a>1、什么是微信小程序</h2><h3 id="Ⅰ-小程序历史"><a href="#Ⅰ-小程序历史" class="headerlink" title="Ⅰ-小程序历史"></a>Ⅰ-小程序历史</h3><blockquote><ol><li>2017 年度百度百科十大热词之一 </li><li>微信小程序，简称小程序，英文名 Mini Program，是一种不需要下载安装即可使用的应用 (<code>张小龙对其的定义是无需安装,用完即走,实际上是需要安装的,只不过小程序的体积特别小,下载速度很快,用户感觉不到下载的过程</code> ) </li><li>小程序刚发布的时候要求压缩包的体积不能大于 1M,，否则无法通过，在2017年4月做了改进，由原来的1M提升到2M；</li><li>2017年1月9日0点，万众瞩目的微信第一批小程序正式低调上线。</li></ol></blockquote><h3 id="Ⅱ-小程序的优势"><a href="#Ⅱ-小程序的优势" class="headerlink" title="Ⅱ-小程序的优势"></a>Ⅱ-小程序的优势</h3><blockquote><ol><li>微信有海量⽤⼾，⽽且粘性很⾼，在微信⾥开发产品更容易触达⽤⼾；</li><li>推⼴app 或公众号的成本太⾼。 </li><li>开发适配成本低。</li><li>容易⼩规模试错，然后快速迭代。</li><li>跨平台。</li></ol></blockquote><h2 id="2、小程序准备"><a href="#2、小程序准备" class="headerlink" title="2、小程序准备"></a>2、小程序准备</h2><h3 id="Ⅰ-环境准备"><a href="#Ⅰ-环境准备" class="headerlink" title="Ⅰ-环境准备"></a>Ⅰ-环境准备</h3><blockquote><ol><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">安装微信小程序开发工具</a>,建议安装稳定版进行开发</p></li><li><p>注册小程序账号</p></li><li><p>使用注册的appid进行使用，如果是测试号会限制很多功能</p></li></ol><p>  在官网<a href="https://mp.weixin.qq.com/">登录</a>成功后可以看到下面的界面，然后复制你的APPID,悄悄的保存起来，<code>不要给别⼈看到</code>😄。<img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210420175717770.png" alt="image-20210420175717770"><img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210420175813507.png" alt="image-20210420175813507"></p></blockquote><h3 id="Ⅱ-新建小程序流程"><a href="#Ⅱ-新建小程序流程" class="headerlink" title="Ⅱ-新建小程序流程"></a>Ⅱ-新建小程序流程</h3><blockquote><ol><li><p>打开开发者工具，第一次打开需要扫码登陆</p></li><li><p>新建小程序项目</p></li></ol>  <img src="微信小程序学习笔记中的图片/image-20210420180254814.png" alt="image-20210420180254814" style="zoom: 80%;" /><ol start="3"><li>填写项目信息</li></ol>  <img src="微信小程序学习笔记中的图片/image-20210420180344226.png" alt="image-20210420180344226" style="zoom:80%;" /><ol start="4"><li>新建成功</li></ol></blockquote><h3 id="Ⅲ-微信开发者工具介绍"><a href="#Ⅲ-微信开发者工具介绍" class="headerlink" title="Ⅲ-微信开发者工具介绍"></a>Ⅲ-微信开发者工具介绍</h3><h4 id="1）开发工具界面图解"><a href="#1）开发工具界面图解" class="headerlink" title="1）开发工具界面图解"></a>1）开发工具界面图解</h4><blockquote><p>详细的使⽤，可以查看<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html">官⽹</a>:</p><p><img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E6%B3%A8%E9%87%8A%E5%9B%BE.png" alt="image-20210420181145002"></p></blockquote><h4 id="2）开发工具的一些基本配置"><a href="#2）开发工具的一些基本配置" class="headerlink" title="2）开发工具的一些基本配置"></a>2）开发工具的一些基本配置</h4><blockquote><ol><li>点击<code>工具栏</code>–&gt;<code>详情</code>–&gt;<code>本地设置</code>，除了默认勾选，需要勾选其他的几个如：增强编译、不校验合法域名…</li></ol><p> <img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E8%AF%A6%E6%83%85_%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E6%B3%A8%E8%A7%A3%E5%9B%BE.png" alt="image-20210420183249939"></p><ol start="2"><li><p>常用快捷键<code>keyMap修改</code>设置(本人习惯记录)：</p><ol><li><p><code>ctrl+P</code>：全局搜索</p></li><li><p><code>alt+/</code>or <code>shift+j</code>:代码提示</p><p><img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210421141701374.png" alt="image-20210421141701374"></p></li></ol></li></ol></blockquote><h3 id="Ⅳ-微信小程序名称或者原始id该如何找回？"><a href="#Ⅳ-微信小程序名称或者原始id该如何找回？" class="headerlink" title="Ⅳ-微信小程序名称或者原始id该如何找回？"></a>Ⅳ-微信小程序名称或者原始id该如何找回？</h3><blockquote><p>问题描述：很久没有进行开发了，小程序的名称跟原始id都忘记了，找回需要先填写,如何解决</p><p>解决：首先<a href="https://developers.weixin.qq.com/community/develop/doc/000ea0f82d4f58b41589642b456809"><code>查询自己的原始id</code></a>,在这个网站能查询到自己的原始id，再通过这个原始id进行找回</p></blockquote><hr><h1 id="二、小程序的基本目录结构与文件作用剖析"><a href="#二、小程序的基本目录结构与文件作用剖析" class="headerlink" title="二、小程序的基本目录结构与文件作用剖析"></a>二、小程序的基本目录结构与文件作用剖析</h1><blockquote><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/MINA.html">小程序框架</a>的⽬标是通过尽可能简单、⾼效的⽅式让开发者可以在微信中开发具有原⽣APP体验的服务。 </p><p>⼩程序框架提供了⾃⼰的视图层描述语⾔ <code>WXML 和 WXSS</code> ，以及 JavaScript ，并<code>在视图层与逻辑层间提供了数据传输和事件系统</code>，让开发者能够专注于数据与逻辑。</p></blockquote><h2 id="1、小程序文件结构和传统web对比"><a href="#1、小程序文件结构和传统web对比" class="headerlink" title="1、小程序文件结构和传统web对比"></a>1、小程序文件结构和传统web对比</h2><blockquote><table><thead><tr><th></th><th>传统web</th><th>微信小程序</th></tr></thead><tbody><tr><td>项目骨架、结构</td><td>HTML</td><td>WXML</td></tr><tr><td>页面样式</td><td>CSS</td><td>WXSS</td></tr><tr><td>项目逻辑</td><td>Javascript</td><td>Javascript</td></tr><tr><td>配置</td><td>无</td><td>JSON</td></tr></tbody></table><ol><li><p>通过以上对⽐得出传统web是<code>三层结构</code>。⽽微信⼩程序是<code>四层结构</code>，多了⼀层<code>配置.json</code></p></li><li><p>当这几个文件在同一级目录下且命名相同(后缀不同),可以互相引用却不用导入</p></li></ol></blockquote><h2 id="2、基本的项目目录"><a href="#2、基本的项目目录" class="headerlink" title="2、基本的项目目录"></a>2、基本的项目目录</h2><h3 id="Ⅰ-项目目录解释"><a href="#Ⅰ-项目目录解释" class="headerlink" title="Ⅰ-项目目录解释"></a>Ⅰ-项目目录解释</h3><blockquote><ol><li>项目目录图解:</li></ol> <img src="微信小程序学习笔记中的图片/基本的项目目录图例.png" alt="image-20210420190111436" style="zoom: 67%;" /><ol start="2"><li>以<code>app</code>开头的文件是应用程序级别的文件,更改一处全局生效。而页面<code>pages</code>的配置优先级高于全局配置(<code>就近原则</code>)</li><li>小程序是允许你修改文件目录名的</li></ol></blockquote><h2 id="3、小程序配置文件"><a href="#3、小程序配置文件" class="headerlink" title="3、小程序配置文件"></a>3、小程序配置文件</h2><blockquote><p>⼀个⼩程序应⽤程序会包括最基本的两种配置⽂件。⼀种是全局的app.json 和 ⻚⾯⾃⼰的page.json</p></blockquote><h3 id="Ⅰ-全局配置app-json"><a href="#Ⅰ-全局配置app-json" class="headerlink" title="Ⅰ-全局配置app.json"></a>Ⅰ-<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">全局配置app.json</a></h3><blockquote><ol><li><p><code>app.json</code> 是当前⼩程序的全局配置，包括了⼩程序的所有⻚⾯路径、界⾯表现、⽹络超时时间、底部tab等。普通快速启动项⽬⾥边的 app.json 配置</p></li><li><p>代码</p></li></ol> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;pages/logs/logs&quot;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;light&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WeChat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;black&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>字段的含义</p><p> 1）pages 字段⸺⽤于描述当前⼩程序所有⻚⾯路径，这是为了让微信客⼾端知道当前你的⼩程序⻚⾯定义在哪个⽬录。 </p></li></ol><p>​    <code>默认显示此字段中的第一项</code></p><p>​    2）window 字段⸺定义⼩程序所有⻚⾯的顶部背景颜⾊，⽂字颜⾊定义等。</p><p>​    3）完整的配置信息请参考 app.json配置</p><p>​    4) <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#tabBar">tabBar</a>-底部 <code>tab</code> 栏的表现:<br><img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/tabBar_%E5%BA%95%E9%83%A8tab%E6%A0%8F%E7%9A%84%E8%A1%A8%E7%8E%B0%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="image-20210421102125607"></p><p>更多配置详细请看<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html"><code>app配置文档</code></a></p></blockquote><h3 id="Ⅱ-页面配置page-json"><a href="#Ⅱ-页面配置page-json" class="headerlink" title="Ⅱ-页面配置page.json"></a>Ⅱ-<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html">页面配置page.json</a></h3><blockquote><ol><li><p>这⾥的 <code>page.json</code> 其实⽤来表⽰⻚⾯⽬录下的 page.json 这类和⼩程序⻚⾯相关的配置。 开发者可以独⽴定义每个⻚⾯的⼀些属性，如顶部颜⾊、是否允许下拉刷新等等。 ⻚⾯的配置只能设置 app.json 中部分 window 配置项的内容，⻚⾯中配置项会覆盖 app.json 的 window 中相同的配置项。</p></li><li><p>常用配置属性列举:</p></li></ol><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>导航栏背景颜⾊，如 #000000</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜⾊，仅⽀持 black / white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题⽂字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗⼝的背景⾊</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉<code>loading</code>的样式，仅⽀持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否全局开启下拉刷新。 详⻅ <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onpulldownrefresh">Page.onPullDownRefresh</a></td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>⻚⾯上拉触底事件触发时距⻚⾯底部距离，单位为px。 详⻅ <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onreachbottom">Page.onReachBottom</a></td></tr><tr><td>disableScroll</td><td>Boolean</td><td>false</td><td>设置为 true 则⻚⾯整体不能上下滚动；只在⻚⾯配置中有效，⽆法在 app.json 中设置该项</td></tr></tbody></table></blockquote><h3 id="Ⅲ-sitemap-配置-了解即可"><a href="#Ⅲ-sitemap-配置-了解即可" class="headerlink" title="Ⅲ-sitemap 配置-了解即可"></a>Ⅲ-<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html">sitemap 配置</a>-了解即可</h3><blockquote><p>⼩程序根⽬录下的 <code>sitemap.json</code> ⽂件⽤于配置⼩程序及其⻚⾯是否允许被微信索引。<code>主要服务于搜索</code></p></blockquote><h2 id="4、小程序框架接口"><a href="#4、小程序框架接口" class="headerlink" title="4、小程序框架接口"></a>4、小程序框架接口</h2><h3 id="Ⅰ-App-Object-object"><a href="#Ⅰ-App-Object-object" class="headerlink" title="Ⅰ-App(Object object)"></a>Ⅰ-App(Object object)</h3><blockquote><ol><li><p>注册小程序。接受一个 <code>Object</code> 参数，其指定小程序的生命周期回调等。</p></li><li><p><strong>App() 必须在 <code>app.js</code> 中调用，必须调用且只能调用一次。不然会出现无法预期的后果</strong></p></li><li><p>相应的app()参数在下方的<code>小程序生命周期中有指出</code></p></li></ol></blockquote><h4 id="AppObject-getApp-Object-object"><a href="#AppObject-getApp-Object-object" class="headerlink" title="AppObject getApp(Object object)"></a><strong>AppObject <code>getApp(Object object)</code></strong></h4><blockquote><ol><li><p>获取到小程序全局唯一的 <code>App</code> 实例。</p></li><li><p>代码示例</p></li></ol> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// other.js</span></span><br><span class="line"><span class="keyword">var</span> appInstance = <span class="title function_">getApp</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(appInstance.<span class="property">globalData</span>) <span class="comment">// I am global dat</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">GbaseUrl</span>&#125; =<span class="title function_">getApp</span>()  <span class="comment">//GbaseUrl是自己在app.js定义的全局变量</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Object object</li></ol><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">allowDefault</td><td align="left">boolean</td><td align="left">false</td><td align="left">否</td><td align="left">在 <code>App</code> 未定义时返回默认实现。当App被调用时，默认实现中定义的属性会被覆盖合并到App中。一般用于<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/independent.html">独立分包</a></td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.2.4</a></td></tr></tbody></table><ol start="4"><li>注意</li></ol><ul><li>不要在定义于 <code>App()</code> 内的函数中，或调用 <code>App</code> 前调用 <code>getApp()</code> 。使用 <code>this</code> 就可以拿到 app 实例。</li><li>通过 <code>getApp()</code> 获取实例之后，不要私自调用生命周期函数</li></ul></blockquote><hr><h1 id="三、小程序的基础知识储备"><a href="#三、小程序的基础知识储备" class="headerlink" title="三、小程序的基础知识储备"></a>三、小程序的基础知识储备</h1><blockquote><p>整个小程序学习过程中遇到的 所需基础知识 或 补充知识 将整合至此</p><p>相关知识点本人在<code>一二阶段补缺笔记</code>中有记录,在此便只举例大概,不详细记录</p></blockquote><h2 id="1、Flex-布局"><a href="#1、Flex-布局" class="headerlink" title="1、Flex 布局"></a>1、Flex 布局</h2><h3 id="Ⅰ-基本知识点概念"><a href="#Ⅰ-基本知识点概念" class="headerlink" title="Ⅰ-基本知识点概念"></a>Ⅰ-基本知识点概念</h3><blockquote><ol><li><p>Flex基本概念</p><ol><li><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 </p></li><li><p>任何一个容器都可以指定为 Flex 布局。 </p></li><li><p>display: ‘flex’</p></li></ol></li></ol><p>​    <img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210421111211248.png" alt="image-20210421111211248"></p><p>​    4) 这部分是一阶段基础知识,可看<a href="http://www.runoob.com/w3cnote/flex-grammar.html">文档</a>学习</p><ol start="2"><li>在小程序中,通常使用<code>&lt;view/&gt;</code>代替<code>&lt;div/&gt;</code>作为容器来做布局–&gt;代码示例在<code>第一章的第三小节第三点</code></li></ol></blockquote><h3 id="Ⅱ-解决flex布局中-space-between方法的排版问题"><a href="#Ⅱ-解决flex布局中-space-between方法的排版问题" class="headerlink" title="Ⅱ-解决flex布局中 space-between方法的排版问题"></a>Ⅱ-解决flex布局中 space-between方法的排版问题</h3><blockquote><p>详见下方<code>杂记-初学阶段遇到的问题与解决-问题Ⅷ</code></p></blockquote><h2 id="2、移动端相关知识点"><a href="#2、移动端相关知识点" class="headerlink" title="2、移动端相关知识点"></a>2、移动端相关知识点</h2><blockquote><p>自行补充学习,相关知识点本人在<code>一二阶段补缺笔记</code>中有记录,便不再赘述</p></blockquote><h3 id="Ⅰ-物理像素"><a href="#Ⅰ-物理像素" class="headerlink" title="Ⅰ-物理像素"></a>Ⅰ-物理像素</h3><blockquote><ol><li><p>屏幕的分辨率 </p></li><li><p>设备能控制显示的最小单元，可以把物理像素看成是对应的像素点</p></li></ol></blockquote><h3 id="Ⅱ-设备独立像素-、-css-像素"><a href="#Ⅱ-设备独立像素-、-css-像素" class="headerlink" title="Ⅱ-设备独立像素 、 css 像素"></a>Ⅱ-设备独立像素 、 css 像素</h3><blockquote><p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用并控制的<code>虚拟像素</code>(比如：CSS 像素,只是在 android 机中 CSS 像素就不叫”CSS 像素”了而是叫”设备独立像素”)，然后由相关系统转换为物理像素。 </p></blockquote><h3 id="Ⅲ-dpr比-、DPI-、PPI"><a href="#Ⅲ-dpr比-、DPI-、PPI" class="headerlink" title="Ⅲ-dpr比 、DPI 、PPI"></a>Ⅲ-dpr比 、DPI 、PPI</h3><blockquote><ol><li><p>概念</p><ol><li><p>dpr: 设备像素比，物理像素/设备独立像素 = dpr， 一般以 Iphon6 的 dpr 为准 dpr = 2</p></li><li><p>PPI: 一英寸显示屏上的像素点个数 </p></li><li><p>DPI：最早指的是打印机在单位面积上打印的墨点数，墨点越多越清晰</p></li></ol></li><li><p>不同机型对比表</p></li></ol><p>  <img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210508115100483.png" alt="image-20210508115100483"></p><ol start="3"><li>部分机型图示</li></ol>  <img src="微信小程序学习笔记中的图片/image-20210508115306709.png" alt="image-20210508115306709" style="zoom: 80%;" /></blockquote><h2 id="3、移动端适配方案"><a href="#3、移动端适配方案" class="headerlink" title="3、移动端适配方案"></a>3、移动端适配方案</h2><blockquote><p>相关知识点本人在<code>一二阶段补缺笔记</code>中有记录,想详细查阅可以去看,这是个<code>面试考点</code></p></blockquote><h3 id="Ⅰ-viewport-适配"><a href="#Ⅰ-viewport-适配" class="headerlink" title="Ⅰ-viewport 适配"></a>Ⅰ-viewport 适配</h3><blockquote><ol><li><p>为什么做 <code>viewport</code> 适配 ?</p><p>  a) 手机厂商在生产手机的时候大部分手机默认页面宽度为 980px </p><p>  b) 手机实际视口宽度都要小于 980px，如: iphone6 为 750px</p><p>  c) 开发需求需要将 980 的页面完全显示在手机屏幕上且没有滚动条 </p></li><li><p>代码实现</p></li></ol>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅱ-rem-适配"><a href="#Ⅱ-rem-适配" class="headerlink" title="Ⅱ- rem 适配"></a>Ⅱ- rem 适配</h3><blockquote><ol><li>为什么做 <code>rem</code> 适配?</li></ol><p>  a) 机型太多,不同的机型屏幕大小不一样 </p><p>  b) 需求：一套设计稿的内容在不同的机型上呈现的效果一致,根据屏幕大小不同的变化,页面中的内容也相应变化</p><ol start="2"><li>原生代码实现:</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">remRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> clientWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>; </span><br><span class="line"><span class="comment">// 将屏幕等分 10 份</span></span><br><span class="line"><span class="keyword">let</span> rem = clientWidth / <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = rem + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;12px&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pageshow&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">remRefresh</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 函数防抖</span></span><br><span class="line"><span class="keyword">let</span> timeoutId;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">timeoutId &amp;&amp; <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line"><span class="title function_">remRefresh</span>()</span><br><span class="line">&#125;, <span class="number">300</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>第三方库实现</li></ol><blockquote><p>lib-flexible + px2rem-loader</p></blockquote></blockquote><hr><h1 id="四、视图层详解"><a href="#四、视图层详解" class="headerlink" title="四、视图层详解"></a>四、视图层详解</h1><blockquote><p>框架的视图层由 WXML 与 WXSS 编写，由组件来进行展示。</p><p>将逻辑层的数据反映成视图，同时将视图层的事件发送给逻辑层。</p><p>WXML(WeiXin Markup language) 用于描述页面的结构。</p><p>WXS(WeiXin Script) 是小程序的一套脚本语言，结合 <code>WXML</code>，可以构建出页面的结构。</p><p>WXSS(WeiXin Style Sheet) 用于描述页面的样式。</p><p>组件(Component)是视图的基本组成单元。</p><p>该部分将<code>截取官方文档</code>并加以注解</p></blockquote><h2 id="1、WXSS样式文件详解"><a href="#1、WXSS样式文件详解" class="headerlink" title="1、WXSS样式文件详解"></a>1、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">WXSS</a>样式文件详解</h2><blockquote><ol><li><p>WXSS (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式。</p></li><li><p>WXSS 用来决定 WXML 的组件应该怎么显示。</p></li></ol><p>  为了适应广大的前端开发者，WXSS 具有 CSS 大部分特性。同时为了更适合开发微信小程序，WXSS 对 CSS 进行了扩充以及修改。</p><ol start="3"><li><p>与 CSS 相比，WXSS 扩展的特性有：</p><ol><li>响应式⻓度单位:即尺寸单位 –&gt;<code>rpx</code></li><li>样式导入</li></ol></li><li><p>注意:</p></li></ol><p>  当页面文件在同一级目录下且命名相同(后缀不同),<code>可以互相引用却不用导入</code></p></blockquote><h3 id="Ⅰ-尺寸单位"><a href="#Ⅰ-尺寸单位" class="headerlink" title="Ⅰ-尺寸单位"></a>Ⅰ-尺寸单位</h3><blockquote><ol><li><code>rpx（responsive pixel）</code>: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 <code>iPhone6</code> 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</li></ol><table><thead><tr><th align="left">设备</th><th align="left">rpx换算px (屏幕宽度/750)</th><th align="left">px换算rpx (750/屏幕宽度)</th></tr></thead><tbody><tr><td align="left">iPhone5</td><td align="left">1rpx = 0.42px</td><td align="left">1px = 2.34rpx</td></tr><tr><td align="left">iPhone6</td><td align="left">1rpx = 0.5px</td><td align="left">1px = 2rpx</td></tr><tr><td align="left">iPhone6 Plus</td><td align="left">1rpx = 0.552px</td><td align="left">1px = 1.81rpx</td></tr></tbody></table><ol start="2"><li><p>建议与注意点:</p><ol><li>开发微信小程序时<code>推荐设计师可以用iPhone6作为视觉稿的标准</code>–&gt;即只有在<code>iPhone6</code>标准中才可以<code>一比二换算</code>,更方便</li><li>在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况</li></ol></li></ol></blockquote><h3 id="Ⅱ-样式导⼊"><a href="#Ⅱ-样式导⼊" class="headerlink" title="Ⅱ-样式导⼊"></a>Ⅱ-样式导⼊</h3><blockquote><ol><li>使用<code>@import</code>语句可以导入外联样式表,也可以和less中的导⼊混⽤，<code>@import</code>后跟需要导入的外联样式表的<code>相对路径</code>(只⽀持相对路径)，用<code>;</code>表示语句结束。</li></ol>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** common.wxss **/</span></span><br><span class="line"><span class="selector-class">.small-p</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** app.wxss **/</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;common.wxss&quot;</span>;</span><br><span class="line"><span class="selector-class">.middle-p</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅲ-内联样式"><a href="#Ⅲ-内联样式" class="headerlink" title="Ⅲ-内联样式"></a>Ⅲ-内联样式</h3><blockquote><p>框架组件上支持使用 style、class 属性来控制组件的样式。</p><ol><li><code>style</code>：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度</li></ol>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;color:&#123;&#123;color&#125;&#125;;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>class</code>：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上<code>.</code>，样式类名之间用空格分隔</li></ol>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;normal_view&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="1-单向简单数据绑定"><a href="#1-单向简单数据绑定" class="headerlink" title="1) 单向简单数据绑定"></a>1) 单向简单数据绑定</h4><blockquote><ol><li><p>此处是单向绑定(数据驱动视图),双向绑定出现的场景如(input等)将在下方<code>四-3、双向绑定</code>处记录</p></li><li><p><code>简单绑定</code>:数据绑定使用 Mustache 语法（双大括号）将变量包起来，可以作用于：</p></li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pages.wxml</span></span><br><span class="line">&lt;view&gt; &#123;&#123; message &#125;&#125; &lt;/view&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pages.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello MINA!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>绑定<code>boolean</code>类型(需要在双引号之内)</li></ol><p>  <code>true</code>：boolean 类型的 true，代表真值。<code>false</code>： boolean 类型的 false，代表假值。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;checkbox checked=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt; &lt;/checkbox&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="2-运算"><a href="#2-运算" class="headerlink" title="2) 运算"></a>2) 运算</h4><blockquote><p>可以在 <code>&#123;&#123;&#125;&#125;</code> 内进行简单的运算，支持的有如下几种方式：</p><ol><li>三元运算</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view hidden=<span class="string">&quot;&#123;&#123;flag ? true : false&#125;&#125;&quot;</span>&gt; <span class="title class_">Hidden</span> &lt;/view&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>算数运算</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt; &#123;&#123;a + b&#125;&#125; + &#123;&#123;c&#125;&#125; + d &lt;/view&gt;</span><br><span class="line"><span class="comment">//view中的内容为 `3 + 3 + d`。</span></span><br><span class="line"><span class="comment">//pages.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>逻辑判断</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="attr">wx</span>:<span class="keyword">if</span>=<span class="string">&quot;&#123;&#123;length &gt; 5&#125;&#125;&quot;</span>&gt; &lt;/view&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>字符串运算</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;<span class="string">&quot;hello&quot;</span> + name&#125;&#125;&lt;/view&gt;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;<span class="attr">name</span>: <span class="string">&#x27;MINA&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><ol start="5"><li>数据路径运算</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;object.<span class="property">key</span>&#125;&#125; &#123;&#123;array[<span class="number">0</span>]&#125;&#125;&lt;/view&gt;</span><br><span class="line"><span class="comment">//view中的内容为 hello  MINA</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">object</span>: &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&#x27;Hello &#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">array</span>: [<span class="string">&#x27;MINA&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><h4 id="3-组合"><a href="#3-组合" class="headerlink" title="3) 组合"></a>3) 组合</h4><blockquote><p>也可以在 Mustache 内直接进行组合，构成新的对象或者数组。</p><ol><li>数组 –&gt; 最终组合成数组<code>[0, 1, 2, 3, 4]</code>。</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="attr">wx</span>:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;[zero, 1, 2, 3, 4]&#125;&#125;&quot;</span>&gt; &#123;&#123;item&#125;&#125; &lt;/view&gt;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">zero</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>对象   –&gt;</p><ol><li><p>最终组合成的对象是 <code>&#123;for: 1, bar: 2&#125;</code> </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template is=<span class="string">&quot;objectCombine&quot;</span> data=<span class="string">&quot;&#123;&#123;for: a, bar: b&#125;&#125;&quot;</span>&gt;&lt;/template&gt;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>也可以用扩展运算符 <code>...</code> 来将一个对象展开–&gt;最终组合成的对象是 <code>&#123;a: 1, b: 2, c: 3, d: 4, e: 5&#125;</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template is=<span class="string">&quot;objectCombine&quot;</span> data=<span class="string">&quot;&#123;&#123;...obj1, ...obj2, e: 5&#125;&#125;&quot;</span>&gt;&lt;/template&gt;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">obj1</span>: &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    <span class="attr">obj2</span>: &#123; <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>如果对象的 key 和 value 相同，也可以间接地表达。–&gt;最终组合成的对象是 <code>&#123;foo: &#39;my-foo&#39;, bar:&#39;my-bar&#39;&#125;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template is=<span class="string">&quot;objectCombine&quot;</span> data=<span class="string">&quot;&#123;&#123;foo, bar&#125;&#125;&quot;</span>&gt;&lt;/template&gt;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;my-foo&#x27;</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="string">&#x27;my-bar&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>注意</code>：上述方式可以随意组合，但是如有存在变量名相同的情况，后边的会覆盖前面 –&gt; 最终组合成的对象是 <code>&#123;a: 5, b: 3, c: 6&#125;</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template is=<span class="string">&quot;objectCombine&quot;</span> data=<span class="string">&quot;&#123;&#123;...obj1, ...obj2, a, c: 6&#125;&#125;&quot;</span>&gt;&lt;/template&gt;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">obj1</span>: &#123; <span class="attr">a</span>: <span class="number">1</span>,  <span class="attr">b</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    <span class="attr">obj2</span>: &#123; <span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">4</span>&#125;,</span><br><span class="line">    <span class="attr">a</span>: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>注意</code>： 花括号和引号之间如果有空格，将最终被解析成为字符串</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="attr">wx</span>:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;[1,2,3]&#125;&#125; &quot;</span>&gt;</span><br><span class="line">  &#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">等同于</span><br><span class="line">                      </span><br><span class="line">&lt;view <span class="attr">wx</span>:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;[1,2,3] + &#x27; &#x27;&#125;&#125;&quot;</span>&gt;</span><br><span class="line">  &#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></blockquote><h4 id="4-自定义属性data-的命名与使用"><a href="#4-自定义属性data-的命名与使用" class="headerlink" title="4) 自定义属性data-*的命名与使用"></a>4) 自定义属性<code>data-*</code>的命名与使用</h4><blockquote><ol><li>同一容器中可以存在多个<code>data-*</code></li><li>凡是以<code>data-</code>开头的数据,都会在<code>event的currentTarget</code>中体现,且回缺省<code>data-</code>(data-id  –&gt;  id)</li><li><code>data-*</code>后面接的单词将自动转换 第一个单词首字母小写,第二个及之后的单词首字母大写 (data-post-my-id –&gt; postMyId)</li></ol></blockquote><h3 id="Ⅱ-列表渲染"><a href="#Ⅱ-列表渲染" class="headerlink" title="Ⅱ-列表渲染"></a>Ⅱ-列表渲染</h3><h4 id="1-wx-for"><a href="#1-wx-for" class="headerlink" title="1) wx:for"></a>1) wx:for</h4><blockquote><ol><li><p>在组件上使用 <code>wx:for</code> 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。</p></li><li><p>默认数组的当前项的下标变量名默认为 <code>index</code>，数组当前项的变量名默认为 <code>item</code></p></li><li><p>使用 <code>wx:for-item</code> 可以指定数组当前元素的变量名，使用 <code>wx:for-index</code> 可以指定数组当前下标的变量名：</p></li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="attr">wx</span>:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;array&#125;&#125;&quot;</span> <span class="attr">wx</span>:<span class="keyword">for</span>-index=<span class="string">&quot;idx&quot;</span> <span class="attr">wx</span>:<span class="keyword">for</span>-item=<span class="string">&quot;itemName&quot;</span>&gt;</span><br><span class="line">  &#123;&#123;idx&#125;&#125;: &#123;&#123;itemName.<span class="property">message</span>&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>wx:for</code> 也可以嵌套，下边是一个九九乘法表</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="attr">wx</span>:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#125;&#125;&quot;</span> <span class="attr">wx</span>:<span class="keyword">for</span>-item=<span class="string">&quot;i&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;j&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;i &lt;= j&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;i&#125;&#125; * &#123;&#123;j&#125;&#125; = &#123;&#123;i * j&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="2-block-wx-for"><a href="#2-block-wx-for" class="headerlink" title="2) block wx:for"></a>2) block wx:for</h4><blockquote><p>类似 <code>block wx:if</code>，也可以将 <code>wx:for</code> 用在<code>&lt;block/&gt;</code>标签上，以渲染一个包含多节点的结构块。例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[1, 2, 3]&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;index&#125;&#125;: <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性</p></blockquote><h4 id="3-wx-key"><a href="#3-wx-key" class="headerlink" title="3) wx:key"></a>3) wx:key</h4><blockquote><p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">input</a> 中的输入内容，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/switch.html">switch</a> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p></blockquote><h5 id="①-wx-key-的值以两种形式提供"><a href="#①-wx-key-的值以两种形式提供" class="headerlink" title="① wx:key 的值以两种形式提供"></a>① <code>wx:key</code> 的值以两种形式提供</h5><blockquote><ol><li><p>字符串，代表在for循环的array中<code>item的某个property</code>，该property的值需要是列表中唯一的字符串或数字，且不能动态改变。</p></li><li><p>保留关键字 <code>*this</code> 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个<code>唯一的字符串或者数字</code>。</p></li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;block <span class="attr">wx</span>:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;posts&#125;&#125;&quot;</span>   <span class="attr">wx</span>:key=<span class="string">&quot;id&quot;</span>&gt;&lt;/blocK&gt;</span><br><span class="line"><span class="comment">//id是posts数组中的对象里的一个属性</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="②使用-wx-key-的意义"><a href="#②使用-wx-key-的意义" class="headerlink" title="②使用 wx:key 的意义"></a>②使用 <code>wx:key</code> 的意义</h5><blockquote><p>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件<code>，框架会确保他们被重新排序，而不是重新创建</code>，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</p><p>如不提供 <code>wx:key</code>，会报一个 <code>warning</code>， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。</p></blockquote><h4 id="4-列表渲染注意点"><a href="#4-列表渲染注意点" class="headerlink" title="4) 列表渲染注意点"></a>4) 列表渲染注意点</h4><h5 id="①-当-wx-for-的值为字符串时，会将字符串解析成字符串数组"><a href="#①-当-wx-for-的值为字符串时，会将字符串解析成字符串数组" class="headerlink" title="① 当 wx:for 的值为字符串时，会将字符串解析成字符串数组"></a>① 当 <code>wx:for</code> 的值为字符串时，会将字符串解析成字符串数组</h5><blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&gt;等同于</span><br><span class="line"></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[&#x27;a&#x27;,&#x27;r&#x27;,&#x27;r&#x27;,&#x27;a&#x27;,&#x27;y&#x27;]&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h5 id="②-花括号和引号之间如果有空格，将最终被解析成为字符串"><a href="#②-花括号和引号之间如果有空格，将最终被解析成为字符串" class="headerlink" title="② 花括号和引号之间如果有空格，将最终被解析成为字符串"></a>② 花括号和引号之间如果有空格，将最终被解析成为字符串</h5><blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[1,2,3]&#125;&#125; &quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&gt;等同于</span><br><span class="line"></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[1,2,3] + &#x27; &#x27;&#125;&#125;&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml"> &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅲ-条件渲染"><a href="#Ⅲ-条件渲染" class="headerlink" title="Ⅲ-条件渲染"></a>Ⅲ-条件渲染</h3><h4 id="1-wx-if"><a href="#1-wx-if" class="headerlink" title="1) wx:if"></a>1) wx:if</h4><blockquote><ol><li>在框架中，使用 <code>wx:if=&quot;&quot;</code> 来判断是否需要渲染该代码块：</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="attr">wx</span>:<span class="keyword">if</span>=<span class="string">&quot;&#123;&#123;condition&#125;&#125;&quot;</span>&gt; <span class="title class_">True</span> &lt;/view&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>也可以用 <code>wx:elif</code> 和 <code>wx:else</code> 来添加一个 else 块:</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="attr">wx</span>:<span class="keyword">if</span>=<span class="string">&quot;&#123;&#123;length &gt; 5&#125;&#125;&quot;</span>&gt; <span class="number">1</span> &lt;/view&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">&quot;&#123;&#123;length &gt; 2&#125;&#125;&quot;</span>&gt;</span> 2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span> 3 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-block-wx-if"><a href="#2-block-wx-if" class="headerlink" title="2) block wx:if"></a>2) block wx:if</h4><blockquote><p>因为 <code>wx:if</code> 是一个控制属性，需要将它添加到一个标签上。如果要一次性判断多个组件标签，可以使用一个 <code>&lt;block/&gt;</code> 标签将多个组件包装起来，并在上边使用 <code>wx:if</code> 控制属性</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">view</span>&gt;</span> view1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">view</span>&gt;</span> view2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性</p></blockquote><h4 id="3-wx-if-vs-hidden"><a href="#3-wx-if-vs-hidden" class="headerlink" title="3) wx:if vs hidden"></a>3) <code>wx:if</code> vs <code>hidden</code></h4><blockquote><ol><li><p>因为 <code>wx:if</code> 之中的模板也可能包含数据绑定，所以当 <code>wx:if</code> 的条件值切换时，框架有一个局部渲染的过程，因为它会确保条件块在切换时销毁或重新渲染。</p></li><li><p>同时 <code>wx:if</code> 也是<strong>惰性的</strong>，如果在初始渲染条件为 <code>false</code>，框架什么也不做，在条件第一次变成真的时候才开始局部渲染。</p></li></ol><p>  相比之下，<code>hidden</code> 就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。</p><ol start="3"><li>一般来说，<code>wx:if</code> 有更高的切换消耗而 <code>hidden</code> 有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用 <code>hidden</code> 更好，如果在运行时条件不大可能改变则 <code>wx:if</code> 较好。</li></ol></blockquote><h3 id="Ⅳ-模板"><a href="#Ⅳ-模板" class="headerlink" title="Ⅳ-模板"></a>Ⅳ-模板</h3><blockquote><ol><li><p>WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用</p></li><li><p>模板拥有自己的<code>作用域</code>，只能使用 <code>data</code> 传入的数据以及模板定义文件中定义的 <code>&lt;wxs /&gt;</code> 模块。</p></li></ol></blockquote><h4 id="1-定义模板"><a href="#1-定义模板" class="headerlink" title="1) 定义模板"></a>1) 定义模板</h4><blockquote><p>使用 name 属性，作为模板的名字。然后在<code>&lt;template/&gt;</code>内定义代码片段，如</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;!--</span><br><span class="line"> <span class="attr">index</span>: int</span><br><span class="line"> <span class="attr">msg</span>: string</span><br><span class="line"> <span class="attr">time</span>: string</span><br><span class="line">&gt;--&gt;</span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;msgItem&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">text</span>&gt;</span> Time: &#123;&#123;time&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-使用模板"><a href="#2-使用模板" class="headerlink" title="2) 使用模板"></a>2) 使用模板</h4><blockquote><ol><li>使用 is 属性，声明需要的使用的模板，然后将模板所需要的 data 传入，如：</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template is=<span class="string">&quot;msgItem&quot;</span> data=<span class="string">&quot;&#123;&#123;...item&#125;&#125;&quot;</span>/&gt;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">item</span>: &#123; <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;this is a template&#x27;</span>, <span class="attr">time</span>: <span class="string">&#x27;2016-09-15&#x27;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>is 属性可以使用 Mustache 语法，来动态决定具体需要渲染哪个模板：</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template name=<span class="string">&quot;odd&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span> odd <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;even&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> even <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[1, 2, 3, 4, 5]&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;&#123;&#123;item % 2 == 0 ? &#x27;even&#x27; : &#x27;odd&#x27;&#125;&#125;&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅴ-引用"><a href="#Ⅴ-引用" class="headerlink" title="Ⅴ-引用"></a>Ⅴ-引用</h3><blockquote><p>WXML 提供两种文件引用方式<code>import</code>和<code>include</code></p></blockquote><h4 id="1-import"><a href="#1-import" class="headerlink" title="1) import"></a>1) import</h4><h5 id="①-使用示例"><a href="#①-使用示例" class="headerlink" title="① 使用示例"></a>① 使用示例</h5><blockquote><ol><li>在 item.wxml 中定义了一个叫<code>item</code>的<code>template</code>：</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- item.<span class="property">wxml</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>在 index.wxml 中引用了 item.wxml，就可以使用<code>item</code>模板：</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">import</span> src=<span class="string">&quot;item.wxml&quot;</span>/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;item&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;text: &#x27;forbar&#x27;&#125;&#125;&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h5 id="②-import-的作用域"><a href="#②-import-的作用域" class="headerlink" title="② import 的作用域"></a>② import 的作用域</h5><blockquote><p>import有作用域的概念，即只会 import 目标文件中定义的 template，而不会import目标文件import的template。</p><p>**如：C import B，B import A，在C中可以使用B定义的<code>template</code>，在B中可以使用A定义的<code>template</code>，但是C不能使用A定义的<code>template</code>**。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;!-- A.<span class="property">wxml</span> --&gt;</span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">text</span>&gt;</span> A template <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&gt;&lt;!-- B.<span class="property">wxml</span> --&gt;</span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;a.wxml&quot;</span>/&gt;</span></span></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;B&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">text</span>&gt;</span> B template <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&gt;&lt;!-- C.<span class="property">wxml</span> --&gt;</span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;b.wxml&quot;</span>/&gt;</span></span></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;A&quot;</span>/&gt;</span></span>  &lt;!-- <span class="title class_">Error</span>! <span class="title class_">Can</span> not use tempalte when not <span class="keyword">import</span> A. --&gt;</span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;B&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-include"><a href="#2-include" class="headerlink" title="2) include"></a>2) include</h4><blockquote><p><code>include</code> 可以将目标文件<strong>除了</strong> <code>&lt;template/&gt;</code> <code>&lt;wxs/&gt;</code> 外的整个代码引入，相当于是拷贝到 <code>include</code> 位置，如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.<span class="property">wxml</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;header.wxml&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span> body <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;footer.wxml&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;!-- header.<span class="property">wxml</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span> header <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;!-- footer.<span class="property">wxml</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span> footer <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h2 id="3、双向绑定"><a href="#3、双向绑定" class="headerlink" title="3、双向绑定"></a>3、双向绑定</h2><h3 id="Ⅰ-双向绑定语法"><a href="#Ⅰ-双向绑定语法" class="headerlink" title="Ⅰ-双向绑定语法"></a>Ⅰ-双向绑定语法</h3><blockquote></blockquote><h3 id="Ⅱ-setData–-gt-数据更新"><a href="#Ⅱ-setData–-gt-数据更新" class="headerlink" title="Ⅱ- setData–&gt;数据更新"></a>Ⅱ- <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html"><code>setData</code></a>–&gt;数据更新</h3><blockquote><ol><li><p><code>setData</code> 是小程序开发中使用最频繁的接口，也是最容易引发性能问题的接口。</p></li><li><p>小程序的视图层目前使用 WebView 作为渲染载体，而逻辑层是由独立的 JavascriptCore 作为运行环境。在架构上，WebView 和 JavascriptCore 都是独立的模块，并不具备数据直接共享的通道。当前，视图层和逻辑层的数据传输，实际上通过两边提供的 <code>evaluateJavascript</code> 所实现。即用户传输的数据，①<code>需要将其转换为字符串形式传递</code>，② <code>同时把转换后的数据内容拼接成一份 JS 脚本</code>，③<code>再通过执行 JS 脚本的形式传递到两边独立环境</code>。</p></li><li><p>而 <code>evaluateJavascript</code> 的执行会受很多方面的影响，数据到达视图层并不是实时的</p></li></ol></blockquote><h4 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1) 简单使用"></a>1) 简单使用</h4><blockquote><p><code>setData</code>可以直接将数据加入data中;如果在data中已经有该值,则修改它有着创建+更新功能  但正常是用来更新</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Page</span>(&#123;</span><br><span class="line">   <span class="attr">data</span>: &#123;<span class="attr">posts</span>: [],<span class="attr">test</span>: <span class="string">&quot;测试数据&quot;</span>,<span class="attr">flag</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">   <span class="comment">//更新</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;<span class="attr">posts</span>: content&#125;)</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h4 id="2-常见的-setData-操作错误"><a href="#2-常见的-setData-操作错误" class="headerlink" title="2) 常见的 setData 操作错误"></a>2) 常见的 setData 操作错误</h4><h5 id="①-频繁的去-setData"><a href="#①-频繁的去-setData" class="headerlink" title="① 频繁的去 setData"></a>① <strong>频繁的去 setData</strong></h5><blockquote><p>在我们分析过的一些案例里，部分小程序会非常频繁（毫秒级）的去<code>setData</code>，其导致了两个后果：</p><ul><li>Android 下用户在滑动时会感觉到卡顿，操作反馈延迟严重，因为 JS 线程一直在编译执行渲染，未能及时将用户操作事件传递到逻辑层，逻辑层亦无法及时将操作处理结果及时传递到视图层；</li><li>渲染有出现延时，由于 WebView 的 JS 线程一直处于忙碌状态，逻辑层到页面层的通信耗时上升，视图层收到的数据消息时距离发出时间已经过去了几百毫秒，渲染的结果并不实时；</li></ul></blockquote><h5 id="②-每次-setData-都传递大量新数据"><a href="#②-每次-setData-都传递大量新数据" class="headerlink" title="② 每次 setData 都传递大量新数据"></a>② <strong>每次 setData 都传递大量新数据</strong></h5><blockquote><p>由<code>setData</code>的底层实现可知，我们的数据传输实际是一次 <code>evaluateJavascript</code> 脚本过程，当数据量过大时会增加脚本的编译执行时间，占用 WebView JS 线程，</p></blockquote><h5 id="③-后台态页面进行-setData"><a href="#③-后台态页面进行-setData" class="headerlink" title="③ 后台态页面进行 setData"></a>③ <strong>后台态页面进行 setData</strong></h5><blockquote><p>当页面进入后台态（用户不可见），不应该继续去进行<code>setData</code>，后台态页面的渲染用户是无法感受的，另外后台态页面去<code>setData</code>也会抢占前台页面的执行</p></blockquote><h2 id="4、事件系统"><a href="#4、事件系统" class="headerlink" title="4、事件系统"></a>4、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件系统</a></h2><h3 id="Ⅰ-什么是事件"><a href="#Ⅰ-什么是事件" class="headerlink" title="Ⅰ-什么是事件?"></a>Ⅰ-什么是事件?</h3><blockquote><ul><li><code>事件是视图层到逻辑层的通讯方式</code>。</li><li>事件可以将用户的行为反馈到逻辑层进行处理。</li><li>事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。</li><li>事件对象可以携带额外信息，如 id, dataset, touches。</li></ul></blockquote><h3 id="Ⅱ-事件分类"><a href="#Ⅱ-事件分类" class="headerlink" title="Ⅱ-事件分类"></a>Ⅱ-事件分类</h3><blockquote><p>事件分为冒泡事件和非冒泡事件：</p><ol><li><p><code>冒泡事件</code>：当一个组件上的事件被触发后，该事件会向父节点传递。</p></li><li><p><code>非冒泡事件</code>：当一个组件上的事件被触发后，该事件不会向父节点传递。</p></li><li><p>WXML的冒泡事件列表：</p></li></ol><table><thead><tr><th align="left">类型</th><th align="left">触发条件</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">touchstart</td><td align="left">手指触摸动作开始</td><td align="left"></td></tr><tr><td align="left">touchmove</td><td align="left">手指触摸后移动</td><td align="left"></td></tr><tr><td align="left">touchcancel</td><td align="left">手指触摸动作被打断，如来电提醒，弹窗</td><td align="left"></td></tr><tr><td align="left">touchend</td><td align="left">手指触摸动作结束</td><td align="left"></td></tr><tr><td align="left">tap</td><td align="left">手指触摸后马上离开</td><td align="left"></td></tr><tr><td align="left">longpress</td><td align="left">手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td align="left">longtap</td><td align="left">手指触摸后，超过350ms再离开（推荐使用longpress事件代替）</td><td align="left"></td></tr><tr><td align="left">transitionend</td><td align="left">会在 WXSS transition 或 wx.createAnimation 动画结束后触发</td><td align="left"></td></tr><tr><td align="left">animationstart</td><td align="left">会在一个 WXSS animation 动画开始时触发</td><td align="left"></td></tr><tr><td align="left">animationiteration</td><td align="left">会在一个 WXSS animation 一次迭代结束时触发</td><td align="left"></td></tr><tr><td align="left">animationend</td><td align="left">会在一个 WXSS animation 动画完成时触发</td><td align="left"></td></tr><tr><td align="left">touchforcechange</td><td align="left">在支持 3D Touch 的 iPhone 设备，重按时会触发</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr></tbody></table><ol start="4"><li><code>注</code>：除上表之外的其他组件自定义事件如无特殊声明<code>都是非冒泡事件</code>，如 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/form.html">form</a> 的<code>submit</code>事件，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">input</a> 的<code>input</code>事件，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">scroll-view</a> 的<code>scroll</code>事件，(详见各个<a href="https://developers.weixin.qq.com/miniprogram/dev/component/">组件</a>)</li></ol></blockquote><h3 id="Ⅲ-事件的绑定方式"><a href="#Ⅲ-事件的绑定方式" class="headerlink" title="Ⅲ-事件的绑定方式"></a>Ⅲ-事件的绑定方式</h3><h4 id="1-普通事件绑定-bind-绑定"><a href="#1-普通事件绑定-bind-绑定" class="headerlink" title="1) 普通事件绑定-bind 绑定"></a>1) 普通事件绑定-<code>bind</code> 绑定</h4><blockquote><ol><li>代码示例</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;view bindtap=<span class="string">&quot;tapName&quot;</span> <span class="keyword">class</span>=<span class="string">&#x27;start_container&#x27;</span>&gt;</span><br><span class="line"><span class="comment">//也可以加冒号分隔</span></span><br><span class="line"><span class="comment">//&lt;view bind:tap=&quot;tapName&quot; class=&#x27;start_container&#x27;&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&#x27;start&#x27;</span>&gt;</span>开启小程序之旅<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">tapName</span>: <span class="keyword">function</span>(<span class="params">event</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(event)&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>如果用户点击这个 view ，则页面的 <code>tapName</code> 会被调用。</p></li><li><p>此时，页面的 <code>this.data.tapName</code> 必须是一个字符串，指定事件处理函数名；如果它是个空字符串，则这个绑定会失效（可以利用这个特性来暂时禁用一些事件）</p></li><li><p>自基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a> 起，在大多数组件和自定义组件中， <code>bind</code> 后可以紧跟一个冒号，其含义不变，如 <code>bind:tap</code> 。基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.8.1</a> 起，在所有组件中开始提供这个支持。</p></li></ol></blockquote><h4 id="2-绑定并阻止事件冒泡-catch-绑定"><a href="#2-绑定并阻止事件冒泡-catch-绑定" class="headerlink" title="2) 绑定并阻止事件冒泡-catch 绑定:"></a>2) 绑定并阻止事件冒泡-<code>catch</code> 绑定:</h4><blockquote><ol><li><p>除 <code>bind</code> 外，也可以用 <code>catch</code> 来绑定事件。与 <code>bind</code> 不同， <code>catch</code> 会阻止事件向上冒泡。</p></li><li><p>代码示例:</p></li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;view id=<span class="string">&quot;outer&quot;</span> bindtap=<span class="string">&quot;handleTap1&quot;</span>&gt;</span><br><span class="line">  outer view</span><br><span class="line">  &lt;view id=<span class="string">&quot;middle&quot;</span> catchtap=<span class="string">&quot;handleTap2&quot;</span>&gt;</span><br><span class="line">    middle view</span><br><span class="line">    &lt;view id=<span class="string">&quot;inner&quot;</span> bindtap=<span class="string">&quot;handleTap3&quot;</span>&gt;</span><br><span class="line">      inner view</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>例如在上边这个例子中，点击 inner view 会先后调用<code>handleTap3</code>和<code>handleTap2</code>(因为tap事件会冒泡到 middle view，而 middle view 阻止了 tap 事件冒泡，不再向父节点传递)，点击 middle view 会触发<code>handleTap2</code>，点击 outer view 会触发<code>handleTap1</code>。</li></ol></blockquote><h4 id="3-互斥事件绑定"><a href="#3-互斥事件绑定" class="headerlink" title="3) 互斥事件绑定"></a>3) 互斥事件绑定</h4><blockquote><ol><li><p>自基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.8.2</a> 起，除 <code>bind</code> 和 <code>catch</code> 外，还可以使用 <code>mut-bind</code> 来绑定事件。一个 <code>mut-bind</code> 触发后，如果事件冒泡到其他节点上，其他节点上的 <code>mut-bind</code> 绑定函数不会被触发，但 <code>bind</code> 绑定函数和 <code>catch</code> 绑定函数依旧会被触发。</p></li><li><p>换而言之，所有 <code>mut-bind</code> 是“互斥”的，只会有其中一个绑定函数被触发。同时，它完全不影响 <code>bind</code> 和 <code>catch</code> 的绑定效果</p></li><li><p>例如在下边这个例子中，点击 inner view 会先后调用 <code>handleTap3</code> 和 <code>handleTap2</code> ，点击 middle view 会调用 <code>handleTap2</code> 和 <code>handleTap1</code> </p></li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;view id=<span class="string">&quot;outer&quot;</span> mut-<span class="attr">bind</span>:tap=<span class="string">&quot;handleTap1&quot;</span>&gt;</span><br><span class="line">  outer view</span><br><span class="line">  &lt;view id=<span class="string">&quot;middle&quot;</span> bindtap=<span class="string">&quot;handleTap2&quot;</span>&gt;</span><br><span class="line">    middle view</span><br><span class="line">    &lt;view id=<span class="string">&quot;inner&quot;</span> mut-<span class="attr">bind</span>:tap=<span class="string">&quot;handleTap3&quot;</span>&gt;</span><br><span class="line">      inner view</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅳ-事件的捕获阶段"><a href="#Ⅳ-事件的捕获阶段" class="headerlink" title="Ⅳ-事件的捕获阶段"></a>Ⅳ-事件的捕获阶段</h3><blockquote><ol><li><p>自基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a> 起，触摸类事件支持捕获阶段。捕获阶段位于冒泡阶段之前，且在捕获阶段中，事件到达节点的顺序与冒泡阶段<code>恰好相反</code>。需要在捕获阶段监听事件时，可以采用<code>capture-bind</code>、<code>capture-catch</code>关键字，后者将中断捕获阶段和取消冒泡阶段。</p></li><li><p>在下面的代码中，点击 inner view 会先后调用<code>handleTap2</code>、<code>handleTap4</code>、<code>handleTap3</code>、<code>handleTap1</code></p></li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view id=<span class="string">&quot;outer&quot;</span> <span class="attr">bind</span>:touchstart=<span class="string">&quot;handleTap1&quot;</span> capture-<span class="attr">bind</span>:touchstart=<span class="string">&quot;handleTap2&quot;</span>&gt;</span><br><span class="line">  outer view</span><br><span class="line">  &lt;view id=<span class="string">&quot;inner&quot;</span> <span class="attr">bind</span>:touchstart=<span class="string">&quot;handleTap3&quot;</span> capture-<span class="attr">bind</span>:touchstart=<span class="string">&quot;handleTap4&quot;</span>&gt;</span><br><span class="line">    inner view</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>  如果将上面代码中的第一个capture-bind改为capture-catch，将<code>只触发handleTap2</code>。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view id=<span class="string">&quot;outer&quot;</span> <span class="attr">bind</span>:touchstart=<span class="string">&quot;handleTap1&quot;</span> capture-<span class="attr">catch</span>:touchstart=<span class="string">&quot;handleTap2&quot;</span>&gt;</span><br><span class="line">  outer view</span><br><span class="line">  &lt;view id=<span class="string">&quot;inner&quot;</span> <span class="attr">bind</span>:touchstart=<span class="string">&quot;handleTap3&quot;</span> capture-<span class="attr">bind</span>:touchstart=<span class="string">&quot;handleTap4&quot;</span>&gt;</span><br><span class="line">    inner view</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅴ-事件对象"><a href="#Ⅴ-事件对象" class="headerlink" title="Ⅴ-事件对象"></a>Ⅴ-事件对象</h3><blockquote><p>如无特殊说明，当组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象。</p></blockquote><h4 id="1-BaseEvent-基础事件对象属性列表"><a href="#1-BaseEvent-基础事件对象属性列表" class="headerlink" title="1) BaseEvent 基础事件对象属性列表"></a>1) <strong>BaseEvent 基础事件对象属性列表</strong></h4><blockquote><ol><li>表格:</li></ol><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th><th align="left">基础库版本</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#type">type</a></td><td align="left">String</td><td align="left">代表事件的类型</td><td align="left"></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#timeStamp">timeStamp</a></td><td align="left">Integer</td><td align="left">事件生成时的时间戳–页面打开到触发事件所经过的毫秒数</td><td align="left"></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#target">target</a></td><td align="left">Object</td><td align="left">触发事件的组件的一些属性值集合–触发事件的源组件</td><td align="left"></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#currenttarget">currentTarget</a></td><td align="left">Object</td><td align="left">当前组件的一些属性值集合–事件绑定的当前组件</td><td align="left"></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#mark">mark</a></td><td align="left">Object</td><td align="left">事件标记数据</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.7.1</a></td></tr></tbody></table><ol start="2"><li><p>补充说明</p></li><li><p>target</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">String</td><td align="left">事件源组件的id</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#dataset">dataset</a></td><td align="left">Object</td><td align="left">事件源组件上由<code>data-</code>开头的自定义属性组成的集合</td></tr></tbody></table></li><li><p>currentTarget</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">id</td><td align="left">String</td><td align="left">当前组件的id</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#dataset">dataset</a></td><td align="left">Object</td><td align="left">当前组件上由<code>data-</code>开头的自定义属性组成的集合</td></tr></tbody></table><p><code>说明</code>： target 和 currentTarget 可以参考上例中，点击 inner view 时，<code>handleTap3</code> 收到的事件对象 target 和 currentTarget 都是 inner，而 <code>handleTap2</code> 收到的事件对象 target 就是 inner，currentTarget 就是 middle</p></li></ol></blockquote><h4 id="2-TouchEvent-触摸事件对象属性列表（继承-BaseEvent）："><a href="#2-TouchEvent-触摸事件对象属性列表（继承-BaseEvent）：" class="headerlink" title="2) TouchEvent 触摸事件对象属性列表（继承 BaseEvent）："></a>2) <strong>TouchEvent 触摸事件对象属性列表（继承 BaseEvent）：</strong></h4><blockquote><ol><li>表格:</li></ol><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#touches">touches</a></td><td align="left">Array</td><td align="left">触摸事件，当前停留在屏幕中的触摸点信息的数组</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#changedTouches">changedTouches</a></td><td align="left">Array</td><td align="left">触摸事件，当前变化的触摸点信息的数组</td></tr></tbody></table><ol start="2"><li><p>补充说明</p></li><li><p>touches</p><p>touches 是一个数组，每个元素为一个 Touch 对象（canvas 触摸事件中携带的 touches 是 CanvasTouch 数组）。 表示当前停留在屏幕上的触摸点。</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">identifier</td><td align="left">Number</td><td align="left">触摸点的标识符</td></tr><tr><td align="left">pageX, pageY</td><td align="left">Number</td><td align="left">距离文档左上角的距离，文档的左上角为原点 ，横向为X轴，纵向为Y轴</td></tr><tr><td align="left">clientX, clientY</td><td align="left">Number</td><td align="left">距离页面可显示区域（屏幕除去导航条）左上角距离，横向为X轴，纵向为Y轴</td></tr></tbody></table></li><li><p>changedTouches</p><p>changedTouches 数据格式同 touches。 表示有变化的触摸点，如从无变有（touchstart），位置变化（touchmove），从有变无（touchend、touchcancel）</p></li></ol></blockquote><h4 id="3-CustomEvent-自定义事件对象属性列表（继承-BaseEvent）："><a href="#3-CustomEvent-自定义事件对象属性列表（继承-BaseEvent）：" class="headerlink" title="3) CustomEvent 自定义事件对象属性列表（继承 BaseEvent）："></a>3) <strong>CustomEvent 自定义事件对象属性列表（继承 BaseEvent）：</strong></h4><blockquote><ol><li>表格</li></ol><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#detail">detail</a></td><td align="left">Object</td><td align="left">额外的信息<br />自定义事件所携带的数据，如表单组件的提交事件会携带用户的输入，媒体的错误事件会携带错误信息，详见<a href="https://developers.weixin.qq.com/miniprogram/dev/component">组件</a>定义中各个事件的定义。</td></tr></tbody></table></blockquote><hr><h1 id="五、逻辑层详解"><a href="#五、逻辑层详解" class="headerlink" title="五、逻辑层详解"></a>五、逻辑层详解</h1><blockquote><ol><li>原理:小程序开发框架的逻辑层使用 <code>JavaScript</code> 引擎为小程序提供开发者 <code>JavaScript</code> 代码的运行环境以及微信小程序的特有功能。</li></ol><p>  ​    逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。</p><p>  ​    开发者写的所有代码最终将会打包成一份 <code>JavaScript</code> 文件，并在小程序启动的时候运行，直到小程序销毁。这一行为类似<a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">ServiceWorker</a>，所以逻辑层也称之为 App Service。</p><ol start="2"><li>在 <code>JavaScript</code> 的基础上，我们增加了一些功能，以方便小程序的开发：</li></ol><ul><li>增加 <code>App</code> 和 <code>Page</code> 方法，进行<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html">程序注册</a>和<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html">页面注册</a>。</li><li>增加 <code>getApp</code> 和 <code>getCurrentPages</code> 方法，分别用来获取 <code>App</code> 实例和当前页面栈。</li><li>提供丰富的 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html">API</a>，如微信用户数据，扫一扫，支付等微信特有能力。</li><li>提供<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/module.html#%E6%A8%A1%E5%9D%97%E5%8C%96">模块化</a>能力，每个页面有独立的<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/module.html#%E6%96%87%E4%BB%B6%E4%BD%9C%E7%94%A8%E5%9F%9F">作用域</a>。</li></ul><p><strong>注意：小程序框架的逻辑层并非运行在浏览器中，因此 <code>JavaScript</code> 在 web 中一些能力都无法使用，如 <code>window</code>，<code>document</code> 等。</strong></p><p>该部分将<code>截取官方文档</code>并加以注解</p></blockquote><h2 id="1、页面路由"><a href="#1、页面路由" class="headerlink" title="1、页面路由"></a>1、页面路由</h2><blockquote><p>在小程序中所有页面的路由全部由框架进行管理</p></blockquote><h3 id="Ⅰ-页面栈与路由方式"><a href="#Ⅰ-页面栈与路由方式" class="headerlink" title="Ⅰ-页面栈与路由方式"></a>Ⅰ-页面栈与路由方式</h3><blockquote><ol><li>框架以<code>栈</code>的形式维护了当前的所有页面。</li><li>对于路由的<code>触发方式</code>以及页面<code>生命周期函数</code>如下：</li></ol><table><thead><tr><th align="left">路由方式</th><th>页面栈表现</th><th align="left">触发时机</th><th align="left">路由前页面</th><th align="left">路由后页面</th></tr></thead><tbody><tr><td align="left">初始化</td><td>新页面入栈</td><td align="left">小程序打开的第一个页面</td><td align="left"></td><td align="left">onLoad, onShow</td></tr><tr><td align="left">打开新页面</td><td>新页面入栈</td><td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html">wx.navigateTo</a> <br />使用组件<navigator open-type="navigateTo"/></td><td align="left">onHide</td><td align="left">onLoad, onShow</td></tr><tr><td align="left">页面重定向</td><td>当前页面出栈，新页面入栈</td><td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html">wx.redirectTo</a> <br />使用组件<navigator open-type="redirectTo"/></td><td align="left">onUnload</td><td align="left">onLoad, onShow</td></tr><tr><td align="left">页面返回</td><td>页面不断出栈，直到目标返回页</td><td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html">wx.navigateBack</a> <br />使用组件<navigator open-type="navigateBack"/> <br />用户按左上角返回按钮</td><td align="left">onUnload</td><td align="left">onShow</td></tr><tr><td align="left">Tab 切换</td><td>页面全部出栈，只留下新的 Tab 页面<br />如果从没有<code>tabBar</code>的页面跳转至有<code>tabBar</code>的页面就<code>一定要用这个</code>,而不是上面的,否则会报错</td><td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html">wx.switchTab</a> <br />使用组件<navigator open-type="switchTab"/><br />用户切换 Tab</td><td align="left"></td><td align="left">各种情况请参考下表</td></tr><tr><td align="left">重启动</td><td>页面全部出栈，只留下新的页面</td><td align="left">调用 API <a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html">wx.reLaunch</a> <br />使用组件<navigator open-type="reLaunch"/></td><td align="left">onUnload</td><td align="left">onLoad, onShow</td></tr></tbody></table><ol start="2"><li>代码示例:</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">navigateTo</span>(&#123; <span class="comment">//当前页面被隐藏，缓存在栈中，最多存放10个页面</span></span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;/pages/posts/post&quot;</span> <span class="comment">//跳转的页面路径</span></span><br><span class="line">&#125;)</span><br><span class="line"> wx.<span class="title function_">redirectTo</span>(&#123; <span class="comment">//当前页面被销毁</span></span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;/pages/posts/post&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>Tab 切换对应的生命周期（以 A、B 页面为 Tabbar 页面，C 是从 A 页面打开的页面，D 页面是从 C 页面打开的页面为例）：</li></ol><table><thead><tr><th align="left">当前页面</th><th align="left">路由后页面</th><th align="left">触发的生命周期（按顺序）</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">A</td><td align="left">Nothing happend</td></tr><tr><td align="left">A</td><td align="left">B</td><td align="left">A.onHide(), B.onLoad(), B.onShow()</td></tr><tr><td align="left">A</td><td align="left">B（再次打开）</td><td align="left">A.onHide(), B.onShow()</td></tr><tr><td align="left">C</td><td align="left">A</td><td align="left">C.onUnload(), A.onShow()</td></tr><tr><td align="left">C</td><td align="left">B</td><td align="left">C.onUnload(), B.onLoad(), B.onShow()</td></tr><tr><td align="left">D</td><td align="left">B</td><td align="left">D.onUnload(), C.onUnload(), B.onLoad(), B.onShow()</td></tr><tr><td align="left">D（从转发进入）</td><td align="left">A</td><td align="left">D.onUnload(), A.onLoad(), A.onShow()</td></tr><tr><td align="left">D（从转发进入）</td><td align="left">B</td><td align="left">D.onUnload(), B.onLoad(), B.onShow()</td></tr></tbody></table></blockquote><h3 id="Ⅱ-Tips"><a href="#Ⅱ-Tips" class="headerlink" title="Ⅱ-Tips"></a>Ⅱ-Tips</h3><blockquote><ul><li><code>navigateTo</code>, <code>redirectTo</code> 只能打开非 tabBar 页面。</li><li><code>switchTab</code> 只能打开 tabBar 页面。</li><li><code>reLaunch</code> 可以打开任意页面。</li><li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li><li>调用页面路由带的参数可以在目标页面的<code>onLoad</code>中获取。</li><li><code>注意</code>:开发者可以使用 <code>getCurrentPages()</code> 函数获取当前页面栈</li><li>页面栈中最多存在<code>10</code>个</li></ul></blockquote><h2 id="2、模块化"><a href="#2、模块化" class="headerlink" title="2、模块化"></a>2、模块化</h2><blockquote><p>可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/module.html"><code>module.exports</code></a> 或者 <code>exports</code> 才能对外暴露接口。</p></blockquote><hr><h1 id="六、组件与组件库"><a href="#六、组件与组件库" class="headerlink" title="六、组件与组件库"></a>六、组件与组件库</h1><h2 id="1、官方组件"><a href="#1、官方组件" class="headerlink" title="1、官方组件"></a>1、官方组件</h2><blockquote><p>重点举例⼩程序中常⽤的布局组件 view,tex 等,现只举例部分,之后遇到觉得需要mark再写入,大部分可以看<a href="https://developers.weixin.qq.com/miniprogram/dev/component/">官方文档组件部分</a>,便不太多赘述</p></blockquote><h3 id="Ⅰ-view"><a href="#Ⅰ-view" class="headerlink" title="Ⅰ-view"></a>Ⅰ-<a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html">view</a></h3><blockquote><ol><li>在小程序中,通常使用<code>&lt;view/&gt;</code>代替<code>&lt;div/&gt;</code>作为容器来做布局</li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/welcome/welcome.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/测试头像图片.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>Hello,洪jl<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;button&gt;开启小程序之旅&lt;/button&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>开启小程序之旅<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅱ-text"><a href="#Ⅱ-text" class="headerlink" title="Ⅱ-text"></a>Ⅱ-<a href="https://developers.weixin.qq.com/miniprogram/dev/component/text.html">text</a></h3><blockquote><ol><li><p>⽂本标签 </p></li><li><p>只能嵌套text </p></li><li><p>⻓按⽂字可以复制（只有该标签有这个功能）–&gt;selectable</p></li><li><p>可以对如: <code>空格回车&amp;nbsp;</code> 进⾏编码  –&gt;decode</p></li></ol><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>selectable</td><td>Boolean</td><td>false</td><td>⽂本是否可选</td></tr><tr><td>decode</td><td>Boolean</td><td>false</td><td>是否解码</td></tr></tbody></table>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;text selectable=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span> decode=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span><br><span class="line">   普&amp;nbsp;通</span><br><span class="line"> &lt;/text&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅲ-image"><a href="#Ⅲ-image" class="headerlink" title="Ⅲ-image"></a>Ⅲ-<a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html">image</a></h3><blockquote><ol><li><p>图⽚标签，image组件<code>默认</code>宽度320px、⾼度240px,所以如果不进行宽高设置,不会进行自适应</p></li><li><p>⽀持懒加载</p></li></ol><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图⽚资源地址</td></tr><tr><td>mode</td><td>String</td><td><code>scaleToFill</code></td><td>图⽚裁剪、缩放的模式</td></tr><tr><td>lazy-load</td><td>Boolean</td><td>false</td><td>图⽚懒加载</td></tr></tbody></table><ol start="3"><li><code>mode</code>模式列举:</li></ol><table><thead><tr><th>模式</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>缩放</td><td>scaleToFill</td><td>不保持纵横⽐缩放图⽚，使图⽚的宽⾼完全拉伸⾄填满image 元素</td></tr><tr><td>缩放</td><td>aspectFit</td><td>保持纵横⽐缩放图⽚，使图⽚的⻓边能完全显⽰出来。</td></tr><tr><td>缩放</td><td>aspectFill</td><td>保持纵横⽐缩放图⽚，只保证图⽚的短边能完全显⽰出来</td></tr><tr><td>缩放</td><td>widthFix</td><td>宽度不变，⾼度⾃动变化，保持原图宽⾼⽐不变</td></tr><tr><td>裁剪</td><td>top</td><td>不缩放图⽚，只显⽰图⽚的顶部区域</td></tr><tr><td>裁剪</td><td>bottom</td><td>不缩放图⽚，只显⽰图⽚的底部区域</td></tr><tr><td>裁剪</td><td>center</td><td>不缩放图⽚，只显⽰图⽚的中间区域</td></tr><tr><td>裁剪</td><td>left</td><td>不缩放图⽚，只显⽰图⽚的左边区域</td></tr><tr><td>裁剪</td><td>right</td><td>不缩放图⽚，只显⽰图⽚的右边区域</td></tr><tr><td>裁剪</td><td><code>top left</code>、<code>top right</code><br /><code>bottom left</code>、<code>bottom right</code></td><td>不缩放图⽚,只显示值所指向区域</td></tr></tbody></table><ol start="4"><li>代码示例:</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;image <span class="keyword">class</span>=<span class="string">&quot;avatar&quot;</span>  mode=<span class="string">&quot;aspectFit&quot;</span> src=<span class="string">&quot;/images/测试头像图片.jpg&quot;</span>&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>应用场景举例,简单效果对比</p><ol><li><p>使用默认mode效果 –&gt;会将图片进行拉伸,导致图片变形</p><p>  <img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210507145239985.png" alt="image-20210507145239985"></p></li><li><p>设置为<code>aspectFill</code>效果 –&gt;保持纵横⽐缩放图⽚，只保证图⽚的短边能完全显⽰出来,图片不会变形</p><p><img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210507145301242.png" alt="image-20210507145301242"></p></li><li><p>根据不同的场景选择不同的<code>mode</code>才是最正确的,就如同该截图场景中,<code>aspectFill</code>明显优于默认</p></li></ol></li></ol></blockquote><h3 id="Ⅳ-swiper"><a href="#Ⅳ-swiper" class="headerlink" title="Ⅳ-swiper"></a>Ⅳ-<a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html">swiper</a></h3><blockquote><p>滑块<code>视图容器</code>。其中只可放置<a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper-item.html">swiper-item</a>组件，否则会导致未定义的行为。</p><ol><li>代码示例</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/posts/posts.<span class="property">wxml</span>--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    //1. &quot;false&quot; ==true 普通字符串  </span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    //    &quot;&#123;&#123;false&#125;&#125;&quot;==false   &#123;&#123;&#125;&#125;视作运算标记,里面的内容表示表达式 </span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    //2. 当你的属性为true时,可以省略value值-- indicator-dots=&quot;&#123;&#123;true&#125;&#125;&quot; == indicator-dots</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">  --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span> <span class="attr">autoplay</span> <span class="attr">interval</span>=<span class="string">&quot;2000&quot;</span> <span class="attr">duration</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">vertical</span> <span class="attr">circular</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 插槽 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">&quot;scaleToFill&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 插槽 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">&quot;scaleToFill&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 插槽 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">&quot;scaleToFill&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>该轮播图代码效果预览:<img src="微信小程序学习笔记中的图片/swiper代码轮播图效果预览.gif" style="zoom:50%;" /></li></ol></blockquote><h3 id="Ⅴ-scroll-view"><a href="#Ⅴ-scroll-view" class="headerlink" title="Ⅴ-scroll-view"></a>Ⅴ-<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">scroll-view</a></h3><blockquote><p>可滚动视图区域。使用竖向滚动时，需要给<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html">scroll-view</a>一个固定高度，通过 WXSS 设置 height。组件属性的长度单位默认为px，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.0</a>起支持传入单位(rpx/px)。</p><ol><li>使用举例图</li></ol><p>  <img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210507172539074.png" alt="image-20210507172539074"></p></blockquote><h2 id="2、LinUi组件库"><a href="#2、LinUi组件库" class="headerlink" title="2、LinUi组件库"></a>2、<a href="https://doc.mini.talelin.com/">LinUi</a>组件库</h2><h3 id="Ⅰ-安装与使用"><a href="#Ⅰ-安装与使用" class="headerlink" title="Ⅰ-安装与使用"></a>Ⅰ-安装与使用</h3><blockquote><ol><li><p><code>Lin UI</code> 是基于 <strong>微信小程序原生语法</strong> 实现的组件库。遵循简洁，易用的设计规范。</p></li><li><p>与其他组件库不同的是，除了提供基本的组件外，还会提供 <code>wxs模块</code> 、<code>高级组件</code> 、 <code>电商组件模块</code> 等等。 例如，在电商项目里常用的 <code>SKU联动选择</code> ，<code>城市选择器</code> 等</p></li><li><p><a href="https://doc.mini.talelin.com/start/"><code>安装</code></a>过程可看官方文档:</p></li></ol><ol><li>打开小程序的项目根目录，执行下面的命令（如果使用了云开发，需要进入miniprogram文件夹下执行下面的命令）</li></ol> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">/*注意事项</span><br><span class="line">1.执行npm init进行初始化，此时会生成一个package.json文件，如果不进行npm init，在构建npm的时候会报一个错误：没有找到 node_modules 目录</span><br><span class="line">2.不建议使用cnpm，这样会带来一些未知的错误。如果网络情况不佳，可以使用下面的命令行更换为淘宝源。</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org */</span><br></pre></td></tr></table></figure><p> 2)继续执行下面的命令</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lin-ui</span><br></pre></td></tr></table></figure><ol start="4"><li>安装完成后在小程序需要点击<code>工具</code>–&gt;<code>构建 npm</code>才可以使用(<code>所有npm引入的都需要这一步</code>)</li><li>要使用<code>自定义组件</code>的话,需要在<code>配置.json</code>文件中(可以在全局的也可以在页面的,作用域不同)注册,具体实现看下面示例</li></ol></blockquote><h3 id="Ⅱ-avatar头像"><a href="#Ⅱ-avatar头像" class="headerlink" title="Ⅱ-avatar头像"></a>Ⅱ-<a href="https://doc.mini.talelin.com/component/view/avatar.html">avatar</a>头像</h3><blockquote><ol><li>要使用<code>自定义组件</code>的话,需要在当前page页面.json文件中注册</li></ol> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//page.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;l-avatar&quot;</span><span class="punctuation">:</span><span class="string">&quot;/miniprogram_npm/lin-ui/avatar/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;组件名(可以自取,一般如果是linui,就l-xxx)&quot;</span><span class="punctuation">:</span><span class="string">&quot;构建后的路径--要具体到那个文件夹下的js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用:</li></ol> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/welcome/welcome.<span class="property">wxml</span>--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- &lt;image class=&quot;avatar&quot; lazy-load=&quot;true&quot; mode=&quot;aspectFit&quot; src=&quot;/images/测试头像图片.jpg&quot;&gt;&lt;/image&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">l-avatar</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> <span class="attr">class</span>=<span class="string">&quot;l-avatar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> <span class="attr">placement</span>=<span class="string">&quot;bottom&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> <span class="attr">open-data</span>=<span class="string">&quot;&#123;&#123;[&#x27;userAvatarUrl&#x27;,&#x27;userNickName&#x27;]&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> <span class="attr">size</span>=<span class="string">&quot;200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* pages/welcome/welcome.wxss */</span></span><br><span class="line"><span class="comment">//可以自己写样式类,加到组件上</span></span><br><span class="line">.<span class="property">l</span>-avatar&#123;</span><br><span class="line">  margin-<span class="attr">top</span>: 160rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅲ-icon"><a href="#Ⅲ-icon" class="headerlink" title="Ⅲ-icon"></a>Ⅲ-icon</h3><blockquote><ol><li>在当前page页面.json文件中注册</li></ol>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;l-icon&quot;</span><span class="punctuation">:</span><span class="string">&quot;/miniprogram_npm/lin-ui/icon/index&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;l-icon size=<span class="string">&quot;20&quot;</span> color=<span class="string">&quot;#34bfa3&quot;</span> name=<span class="string">&quot;cart&quot;</span>&gt;&lt;/l-icon&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">l-icon</span> <span class="attr">name</span>=<span class="string">&quot;research&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">l-icon</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><hr><h1 id="七、小程序API"><a href="#七、小程序API" class="headerlink" title="七、小程序API"></a>七、小程序<a href="https://developers.weixin.qq.com/miniprogram/dev/api/">API</a></h1><h2 id="1、数据缓存"><a href="#1、数据缓存" class="headerlink" title="1、数据缓存"></a>1、<a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html">数据缓存</a></h2><blockquote><p>类似于网页的<code>localStorage</code></p><p>官方文档很详细,此处给出具体地址,翻阅文档即可</p></blockquote><h2 id="2、交互"><a href="#2、交互" class="headerlink" title="2、交互"></a>2、<a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html">交互</a></h2><blockquote><p>一些微信官方给出的组件,具体参数解释看文档,以下给出学习过程中代码示例</p></blockquote><h3 id="Ⅰ-wx-showToast与wx-showModal"><a href="#Ⅰ-wx-showToast与wx-showModal" class="headerlink" title="Ⅰ-wx.showToast与wx.showModal"></a>Ⅰ-wx.showToast与wx.showModal</h3><blockquote><ol><li><code>wx.showToast</code>代码示例:</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">    <span class="comment">//此处其实已经被修改完状态,才开始提示,所以要反过来</span></span><br><span class="line">    <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">collected</span> ? <span class="string">&#x27;收藏成功&#x27;</span> : <span class="string">&#x27;取消收藏&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1000</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><code>wx.showModal</code>代码示例:</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">onCollect</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>:  !<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">collected</span> ? <span class="string">&#x27;进行收藏&#x27;</span> : <span class="string">&#x27;取消收藏&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!result.<span class="property">confirm</span>) <span class="keyword">return</span>; <span class="comment">//点击取消退出</span></span><br><span class="line">   .......<span class="comment">//点击确认后运行的代码</span></span><br><span class="line">    wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">    <span class="comment">//此处其实已经被修改完状态,才开始提示,所以要反过来</span></span><br><span class="line">    <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">collected</span> ? <span class="string">&#x27;收藏成功&#x27;</span> : <span class="string">&#x27;取消收藏&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1000</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li>运行效果示例(两者并存的效果):<img src="微信小程序学习笔记中的图片/showToas与showModal运行效果图.gif" style="zoom:67%;" /></li></ol></blockquote><h2 id="3、媒体"><a href="#3、媒体" class="headerlink" title="3、媒体"></a>3、媒体</h2><h3 id="Ⅰ-媒体音乐播放"><a href="#Ⅰ-媒体音乐播放" class="headerlink" title="Ⅰ-媒体音乐播放"></a>Ⅰ-<a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html">媒体音乐播放</a></h3><blockquote><ol><li><p>wx.getBackgroundAudioManager–播放音乐</p></li><li><p>代码示例</p></li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">getApp</span>() <span class="comment">//此处keyi </span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> mgr = wx.<span class="title function_">getBackgroundAudioManager</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">_mgr</span> = mgr</span><br><span class="line">    <span class="comment">// if(app.gIsPlayMusic) &#123;  此处进入即默认播放</span></span><br><span class="line">    <span class="comment">//   mgr.src = this.data.postData.music.url</span></span><br><span class="line">    <span class="comment">//   mgr.title = this.data.postData.music.title</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    mgr.<span class="title function_">onPlay</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听播放&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    mgr.<span class="title function_">onPause</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听暂停&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 音乐播放</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onMusic</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mgr = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">_mgr</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">isPlaying</span>) &#123;</span><br><span class="line">      mgr.<span class="title function_">pause</span>()</span><br><span class="line">      app.<span class="property">gIsPlayMusicId</span> = -<span class="number">1</span></span><br><span class="line">    &#125; <span class="comment">//当前播放状态如果为true则终止(stop())、pause()暂停</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      mgr.<span class="property">src</span> = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">postData</span>.<span class="property">music</span>.<span class="property">url</span>  <span class="comment">//此处为播放</span></span><br><span class="line">      mgr.<span class="property">title</span> = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">postData</span>.<span class="property">music</span>.<span class="property">title</span></span><br><span class="line">      app.<span class="property">gIsPlayMusicId</span> = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">_pid</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">isPlaying</span>: !<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">isPlaying</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅱ-图片"><a href="#Ⅱ-图片" class="headerlink" title="Ⅱ-图片"></a>Ⅱ-<a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html">图片</a></h3><h4 id="1-wx-previewImage-Object-object"><a href="#1-wx-previewImage-Object-object" class="headerlink" title="1) wx.previewImage(Object object)"></a>1) <a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html">wx.previewImage(Object object)</a></h4><blockquote><p>在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作</p><ol><li><p>代码示例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/movie-detail/movie-detail.<span class="property">wxml</span>--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">image</span> <span class="attr">catch:tap</span>=<span class="string">&quot;onViewPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;movie-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;movie.images&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line"><span class="comment">// pages/movie-detail/movie-detail.js</span></span><br><span class="line"><span class="title function_">onViewPost</span>(<span class="params">e</span>) &#123; <span class="comment">//相册功能(预览)</span></span><br><span class="line">    wx.<span class="title function_">previewImage</span>(&#123;</span><br><span class="line">      <span class="attr">urls</span>: [images1,images2],</span><br><span class="line">    &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>详见开发文档</p></li></ol></blockquote><h2 id="4、界面"><a href="#4、界面" class="headerlink" title="4、界面"></a>4、界面</h2><h3 id="Ⅰ-Tab-Bar"><a href="#Ⅰ-Tab-Bar" class="headerlink" title="Ⅰ-Tab Bar"></a>Ⅰ-<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html">Tab Bar</a></h3><blockquote><p>使用时在<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">app.json</a>中进行配置即可,相关配置详情看全局配置文档,如果需要进行相应操作看官方文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#333333&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#999999&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;borderStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="string">&quot;top&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">     <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/posts/posts&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;阅读&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabBar/yuedu.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabBar/yuedu_1.png&quot;</span></span><br><span class="line">     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/movies/movies&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电影&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabBar/dianying_1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabBar/dianying.png&quot;</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><hr><h1 id="八、小程序生命周期"><a href="#八、小程序生命周期" class="headerlink" title="八、小程序生命周期"></a>八、小程序生命周期</h1><blockquote><p>分为<code>应⽤⽣命周期</code>和<code>⻚⾯⽣命周期</code></p><p>关于小程序前后台的定义和小程序的运行机制，请参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/operating-mechanism.html">运行机制</a>章节。</p></blockquote><h2 id="1、应用生命周期"><a href="#1、应用生命周期" class="headerlink" title="1、应用生命周期"></a>1、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html">应用生命周期</a></h2><blockquote><ol><li>应用生命周期表</li></ol><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">必填</th><th align="left">说明</th><th>场景</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onLaunch-Object-object">onLaunch</a></td><td align="left">function</td><td align="left">否</td><td align="left">生命周期回调——监听小程序初始化。</td><td>小程序初始化完成时触发，全局只触发一次。参数也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html">wx.getLaunchOptionsSync</a> 获取。</td><td align="left"></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onShow-Object-object">onShow</a></td><td align="left">function</td><td align="left">否</td><td align="left">生命周期回调——监听小程序启动或切前台。</td><td>小程序启动，或从后台进入前台显示时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppShow.html">wx.onAppShow</a> 绑定监听</td><td align="left"></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onHide">onHide</a></td><td align="left">function</td><td align="left">否</td><td align="left">生命周期回调——监听小程序切后台。</td><td>小程序从前台进入后台时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppHide.html">wx.onAppHide</a> 绑定监听</td><td align="left"></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onError-String-error">onError</a></td><td align="left">function</td><td align="left">否</td><td align="left">错误监听函数。</td><td>小程序发生脚本错误或 API 调用报错时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onError.html">wx.onError</a> 绑定监听</td><td align="left"></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onPageNotFound-Object-object">onPageNotFound</a></td><td align="left">function</td><td align="left">否</td><td align="left">页面不存在监听函数。</td><td>小程序要打开的页面不存在时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onPageNotFound.html">wx.onPageNotFound</a> 绑定监听。</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onUnhandledRejection-Object-object">onUnhandledRejection</a></td><td align="left">function</td><td align="left">否</td><td align="left">未处理的 Promise 拒绝事件监听函数。</td><td>小程序有未处理的 Promise 拒绝时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onUnhandledRejection.html">wx.onUnhandledRejection</a> 绑定监听</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.0</a></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html#onThemeChange-Object-object">onThemeChange</a></td><td align="left">function</td><td align="left">否</td><td align="left">监听系统主题变化</td><td>系统切换主题时触发。也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onThemeChange.html">wx.onThemeChange</a> 绑定监听</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.0</a></td></tr><tr><td align="left">其他</td><td align="left">any</td><td align="left">否</td><td align="left">开发者可以添加任意的函数或数据变量到 <code>Object</code> 参数中，用 <code>this</code> 可以访问</td><td></td><td align="left"></td></tr></tbody></table><ol start="2"><li>代码示例:</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  onLaunch (options) &#123;</span><br><span class="line">    <span class="comment">// Do something initial when launch.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow (options) &#123;</span><br><span class="line">    <span class="comment">// Do something when show.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide () &#123;</span><br><span class="line">    <span class="comment">// Do something when hide.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onError (msg) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">globalData</span>: <span class="string">&#x27;I am global data&#x27;</span></span><br><span class="line">  ,</span><br><span class="line">  <span class="title function_">onPageNotFound</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  wx.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;pages/...&#x27;</span></span><br><span class="line">  &#125;) <span class="comment">// 如果是 tabbar 页面，请使用 wx.switchTab</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><h2 id="2、页面生命周期"><a href="#2、页面生命周期" class="headerlink" title="2、页面生命周期"></a>2、<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html">页面生命周期</a></h2><blockquote><ol><li>页面生命周期表</li></ol><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#data">data</a></td><td align="left">Object</td><td align="left">页面的初始数据</td></tr><tr><td align="left">options</td><td align="left">Object</td><td align="left">页面的组件选项，同 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html"><code>Component</code> 构造器</a> 中的 <code>options</code> ，需要基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.10.1</a></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onLoad-Object-query">onLoad</a></td><td align="left">function</td><td align="left">生命周期回调—监听页面加载</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShow">onShow</a></td><td align="left">function</td><td align="left">生命周期回调—监听页面显示</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onReady">onReady</a></td><td align="left">function</td><td align="left">生命周期回调—监听页面初次渲染完成</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onHide">onHide</a></td><td align="left">function</td><td align="left">生命周期回调—监听页面隐藏</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onUnload">onUnload</a></td><td align="left">function</td><td align="left">生命周期回调—监听页面卸载</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPullDownRefresh">onPullDownRefresh</a></td><td align="left">function</td><td align="left">监听用户下拉动作</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onReachBottom">onReachBottom</a></td><td align="left">function</td><td align="left">页面上拉触底事件的处理函数</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareAppMessage-Object-object">onShareAppMessage</a></td><td align="left">function</td><td align="left">用户点击右上角转发</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareTimeline">onShareTimeline</a></td><td align="left">function</td><td align="left">用户点击右上角转发到朋友圈</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onAddToFavorites-Object-object">onAddToFavorites</a></td><td align="left">function</td><td align="left">用户点击右上角收藏</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onPageScroll-Object-object">onPageScroll</a></td><td align="left">function</td><td align="left">页面滚动触发事件的处理函数</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onResize-Object-object">onResize</a></td><td align="left">function</td><td align="left">页面尺寸改变时触发，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html#%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E5%90%AF%E7%94%A8%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E6%94%AF%E6%8C%81">响应显示区域变化</a></td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onTabItemTap-Object-object">onTabItemTap</a></td><td align="left">function</td><td align="left">当前是 tab 页时，点击 tab 时触发</td></tr><tr><td align="left">其他</td><td align="left">any</td><td align="left">开发者可以添加任意的函数或数据到 <code>Object</code> 参数中，在页面的函数中用 <code>this</code> 可以访</td></tr></tbody></table><ol start="2"><li>官方的小程序页面生命周期图:</li></ol>  <img src="微信小程序学习笔记中的图片/官方的小程序页面生命周期图.png" alt="image-20210425142044724" style="zoom:80%;" /></blockquote><h2 id="3、组件生命周期-不算在小程序生命周期中"><a href="#3、组件生命周期-不算在小程序生命周期中" class="headerlink" title="3、组件生命周期-不算在小程序生命周期中"></a>3、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html">组件生命周期</a>-不算在小程序生命周期中</h2><blockquote><p>组件的生命周期，指的是组件自身的一些函数，这些函数在特殊的时间点或遇到一些特殊的框架事件时被自动触发</p></blockquote><hr><h1 id="九、自定义组件"><a href="#九、自定义组件" class="headerlink" title="九、自定义组件"></a>九、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/">自定义组件</a></h1><blockquote><p>开发者可以将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用；也可以将复杂的页面拆分成多个低耦合的模块，有助于代码维护。自定义组件在使用时与基础组件非常相似</p><p>这部分将截取<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html">文档自定义组件部分</a>中常见的部分进行注解</p></blockquote><h2 id="1、组件模板和样式"><a href="#1、组件模板和样式" class="headerlink" title="1、组件模板和样式"></a>1、组件模板和样式</h2><blockquote><p>类似于页面，自定义组件拥有自己的 <code>wxml</code> 模板和 <code>wxss</code> 样式。</p></blockquote><h3 id="Ⅰ-组件样式"><a href="#Ⅰ-组件样式" class="headerlink" title="Ⅰ-组件样式"></a>Ⅰ-组件样式</h3><blockquote><p>组件对应 <code>wxss</code> 文件的样式，只对组件wxml内的节点生效。编写组件样式时，需要注意以下几点：</p><ul><li><p>组件和引用组件的页面不能使用id选择器（<code>#a</code>）、属性选择器（<code>[a]</code>）和标签名选择器，请改用class选择器。</p></li><li><p>组件和引用组件的页面中使用后代选择器（<code>.a .b</code>）在一些极端情况下会有非预期的表现，如遇，请避免使用。</p></li><li><p>子元素选择器（<code>.a&gt;.b</code>）只能用于 <code>view</code> 组件与其子节点之间，用于其他组件可能导致非预期的情况。</p></li><li><p>继承样式，如 <code>font</code> 、 <code>color</code> ，会从组件外继承到组件内。</p></li><li><p>除继承样式外， <code>app.wxss</code> 中的样式、组件所在页面的的样式对自定义组件无效（除非更改组件样式隔离选项）。</p></li></ul> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#a</span> &#123; &#125; <span class="comment">/* 在组件中不能使用 */</span></span><br><span class="line"><span class="selector-attr">[a]</span> &#123; &#125; <span class="comment">/* 在组件中不能使用 */</span></span><br><span class="line"><span class="selector-tag">button</span> &#123; &#125; <span class="comment">/* 在组件中不能使用 */</span></span><br><span class="line"><span class="selector-class">.a</span> &gt; <span class="selector-class">.b</span> &#123; &#125; <span class="comment">/* 除非 .a 是 view 组件节点，否则不一定会生效 */</span></span><br></pre></td></tr></table></figure><p>除此以外，组件可以指定它所在节点的默认样式，使用 <code>:host</code> 选择器（需要包含基础库 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.7.2</a> 或更高版本的开发者工具支持）。</p><p>注:此处本人出了一个<code>问题</code>,详见—&gt;本笔记的<code>杂记-&gt;初学者阶段遇到的问题与解决-&gt;Ⅶ</code></p></blockquote><h3 id="Ⅱ-外部样式类"><a href="#Ⅱ-外部样式类" class="headerlink" title="Ⅱ-外部样式类"></a>Ⅱ-外部样式类</h3><blockquote><ol><li>有时，组件希望接受外部传入的样式类。此时可以在 <code>Component</code> 中用 <code>externalClasses</code> 定义段定义若干个外部样式类。这个特性可以用于实现类似于 <code>view</code> 组件的 <code>hover-class</code> 属性：页面可以提供一个样式类，赋予 <code>view</code> 的 <code>hover-class</code> ，这个样式类本身写在页面中而非 <code>view</code> 组件的实现中。</li></ol><p> <strong>注意：在同一个节点上使用普通样式类和外部样式类时，两个类的<code>优先级是未定义</code>的，因此最好避免这种情况。</strong></p><ol start="2"><li><p><strong>代码示例：</strong></p><ol><li><p>自定义组件部分定义与占位符示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 组件 custom-component.js */</span><br><span class="line">Component(&#123;</span><br><span class="line">  externalClasses: [&#x27;my-class&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line">                                                                  </span><br><span class="line">&lt;!-- 组件 custom-component.wxml 如何引用 --&gt;</span><br><span class="line">&lt;custom-component class=&quot;my-class&quot;&gt;这段文本的颜色由组件外的 class 决定&lt;/custom-component&gt;                                 </span><br></pre></td></tr></table></figure><p>这样，组件的使用者可以指定这个样式类对应的 class ，就像使用普通属性一样。在 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.7.1</a> 之后，可以指定多个对应的 class 。</p></li></ol></li><li><p>外部使用自定义组件并传入样式类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面的 WXML --&gt;</span><br><span class="line">&lt;custom-component my-class=&quot;red-text&quot; /&gt;</span><br><span class="line">&lt;custom-component my-class=&quot;large-text&quot; /&gt;</span><br><span class="line">&lt;!-- 以下写法需要基础库版本 2.7.1 以上  注意 这只是一个组件传入两个类名,而不是分别创建两个组件--&gt;</span><br><span class="line">&lt;custom-component my-class=&quot;red-text large-text&quot; /&gt;</span><br><span class="line">                                                                                                              </span><br><span class="line">------------ 样式类声明 页面.wxss ---------------------------------</span><br><span class="line">.red-text &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">.large-text &#123;</span><br><span class="line">  font-size: 1.5em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主要用途:</p><ol><li><p>如果子组件都是我们自己开发的,而且无所谓改动自定义组件源码,那可以不使用这个</p></li><li><p>如果自定义组件封装已经足够成熟,不想再动其中样式源码,就可以用外部样式类进行对自定义组件样式改变(使用<code>!important</code>属性能将样式优先级提高),以此进行对于封装好的组件的样式修改,同理可以运用于第三方库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.movielist</span>&#123; //外部样式类</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">25</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;  //此处就可以将这个样式提升到自定义组件样式优先级之上</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>以后如果自己封装自定义组件,就可以向外暴露外部样式类</p></li></ol></blockquote><h2 id="2、组件间通信与事件"><a href="#2、组件间通信与事件" class="headerlink" title="2、组件间通信与事件"></a>2、组件间通信与事件</h2><h3 id="Ⅰ-组件间通信"><a href="#Ⅰ-组件间通信" class="headerlink" title="Ⅰ-组件间通信"></a>Ⅰ-组件间通信</h3><blockquote><p>组件间的基本通信方式有以下几种。</p><ul><li>WXML 数据绑定：用于父组件向子组件的指定属性设置数据，仅能设置 JSON 兼容数据（自基础库版本 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.9</a> 开始，还可以在数据中包含函数）。具体在 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html">组件模板和样式</a> 章节中介绍。</li><li>事件：用于子组件向父组件传递数据，可以传递任意数据。</li><li>如果以上两种方式不足以满足需要，父组件还可以通过 <code>this.selectComponent</code> 方法获取子组件实例对象，这样就可以直接访问组件的任意数据和方法。</li></ul></blockquote><h3 id="Ⅱ-触发事件"><a href="#Ⅱ-触发事件" class="headerlink" title="Ⅱ-触发事件"></a>Ⅱ-触发事件</h3><blockquote><p>自定义组件触发事件时，需要使用 <code>triggerEvent</code> 方法，指定事件名、detail对象和事件选项</p><ol><li>官方代码示例</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在自定义组件中 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;onTap&quot;</span>&gt;</span>点击这个按钮将触发“myevent”事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="comment">//js文件中</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">onTap</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> myEventDetail = &#123;&#125; <span class="comment">// detail对象，提供给事件监听函数</span></span><br><span class="line">      <span class="keyword">var</span> myEventOption = &#123;&#125; <span class="comment">// 触发事件的选项</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&#x27;myevent&#x27;</span>, myEventDetail, myEventOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>本人在<a href="https://gitee.com/hongjilin/wechat-applet-demo-source-code"><code>hello小程序</code></a>源码中应用</li></ol>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/posts/posts.<span class="property">wxml</span>--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;posts&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;postId&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">post</span> <span class="attr">bind:posttap</span>=<span class="string">&quot;onGoDetail&quot;</span> <span class="attr">res</span>=<span class="string">&quot;&#123;&#123;item&#125;&#125;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="comment">// components/posts/index.js  这是自定义组件</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">methods</span>: &#123;</span><br><span class="line">    onTap (e) &#123;  <span class="comment">//此处不能用箭头函数,否则`  this.triggerEvent`将会找不到报错</span></span><br><span class="line">    <span class="keyword">const</span> pid = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">res</span>.<span class="property">postId</span></span><br><span class="line">    <span class="comment">// console.log( this.data)</span></span><br><span class="line">    <span class="comment">// console.log( this.properties)</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&#x27;posttap&#x27;</span>,&#123;</span><br><span class="line">        pid   <span class="comment">//这个参数会在事件调用处获取到</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pages/posts/posts.js  这个是在调用自定义组件的页面的js中,即可以使用自己的方法,单纯是调用自定义组件定义的事件</span></span><br><span class="line">  <span class="attr">onGoDetail</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123; <span class="comment">//获取组件的自定义属性</span></span><br><span class="line">    <span class="comment">//先判断,如果e.currentTarget.dataset去得到值,就取有值的 下面这3种写法效果等同</span></span><br><span class="line">    <span class="comment">//  let pid = (e.currentTarget.dataset.id)?e.currentTarget.dataset.id:e.detail.pid </span></span><br><span class="line">    <span class="comment">// let pid = e.detail.pid|e.currentTarget.dataset.id  </span></span><br><span class="line">    <span class="keyword">let</span> pid = e.<span class="property">detail</span>.<span class="property">pid</span> || e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">id</span></span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/post-detail/post-detail?pid=&#x27;</span> + pid,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></blockquote><hr><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><blockquote><p>体系学习过程笔记外的知识点</p></blockquote><h2 id="1、微信开发者工具使用技巧"><a href="#1、微信开发者工具使用技巧" class="headerlink" title="1、微信开发者工具使用技巧"></a>1、微信开发者工具使用技巧</h2><h3 id="Ⅰ-新建页面的技巧与规则"><a href="#Ⅰ-新建页面的技巧与规则" class="headerlink" title="Ⅰ-新建页面的技巧与规则:"></a>Ⅰ-新建页面的技巧与规则:</h3><blockquote><ol><li>本技巧适用于<code>微信开发者工具</code></li><li>当你需要新建一个页面时:新建一个page文件目录–&gt;右键<code>新建page</code>–&gt;输入page名字–&gt;一次生成所需四个文件 且自动注册到<code>app.json</code>中</li><li>##如果配置文件中出现错误时,自动新建无法成功,更无法自动注册</li></ol></blockquote><h3 id="Ⅱ-指定初始页面"><a href="#Ⅱ-指定初始页面" class="headerlink" title="Ⅱ-指定初始页面"></a>Ⅱ-指定初始页面</h3><blockquote><p>当你写多个page时,如果每次通过修改<code>app.json</code>的配置项来指定初始页面,十分麻烦</p><ol><li><p>可以在<code>app.json</code>用”entryPagePath”:”pages/页面文件夹/页面文件名” 配置首页,但仍要修改配置文件,十分麻烦</p></li><li><p>使用编译器的<code>工具栏</code>–&gt;添加<code>编译模式</code>进行指定初始化页面(启动页面默认值要先删除才有提示)</p></li></ol>  <img src="微信小程序学习笔记中的图片/image-20210421181759900.png" alt="image-20210421181759900" style="zoom: 80%;" /><ol start="3"><li>添加后每次调试只要<code>选择编译模式</code>,就可以切换初始页面</li></ol></blockquote><h3 id="Ⅲ-ctrl-滚轮缩放工具界面"><a href="#Ⅲ-ctrl-滚轮缩放工具界面" class="headerlink" title="Ⅲ-ctrl+滚轮缩放工具界面"></a>Ⅲ-ctrl+滚轮缩放工具界面</h3><blockquote><p>只能调成字体了,<code>这个BUG被修复了</code>:dog:<img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210423095423566.png" alt="image-20210423095423566"></p></blockquote><h2 id="2、微信开发常见编程方法与细节"><a href="#2、微信开发常见编程方法与细节" class="headerlink" title="2、微信开发常见编程方法与细节"></a>2、微信开发常见编程方法与细节</h2><blockquote><p>学习、练习、开发微信小程序过程中遇到的一些基础知识与细节记录</p></blockquote><h3 id="Ⅰ-相对路径规则"><a href="#Ⅰ-相对路径规则" class="headerlink" title="Ⅰ-相对路径规则:"></a>Ⅰ-相对路径规则:</h3><blockquote><ol><li><p><code>/</code>代表根目录:如引入根目录下的images/图片 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/测试头像图片.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>其余的如:<code>../</code>上一级目录、<code>./</code>同级目录,都与一般无异</p></li></ol></blockquote><h3 id="Ⅱ-npm引入第三方库后需进行构建"><a href="#Ⅱ-npm引入第三方库后需进行构建" class="headerlink" title="Ⅱ-npm引入第三方库后需进行构建"></a>Ⅱ-npm引入第三方库后需进行构建</h3><blockquote><p>安装第三方库后在小程序需要点击<code>工具</code>–&gt;<code>构建 npm</code>才可以使用</p><p><code>所有npm引入的都需要这一步</code></p></blockquote><h2 id="3、初学阶段遇到的问题与解决"><a href="#3、初学阶段遇到的问题与解决" class="headerlink" title="3、初学阶段遇到的问题与解决"></a>3、初学阶段遇到的问题与解决</h2><blockquote><p>这部分将记录本人初学小程序过程遇到的问题,这部分应该大部分是小程序初学者才会遇到的,或者是本人虽然可以直接解决但觉得别人可能会遇到的便记录下来。而后续进阶阶段或者实战开发时遇到的问题,将记录在下面另一章节</p></blockquote><h3 id="Ⅰ-设置整个page的背景色"><a href="#Ⅰ-设置整个page的背景色" class="headerlink" title="Ⅰ-设置整个page的背景色"></a>Ⅰ-设置整个page的背景色</h3><blockquote><ol><li><p>问题:当我设置页面背景色时,发现添加背景色的page的高度是被内容撑起而不是全屏?如何解决最简单<br>问题截图<img src="微信小程序学习笔记中的图片/image-20210421153332813.png" alt="image-20210421153332813" style="zoom: 50%;" />解决后<img src="微信小程序学习笔记中的图片/image-20210421153607334.png" alt="image-20210421153607334" style="zoom: 50%;" /></p><p>解决:可以在你需要修改的page的样式文件中,给<code>&lt;page/&gt;</code>标签加样式,默认小程序是使用<page/>作为最外层的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b3d4db</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="Ⅱ-小程序中使用less"><a href="#Ⅱ-小程序中使用less" class="headerlink" title="Ⅱ-小程序中使用less"></a>Ⅱ-小程序中使用less</h3><blockquote><p>原⽣⼩程序不⽀持 less ，其他基于⼩程序的框架⼤体都⽀持，如 wepy ， mpvue ， taro 等。 但是仅仅因为⼀个less功能，⽽去引⼊⼀个框架，肯定是不可取的。因此可以⽤以下⽅式来实现</p><ol><li><p>编辑器是<code>vscode</code></p></li><li><p>安装插件<code>easy less</code></p></li></ol><p>  <img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210421151330740.png" alt="image-20210421151330740"></p><ol start="3"><li>在vscode的设置中加⼊如下，配置</li></ol>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;less.compile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;outExt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.wxss&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>在要编写样式的地⽅，新建 less ⽂件，如 index.less ,然后正常编辑即可。</li></ol></blockquote><h3 id="Ⅲ-报错-TypeError-wx-getMenuButtonBoundingClientRect-is-not-a-function"><a href="#Ⅲ-报错-TypeError-wx-getMenuButtonBoundingClientRect-is-not-a-function" class="headerlink" title="Ⅲ-报错: TypeError: wx.getMenuButtonBoundingClientRect is not a function"></a>Ⅲ-报错: <code>TypeError: wx.getMenuButtonBoundingClientRect is not a function</code></h3><blockquote><p>控制台报错: <code>TypeError: wx.getMenuButtonBoundingClientRect is not a function</code></p><p>问题分析:这个 api是 更高版本版本支持的，你的用户有的客户端基础库版本 小于这个基础库。你在小程序后台设置下 最低基础库2.1.0.那样用户客户端基础库版本低于此就会提示升级</p><p>解决:<img src="微信小程序学习笔记中的图片/报错1图例.png" alt="image-20210421172805580" style="zoom: 67%;" /></p></blockquote><h3 id="Ⅳ-警告-无效的page-json"><a href="#Ⅳ-警告-无效的page-json" class="headerlink" title="Ⅳ-警告:无效的page.json"></a>Ⅳ-警告:<code>无效的page.json</code></h3><blockquote><p>这是初学者才会犯下的错误,但也记录下来</p><ol><li>问题:在page.json配置文件中与要修改导航栏颜色,却发生报错 <img src="微信小程序学习笔记中的图片/警告pagejson无效问题.png" alt="image-20210422094205182" style="zoom: 67%;" /></li><li>解决:修改相应报错配置(<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html">翻阅文档</a>),虽然响应的属性值相同,但一个外层包裹window,另一个没有包裹 <img src="微信小程序学习笔记中的图片/警告pagejson无效问题解决.png" alt="image-20210422094901528" style="zoom:67%;" /></li></ol></blockquote><h3 id="Ⅴ-报错-typeError-Cannot-read-property-39-mark-39-of-undefined"><a href="#Ⅴ-报错-typeError-Cannot-read-property-39-mark-39-of-undefined" class="headerlink" title="Ⅴ-报错:typeError: Cannot read property &#39;mark&#39; of undefined"></a>Ⅴ-报错:<code>typeError: Cannot read property &#39;mark&#39; of undefined</code></h3><blockquote><ol><li>报错</li></ol><p> ​    <img src="微信小程序学习笔记中的图片/image-20210426170705465.png" alt="image-20210426170705465" style="zoom:80%;" /></p><ol start="2"><li>解决:最终发现是小程序工具设置问题</li></ol><p> 需要勾选增强编译</p><p> <img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210426170827112.png" alt="image-20210426170827112"></p></blockquote><h3 id="Ⅵ-微信小程序中使用箭头函数导致this指向错误的问题"><a href="#Ⅵ-微信小程序中使用箭头函数导致this指向错误的问题" class="headerlink" title="Ⅵ-微信小程序中使用箭头函数导致this指向错误的问题"></a>Ⅵ-微信小程序中使用箭头函数导致this指向错误的问题</h3><blockquote><ol><li>问题代码截图:</li></ol><img src="微信小程序学习笔记中的图片/image-20210427161221380.png" alt="image-20210427161221380" style="zoom: 67%;" /><ol start="2"><li>问题分析:</li></ol><p>众所周知,箭头函数<code>会改变this指向</code>,当我使用箭头函数后,函数中的this不再指向实例而是指向函数本身,导致data其实是找不到的发生报错</p><ol start="3"><li><p>问题解决:</p><ol><li><p>不使用箭头函数:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">onCollect</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> result = <span class="keyword">await</span> wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">     <span class="attr">title</span>:  !<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">collected</span> ? <span class="string">&#x27;进行收藏&#x27;</span> : <span class="string">&#x27;取消收藏&#x27;</span>,</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">if</span> (!result.<span class="property">confirm</span>) <span class="keyword">return</span>;</span><br><span class="line">      </span><br><span class="line">   <span class="keyword">let</span> postCollected = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">_postCollected</span> <span class="comment">//将当前data中(相当于之前本地缓存的postCollected)拉去下来,防止被覆盖</span></span><br><span class="line">   postCollected[<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">_pid</span>] = !<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">collected</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">     <span class="attr">collected</span>: !<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">collected</span></span><br><span class="line">   &#125;)</span><br><span class="line">   wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;posts_collected&#x27;</span>, postCollected)</span><br><span class="line">   wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">     <span class="comment">//此处其实已经被修改完状态,才开始提示,所以要反过来</span></span><br><span class="line">     <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">collected</span> ? <span class="string">&#x27;收藏成功&#x27;</span> : <span class="string">&#x27;取消收藏&#x27;</span>,</span><br><span class="line">     <span class="attr">duration</span>: <span class="number">1000</span></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>使用箭头函数,但需要保存this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> con  <span class="comment">//用来保存this指向</span></span><br><span class="line">                                                                            </span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">//1. 生命周期函数中保存this指向</span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    con=<span class="variable language_">this</span>  <span class="comment">//用来保存this指向</span></span><br><span class="line">&#125;,</span><br><span class="line">  <span class="comment">//2. 函数体写法</span></span><br><span class="line"><span class="attr">onCollect</span>:<span class="keyword">async</span> (e)=&gt; &#123;  箭头函数写法,需要保存<span class="variable language_">this</span>指向</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(con)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>:  !con.<span class="property">data</span>.<span class="property">collected</span> ? <span class="string">&#x27;进行收藏&#x27;</span> : <span class="string">&#x27;取消收藏&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!result.<span class="property">confirm</span>) <span class="keyword">return</span>;</span><br><span class="line">                                                                            </span><br><span class="line">  <span class="keyword">let</span> postCollected = con.<span class="property">data</span>.<span class="property">_postCollected</span> <span class="comment">//将当前data中(相当于之前本地缓存的postCollected)拉去下来,防止被覆盖</span></span><br><span class="line">  postCollected[con.<span class="property">data</span>.<span class="property">_pid</span>] = !con.<span class="property">data</span>.<span class="property">collected</span></span><br><span class="line">  con.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">collected</span>: !con.<span class="property">data</span>.<span class="property">collected</span></span><br><span class="line">  &#125;)</span><br><span class="line">  wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;posts_collected&#x27;</span>, postCollected)</span><br><span class="line">  wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">    <span class="comment">//此处其实已经被修改完状态,才开始提示,所以要反过来</span></span><br><span class="line">    <span class="attr">title</span>: con.<span class="property">data</span>.<span class="property">collected</span> ? <span class="string">&#x27;收藏成功&#x27;</span> : <span class="string">&#x27;取消收藏&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1000</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol></blockquote><h3 id="Ⅶ-警告-Some-selectors-are-not-allowed-in-component-wxss-including-tag-name-selectors-ID-selectors-and-attribute-selectors"><a href="#Ⅶ-警告-Some-selectors-are-not-allowed-in-component-wxss-including-tag-name-selectors-ID-selectors-and-attribute-selectors" class="headerlink" title="Ⅶ-警告: Some selectors are not allowed in component wxss, including tag name selectors, ID selectors, and attribute selectors"></a>Ⅶ-警告: <code>Some selectors are not allowed in component wxss, including tag name selectors, ID selectors, and attribute selectors</code></h3><blockquote><ol><li>出现场景:在我将之前写好的样式模块抽出成<code>自定义组件</code>时,控制台突然出现警告</li></ol><p>  <img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210430101549430.png" alt="image-20210430101549430"></p><ol start="2"><li>分析:我使用了<code>属性选择器</code>,而<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html">官方文档在自定义组件部分</a>有要求不能使用,防止出现样式错误,</li></ol>  <img src="微信小程序学习笔记中的图片/image-20210430101700628.png" alt="image-20210430101700628" style="zoom: 80%;" /><ol start="3"><li>解决:将属性选择器删除即可</li></ol></blockquote><h3 id="Ⅷ-解决flex布局中-space-between方法的排版问题"><a href="#Ⅷ-解决flex布局中-space-between方法的排版问题" class="headerlink" title="Ⅷ-解决flex布局中 space-between方法的排版问题"></a>Ⅷ-解决flex布局中 space-between方法的排版问题</h3><blockquote><p>flex布局 justify-content：space-between； 解决最后一排数量不够自动向两端排列问题</p><ol><li>问题图示:</li></ol>  <img src="微信小程序学习笔记中的图片/image-20210507095120687.png" alt="image-20210507095120687" style="zoom: 50%;" /><ol start="2"><li>分析:flex 布局两端对齐当最后一排数量不够时，会出现以下布局情况</li></ol><p>  <img src="%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210507095230974.png" alt="image-20210507095230974"></p><ol start="3"><li>解决方法1:父级添加after伪类法</li></ol>  <img src="微信小程序学习笔记中的图片/image-20210507095349825.png" alt="image-20210507095349825" style="zoom: 67%;" /><p>  ps:这种解决方案只适合每列有<code>3个</code>的分布情况，如果布局每列有4个，5个,就需要解决方法2</p><ol start="4"><li>解决方法2:使用grid栅格布局,此处不详解,只将解决方案指出,有需要的直接百度搜索<code>使用grid栅格布局</code>即可</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端笔记整合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS样式表规范</title>
      <link href="/2022/10/12/CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8%E8%A7%84%E8%8C%83/"/>
      <url>/2022/10/12/CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS开发规范"><a href="#CSS开发规范" class="headerlink" title="CSS开发规范"></a>CSS开发规范</h2><blockquote><p>怎么说呢,大部分前端编写样式表的时候并没有特意按照良好地CSS书写规范来写CSS代码,这样写出来的CSS代码不止不够直观,甚至非常影响代码的阅读体验与维护难度,这边我参考了一些文章以及个人经验进行梳理整合,整理出一些常用或者指的学习的CSS开发规范</p></blockquote><h2 id="Ⅰ-常见语法规范"><a href="#Ⅰ-常见语法规范" class="headerlink" title="Ⅰ- 常见语法规范"></a>Ⅰ- 常见语法规范</h2><h3 id="1、常见语法规范总结"><a href="#1、常见语法规范总结" class="headerlink" title="1、常见语法规范总结"></a>1、常见语法规范总结</h3><blockquote><blockquote><h6 id="常见语法规范"><a href="#常见语法规范" class="headerlink" title="常见语法规范"></a>常见语法规范</h6></blockquote><ol><li>用<code>两个空格来代替tab</code> – 这是唯一能保证在所有环境下获得一致展现的方法。</li><li>为选择器分组时，将单独的选择器单独放在一行。</li><li>为了代码的易读性，在每个声明块的左花括号前添加一个空格。</li><li>声明块的右花括号应当单独成行。</li><li>每条声明语句的 <code>:</code> 后应该插入一个空格。</li><li>为了获得更准确的错误报告，每条声明都应该独占一行。</li><li>所有声明语句都应当以分号结尾。最后一条声明语句后面的分号是可选的，但是，如果省略这个分号，你的代码可能更易出错。</li><li>对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格（例如，<code>box-shadow</code>）。</li><li>不要在 <code>rgb()</code>、<code>rgba()</code>、<code>hsl()</code>、<code>hsla()</code> 或 <code>rect()</code> 值的<em>内部</em>的逗号后面插入空格。这样利于从多个属性值（既加逗号也加空格）中区分多个颜色值（只加逗号，不加空格）。</li><li>对于属性值或颜色参数，省略小于 1 的小数前面的 0 （例如，<code>.5</code> 代替 <code>0.5</code>；<code>-.5px</code> 代替 <code>-0.5px</code>）。</li><li>十六进制值应该全部小写，例如，<code>#fff</code>。在扫描文档时，小写字符易于分辨，因为他们的形式更易于区分。</li><li>尽量使用简写形式的十六进制值，例如，用 <code>#fff</code> 代替 <code>#ffffff</code>。</li><li>为选择器中的属性添加双引号，例如，<code>input[type=&quot;text&quot;]</code>。<a href="http://mathiasbynens.be/notes/unquoted-attribute-values#css">只有在某些情况下是可选的</a>，但是，为了代码的一致性，建议都加上双引号。</li><li>避免为 0 值指定单位，例如，用 <code>margin: 0;</code> 代替 <code>margin: 0px;</code>。</li></ol><blockquote><h6 id="直接上例子"><a href="#直接上例子" class="headerlink" title="直接上例子"></a>直接上例子</h6></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/************************** 不好的CSS 写法 **********************************/</span></span><br><span class="line">&gt;<span class="selector-class">.selector</span>, <span class="selector-class">.selector-secondary</span>, <span class="selector-class">.selector</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line"> <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">  <span class="comment">/* 避免为 0 值指定单位，例如，用 `margin: 0;` 代替 `margin: 0px;` */</span></span><br><span class="line"> <span class="attribute">margin</span>:<span class="number">0px</span> <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line"> <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line"> <span class="comment">/* 十六进制值应该全部小写,同时尽量使用简写形式的十六进制值  */</span>  </span><br><span class="line"> <span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#CCC</span>,inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#FFFFFF</span>  </span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/************************** 好的 CSS 写法 ***************************************/</span></span><br><span class="line">&gt;<span class="selector-class">.selector</span>,                           --&gt;为选择器分组时，将单独的选择器单独放在一行</span><br><span class="line">&gt;<span class="selector-class">.selector-secondary</span>,</span><br><span class="line">&gt;<span class="selector-class">.selector</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;             --&gt;建议为选择器中的属性 `<span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>` 添加双引号</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">15px</span>;     --&gt;每条声明语句的 `:` 后应该插入一个空格</span><br><span class="line"> margin-bottom: <span class="number">15px</span>; </span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment">   不要在 `rgb()`、`rgba()`、`hsl()`、`hsla()` 或 `rect()` 值的内部的逗号后面插入空格</span></span><br><span class="line"><span class="comment">   对于属性值或颜色参数，省略小于 1 的小数前面的 0</span></span><br><span class="line"><span class="comment">   */</span>  </span><br><span class="line"> <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment">   所有声明语句都应当以分号结尾.后一条声明语句后面的分号是可选的,但略这个分号,你的代码可能更易出错</span></span><br><span class="line"><span class="comment">   对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#ccc</span>, inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#fff</span>; </span><br><span class="line">&gt;&#125;       --&gt;声明块的右花括号应当单独成行</span><br></pre></td></tr></table></figure></blockquote><h3 id="2、声明顺序"><a href="#2、声明顺序" class="headerlink" title="2、声明顺序"></a>2、声明顺序</h3><blockquote><p>相关的属性声明应当归为一组，并按照下面的顺序排列：</p><blockquote><ol><li>Positioning  –&gt;由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式,因此排在首位</li><li>Box model  –&gt;盒模型排在第二位，因为它决定了组件的尺寸和位置。</li><li>Typographic  –&gt;文字类</li><li>Visual     –&gt;其他属性只是影响组件的<em>内部（inside）</em>或者是不影响前两组属性，因此排在后面。</li></ol></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="selector-class">.declaration-order</span> &#123;</span><br><span class="line"> <span class="comment">/* Positioning 定位之类*/</span></span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Box-model 盒模型*/</span></span><br><span class="line"> <span class="attribute">display</span>: block;</span><br><span class="line"> <span class="attribute">float</span>: right;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Typography 排版印刷类 */</span></span><br><span class="line"> <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">&quot;Helvetica Neue&quot;</span>, sans-serif;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Visual 视觉类 */</span></span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Misc 其他混杂类 */</span></span><br><span class="line"> <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3、尽量不要使用-import-引入css文件"><a href="#3、尽量不要使用-import-引入css文件" class="headerlink" title="3、尽量不要使用 @import 引入css文件"></a>3、尽量不要使用 <code>@import</code> 引入css文件</h3><blockquote><p>与 <code>&lt;link&gt;</code> 标签相比，<code>@import</code> 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。替代办法有以下几种：</p><ul><li>使用多个 <code>&lt;link&gt;</code> 元素</li><li>通过 Sass 或 Less 类似的 CSS 预处理器将多个 CSS 文件编译为一个文件</li><li>通过 Rails、Jekyll 或其他系统中提供过 CSS 文件合并功能</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 使用 link 元素 --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;core.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">&lt;!-- 应避免的 @imports --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="keyword">@import</span> url(<span class="string">&quot;more.css&quot;</span>);</span></span><br><span class="line"><span class="language-css">&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4、媒体查询（Media-query）的位置"><a href="#4、媒体查询（Media-query）的位置" class="headerlink" title="4、媒体查询（Media query）的位置"></a>4、媒体查询（Media query）的位置</h3><blockquote><p>将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘(同时也会增大维护力度)</p></blockquote><h3 id="5、带前缀的属性"><a href="#5、带前缀的属性" class="headerlink" title="5、带前缀的属性"></a>5、带前缀的属性</h3><blockquote><p>当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/* 带前缀的属性 */</span></span><br><span class="line">&gt;<span class="selector-class">.selector</span> &#123;</span><br><span class="line"> -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">         <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="6、单行规则声明"><a href="#6、单行规则声明" class="headerlink" title="6、单行规则声明"></a>6、单行规则声明</h3><blockquote><p>对于<strong>只包含一条声明</strong>的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。</p><p>这样做的关键因素是为了错误检测 –-&gt; 例如，CSS 校验器指出在 xxx 行有语法错误。如果是单行单条声明，你就不会忽略这个错误；如果是单行多条声明的话，你就要仔细分析避免漏掉错误了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/* 一行上的单个声明,这种直接放在一行即可 */</span></span><br><span class="line">&gt;<span class="selector-class">.span1</span> &#123; <span class="attribute">width</span>: <span class="number">60px</span>; &#125;</span><br><span class="line">&gt;<span class="selector-class">.span2</span> &#123; <span class="attribute">width</span>: <span class="number">140px</span>; &#125;</span><br><span class="line">&gt;<span class="selector-class">.span3</span> &#123; <span class="attribute">width</span>: <span class="number">220px</span>; &#125;</span><br><span class="line">&gt;<span class="selector-class">.icon</span>           &#123; <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>; &#125;</span><br><span class="line">&gt;<span class="selector-class">.icon-home</span>      &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">20px</span>; &#125;</span><br><span class="line">&gt;<span class="selector-class">.icon-account</span>   &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">40px</span>; &#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/* 多个声明，需要将样式分行 */</span></span><br><span class="line">&gt;<span class="selector-class">.sprite</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: inline-block;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./hong.png</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="7、简写形式的属性"><a href="#7、简写形式的属性" class="headerlink" title="7、简写形式的属性"></a>7、简写形式的属性</h3><blockquote><p>在需要显示地设置所有值的情况下，应当尽量限制使用简写形式的属性声明。常见的滥用简写属性声明的情况如下</p><blockquote><ul><li><code>padding</code></li><li><code>margin</code></li><li><code>font</code></li><li><code>background</code></li><li><code>border</code></li><li><code>border-radius</code></li></ul></blockquote><p>大部分情况下，我们不需要为简写形式的属性声明指定所有值。例如，HTML 的 heading 元素只需要设置上、下边距（margin）的值，因此，在必要的时候，只需覆盖这两个值就可以。过度使用简写形式的属性声明会导致代码混乱，并且会对属性值带来不必要的覆盖从而引起意外的副作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/* 不好的例子 */</span></span><br><span class="line">&gt;<span class="selector-class">.element</span> &#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;  --&gt; 实际上只要 单独指定 `<span class="attribute">margin-bottom</span>: <span class="number">10px</span>` 即可;这样可能会导致覆盖上、水平方向的样式被覆盖</span><br><span class="line"> <span class="attribute">background</span>: red;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span>;  --有时候简化实际上反而不易理解,像这种可以不简化</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/* 好的例子 */</span></span><br><span class="line">&gt;<span class="selector-class">.element</span> &#123;</span><br><span class="line"> <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">background-color</span>: red;</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line"> <span class="attribute">border-top-left-radius</span>: <span class="number">3px</span>;</span><br><span class="line"> <span class="attribute">border-top-right-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>**正好趁着这个机会补充梳理下简写属性的知识点 ** –&gt;查阅资料 : MDN的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties"><code>CSS 的简写属性</code></a>; </p></blockquote><h4 id="①简写属性-的举🌰"><a href="#①简写属性-的举🌰" class="headerlink" title="①简写属性 的举🌰"></a>①简写属性 的举🌰</h4><blockquote><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background"><code>background</code></a> 属性就是一个简写属性，它可以定义 </li></ol><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-color"><code>background-color</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-image"><code>background-image</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-repeat"><code>background-repeat</code></a> </li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-position"><code>background-position</code></a> </li></ul><ol start="2"><li>类似地，最常见的字体相关的属性可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font"><code>font</code></a> 的简写，</li><li>盒子（box）各方向的外边距（margin） 可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin"><code>margin</code></a> 这个简写。</li></ol></blockquote><h4 id="②-棘手的边界情况"><a href="#②-棘手的边界情况" class="headerlink" title="② 棘手的边界情况"></a>② 棘手的边界情况</h4><blockquote><p>虽然它们使用起来非常方便，但在使用时，仍需牢记一些边界情况：</p></blockquote><h5 id="a-没有指定的值会被设置为它的初始值-实际上将会覆盖之前设置的值"><a href="#a-没有指定的值会被设置为它的初始值-实际上将会覆盖之前设置的值" class="headerlink" title="a) 没有指定的值会被设置为它的初始值,实际上将会覆盖之前设置的值"></a>a) 没有指定的值会被设置为它的初始值,实际上将会覆盖之前设置的值</h5><blockquote><p>没有指定的值会被设置为它的初始值。这听起来似乎本来就很合理的样子，但这确实意味着，它将会覆盖之前设置的值。因此：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attribute">background-color</span>: red;</span><br><span class="line">&gt;<span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/bg.gif</span>) no-repeat top right;</span><br></pre></td></tr></table></figure><p>以上样式是将 [ background-color ] 的默认值 <code>transparent</code>，而不会将 background 的 color 值设置为 <code>red</code></p><p>因为第二条规则优先。</p></blockquote><h5 id="b-关键词-inherit-只可以应用于单独属性"><a href="#b-关键词-inherit-只可以应用于单独属性" class="headerlink" title="b) 关键词 inherit 只可以应用于单独属性"></a>b) 关键词 inherit 只可以应用于单独属性</h5><blockquote><ul><li>关键词 inherit 只可以应用于单独属性（individual properties）</li><li>如果应用于一个简写属性（shorthand property），则必须整体应用，而能对简写属性值的每一个部分单独应用。</li><li>由于单独属性的漏掉的值会被它们的初始值（initial value）替代，因此不可能允许单个属性通过省略继承的 。</li><li>这意味着让一个属性的值使用继承值的唯一方法就是使用值是 inherit 的普通属性（longhand property）。</li></ul></blockquote><h5 id="c-简写属性不试图强制它们替代属性的值的特定顺序"><a href="#c-简写属性不试图强制它们替代属性的值的特定顺序" class="headerlink" title="c) 简写属性不试图强制它们替代属性的值的特定顺序"></a>c) 简写属性不试图强制它们替代属性的值的特定顺序</h5><blockquote><ol><li>简写属性不试图强制它们替代属性的值的特定顺序。</li><li>这适用于当这些属性使用不同类型的值时，因为这个时候顺序并不重要。</li><li>但当几个属性可以设置相同值的时候，就没那么简单了。处理这些情况分以下几种类型:</li></ol><blockquote><h6 id="处理和盒子（box）边界（edge）相关的属性时-比如-border-style、margin-或者-padding，"><a href="#处理和盒子（box）边界（edge）相关的属性时-比如-border-style、margin-或者-padding，" class="headerlink" title="处理和盒子（box）边界（edge）相关的属性时,比如 border-style、margin 或者 padding，"></a>处理和盒子（box）边界（edge）相关的属性时,比如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-style"><code>border-style</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin"><code>margin</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding"><code>padding</code></a>，</h6></blockquote><ul><li><strong>1个值的语法：</strong><code>border-width: 1em</code> —&gt; 这一个值表示所有的边框宽度,margin、padding同理</li><li><strong>2个值的语法：</strong><code>border-width: 1em 2em</code> — 第一个值表示垂直方向的，即 top 和 bottom；第二个值表示水平方向的，即 left 和 right</li><li><strong>3个值的语法：</strong><code>border-width: 1em 2em 3em</code> — 第一个值表示 top；第二个值表示水平方向的，即 left 和 right； 第三个值表示 bottom</li><li><strong>4个值的语法：</strong><code>border-width: 1em 2em 3em 4em</code> — 这四个值分别表示 top、right、bottom、left，总是按此顺序，即从 top 开始的顺时针顺序（Top-Right-Bottom-Left 首字母与英文单词 trouble 的顺序一致：TRBL）</li><li>可以发现,实际上1~4个参数不同时,代表的含义完全不同</li></ul><blockquote><h6 id="同样，在处理和盒子的角相关的属性时，比如-border-radius"><a href="#同样，在处理和盒子的角相关的属性时，比如-border-radius" class="headerlink" title="同样，在处理和盒子的角相关的属性时，比如 border-radius"></a>同样，在处理和盒子的角相关的属性时，比如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius"><code>border-radius</code></a></h6></blockquote><ul><li><strong>1个值的语法：</strong><code>border-radius: 1em</code> — 这一个值表示所有的表框角度的半径</li><li><strong>2个值的语法：</strong><code>border-radius: 1em 2em</code> — 第一个值表示 top-left 和 bottom-right 方向的角；第二个值表示 top-right 和 bottom-left 方向的角</li><li><strong>3个值的语法：</strong><code>border-radius: 1em 2em 3em</code> — 第一个值表示 top-left 方向的角 ，第二个值表示top-right 和 bottom-left 方向的角，第三个值表示 bottom-right 方向的角</li><li><strong>4个值的语法：</strong><code>border-radius: 1em 2em 3em 4em</code> — 这四个值分别表示top-left、 top-right、 bottom-right 、bottom-left 方向的角。总是按此顺序，即从top-left开始的顺时针顺序</li></ul></blockquote><h4 id="③-Background-属性"><a href="#③-Background-属性" class="headerlink" title="③  Background 属性"></a>③  Background 属性</h4><blockquote><p>background 有以下属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">&gt;<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/bg.gif</span>);</span><br><span class="line">&gt;<span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&gt;<span class="attribute">background-position</span>: top right;</span><br></pre></td></tr></table></figure><p>可以简写成一行声明：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attribute">background</span>: <span class="number">#000</span> <span class="built_in">url</span>(<span class="string">images/bg.gif</span>) no-repeat top right;</span><br></pre></td></tr></table></figure><p>简写的形式实际上等价于以上普通属性再加上 <code>background-attachment: scroll</code> 以及 CSS3 中的一些附加属性。</p></blockquote><h4 id="④-Font-属性"><a href="#④-Font-属性" class="headerlink" title="④ Font 属性"></a>④ Font 属性</h4><blockquote><p>下面的声明：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attribute">font-style</span>: italic;</span><br><span class="line">&gt;<span class="attribute">font-weight</span>: bold;</span><br><span class="line">&gt;<span class="attribute">font-size</span>: .<span class="number">8em</span>;</span><br><span class="line">&gt;<span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">&gt;<span class="attribute">font-family</span>: Arial, sans-serif;</span><br></pre></td></tr></table></figure><p>可以简写成下面的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attribute">font</span>: italic bold .<span class="number">8em</span>/<span class="number">1.2</span> Arial, sans-serif;</span><br></pre></td></tr></table></figure><p>这个简写声明实际上等价于以上普通属性再加上 <code>font-variant: normal</code> 和 <code>font-size-adjust: none</code> (CSS2.0 / CSS3)，<code>font-stretch: normal</code> (CSS3)。</p></blockquote><h4 id="⑤-Border-属性"><a href="#⑤-Border-属性" class="headerlink" title="⑤ Border 属性"></a>⑤ Border 属性</h4><blockquote><p>对于 border 来说，宽度、颜色和类型是可以被简写到一个声明里的。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">&gt;<span class="attribute">border-style</span>: solid;</span><br><span class="line">&gt;<span class="attribute">border-color</span>: <span class="number">#000</span>;</span><br></pre></td></tr></table></figure><p>可以简写成：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="⑥-Margin-和-Padding-属性"><a href="#⑥-Margin-和-Padding-属性" class="headerlink" title="⑥ Margin 和 Padding 属性"></a>⑥ Margin 和 Padding 属性</h4><blockquote><p>margin 和 padding 值的简写版本类似。下面的 CSS 声明：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&gt;<span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&gt;<span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&gt;<span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br></pre></td></tr></table></figure><p>和下面的声明是一样的（注意，值是从 top 顺时针开始的：top、right、bottom、接着是 left）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">5px</span>;</span><br></pre></td></tr></table></figure><blockquote><h6 id="Margin-对于多个值有以下的简写规则：-重要"><a href="#Margin-对于多个值有以下的简写规则：-重要" class="headerlink" title="Margin 对于多个值有以下的简写规则： 重要"></a>Margin 对于多个值有以下的简写规则： <code>重要</code></h6></blockquote><ul><li>当只有<strong>一个</strong>值声明时，该值会用于所有<strong>四个</strong>值。</li><li>当只有<strong>两个</strong>值声明时，第一个值用于<strong>上边距</strong>和<strong>下边距</strong>，第二个值用于<strong>左边距</strong>和<strong>右边距</strong>。</li><li>当有三个值声明时，第一个值用于<strong>上边距</strong>，第二个值用于<strong>左边距</strong>和<strong>右边距</strong>，第三个值用于<strong>下边距。</strong></li><li>当有四个值声明时，其会按顺序用于上、右、下、左边距（按顺时针）。</li></ul></blockquote><h3 id="8、注释"><a href="#8、注释" class="headerlink" title="8、注释"></a>8、注释</h3><blockquote><ul><li>代码是写给自己看的,同时也是写给同事看的. 我们要确保我们的代码能够自描述、注释良好并且易于他人理解</li><li>好的代码注释应该是能够传达上下文关系以及代码目的的</li><li>而不是一味地重申一下类名或者模块名,说的就是你啊 铁子</li><li>对于较长的注释，务必书写完整的句子；对于一般性注解，可以书写简洁的短语。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/* 不好的栗子 */</span></span><br><span class="line">&gt;<span class="comment">/* Modal header */</span></span><br><span class="line">&gt;<span class="selector-class">.modal-header</span> &#123;</span><br><span class="line"> ...</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/* 好的栗子 */</span></span><br><span class="line">&gt;<span class="comment">/* 为.modal-title和.modal-close包装元素  */</span></span><br><span class="line">&gt;<span class="selector-class">.modal-header</span> &#123;</span><br><span class="line"> ...</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><blockquote><h6 id="一个推荐的注释写法"><a href="#一个推荐的注释写法" class="headerlink" title="一个推荐的注释写法"></a>一个推荐的注释写法</h6></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/* Header */</span></span><br><span class="line">&gt;内容区</span><br><span class="line">&gt;<span class="comment">/* End Header */</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="9、class命名"><a href="#9、class命名" class="headerlink" title="9、class命名"></a>9、class命名</h3><blockquote><ul><li>class 名称中只能出现小写字符和破折号（dashe）（<strong>不是下划线，也不是驼峰命名法</strong>）。破折号应当用于相关 class 的命名（类似于命名空间）（例如，<code>.btn</code> 和 <code>.btn-danger</code>）。</li><li>避免过度任意的简写。<code>.btn</code> 代表 <em>button</em>，但是 <code>.s</code> 不能表达任何意思。</li><li>class 名称应当尽可能短，并且意义明确。</li><li>使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式的名称。</li><li>基于最近的父 class 或基本（base） class 作为新 class 的前缀。</li><li>使用 <code>.js-*</code> class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/* 不好的🌰 */</span></span><br><span class="line">&gt;<span class="selector-class">.t</span> &#123; ... &#125;</span><br><span class="line">&gt;<span class="selector-class">.red</span> &#123; ... &#125;</span><br><span class="line">&gt;<span class="selector-class">.header</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/* 好的🌰 */</span></span><br><span class="line">&gt;<span class="selector-class">.tweet</span> &#123; ... &#125;</span><br><span class="line">&gt;<span class="selector-class">.important</span> &#123; ... &#125;</span><br><span class="line">&gt;<span class="selector-class">.tweet-header</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="10、选择器"><a href="#10、选择器" class="headerlink" title="10、选择器"></a>10、选择器</h3><blockquote><ul><li>对于通用元素使用 class ，这样利于渲染性能的优化。</li><li>对于经常出现的组件，避免使用属性选择器（例如，<code>[class^=&quot;...&quot;]</code>）。浏览器的性能会受到这些因素的影响。</li><li>选择器要尽可能短，并且尽量限制组成选择器的元素个数，建议不要超过 3 。</li><li><strong>只有</strong>在必要的时候才将 class 限制在最近的父元素内（也就是后代选择器）（例如，不使用带前缀的 class 时 – 前缀类似于命名空间）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/* 不好的🌰 */</span></span><br><span class="line">&gt;<span class="selector-tag">span</span> &#123; ... &#125;</span><br><span class="line">&gt;<span class="selector-class">.page-container</span> <span class="selector-id">#stream</span> <span class="selector-class">.stream-item</span> <span class="selector-class">.tweet</span> <span class="selector-class">.tweet-header</span> <span class="selector-class">.username</span> &#123; ... &#125;</span><br><span class="line">&gt;<span class="selector-class">.avatar</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/* 好的🌰 */</span></span><br><span class="line">&gt;<span class="selector-class">.avatar</span> &#123; ... &#125;</span><br><span class="line">&gt;<span class="selector-class">.tweet-header</span> <span class="selector-class">.username</span> &#123; ... &#125;</span><br><span class="line">&gt;<span class="selector-class">.tweet</span> <span class="selector-class">.avatar</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="11、代码组织"><a href="#11、代码组织" class="headerlink" title="11、代码组织"></a>11、代码组织</h3><blockquote><ul><li>以组件为单位组织代码段。</li><li>制定一致的注释规范。</li><li>使用一致的空白符将代码分隔成块，这样利于扫描较大的文档。</li><li>如果使用了多个 CSS 文件，将其按照组件而非页面的形式分拆，因为页面会被重组，而组件只会被移动。</li></ul></blockquote><h3 id="12、编辑器配置"><a href="#12、编辑器配置" class="headerlink" title="12、编辑器配置"></a>12、编辑器配置</h3><blockquote><p>将你的编辑器按照下面的配置进行设置，以避免常见的代码不一致和差异：</p><ul><li>用两个空格代替制表符（soft-tab 即用空格代表 tab 符）。</li><li>保存文件时，删除尾部的空白符。</li><li>设置文件编码为 UTF-8。</li><li>在文件结尾添加一个空白行。</li></ul></blockquote><h2 id="Ⅱ-一些关于W3C-CSS标准的经验总结"><a href="#Ⅱ-一些关于W3C-CSS标准的经验总结" class="headerlink" title="Ⅱ - 一些关于W3C CSS标准的经验总结"></a>Ⅱ - 一些关于<strong>W3C CSS标准</strong>的经验总结</h2><blockquote><ol><li>少用偏门。类似break-word断行，z-index手动分层，还有像垂直对齐等等这些偏门CSS最好少用，由于不一定所有浏览器都支持，而且极难通过W3C检测。</li><li>center不是float的值。很多老手都会把center误认为是float的值，而偏偏不是如此。center只是text-align的值。</li><li>对齐不能包括两个值。很多老手会在float或者text-align中填写两个值，比如：float:left top。这是不允许的，浏览器也无法识别。</li><li>滚动条颜色最好不要自定义。很多浏览器不能正常识别自定义颜色的滚动条，况且很多自定义颜色都不能通过W3C。</li><li>单独滚动条设置。如今经常使用overflow-x（横向滚动条）或者overflow-y（纵向滚动条），在设置这个的时候经常会发现并不是所有的客户端上都无效果，大家在设置的时候最好在body和html同时进行设置。然而这个CSS也不是CSS2.1支持的(CSS2.1支持overflow，同时定义横纵滚动条)，直到CSS3才支持这种定义方式。尽量少用。</li><li>background和color颜色相反会遭到警告。</li></ol></blockquote><h2 id="Ⅲ-一些容易忽略的细节"><a href="#Ⅲ-一些容易忽略的细节" class="headerlink" title="Ⅲ - 一些容易忽略的细节"></a>Ⅲ - 一些容易忽略的细节</h2><h3 id="1、连字符CSS选择器命名规范"><a href="#1、连字符CSS选择器命名规范" class="headerlink" title="1、连字符CSS选择器命名规范"></a>1、连字符CSS选择器命名规范</h3><blockquote><p>1.长名称或词组可以使用中横线来为选择器命名。</p><p>2.不建议使用“_”下划线来命名CSS选择器，为什么呢？</p><ul><li>输入的时候少按一个shift键；</li><li>浏览器兼容问题 （比如使用_tips的选择器命名，在IE6是无效的）</li><li>能良好区分JavaScript变量命名（JS变量命名是用“_”）</li></ul><p>这里有一篇破折号与下划线的详细讨论 中文篇：<a href="http://www.cnblogs.com/kaiye/archive/2011/06/13/3039046.html">点击查看</a></p></blockquote><h3 id="2、不要随意使用Id"><a href="#2、不要随意使用Id" class="headerlink" title="2、不要随意使用Id"></a>2、不要随意使用Id</h3><blockquote><ul><li>id在JS是唯一的，不能多次使用</li><li>而使用class类选择器却可以重复使用，另外id的优先级优先与class</li><li>所以id应该按需使用，而不能滥用。</li></ul></blockquote><h3 id="3、可以为选择器添加状态前缀"><a href="#3、可以为选择器添加状态前缀" class="headerlink" title="3、可以为选择器添加状态前缀"></a>3、可以为选择器添加状态前缀</h3><blockquote><p>有时候可以给选择器添加一个表示状态的前缀，让语义更明了，比如下面是添加了“.is-”前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="selector-class">.widthView</span> &#123;&#125;</span><br><span class="line">&gt;<span class="comment">/* 可以加个状态 */</span></span><br><span class="line">&gt;<span class="selector-class">.is-widthView</span> &#123;&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Ⅳ-CSS命名规范"><a href="#Ⅳ-CSS命名规范" class="headerlink" title="Ⅳ - CSS命名规范"></a>Ⅳ - CSS命名规范</h2><blockquote><p>命名永远是程序员的痛啊!!! 面对如山海般的代码,每天命名那么多变量名,实在词穷,所以就有一些’不法分子’取了各种稀奇古怪的名字,实在是让代码阅读性一降再降</p><p>这里也只能罗列出一些常见命名规则,多少能在命名的时候有所参照,防止一个意思取出了十几种名字</p></blockquote><h3 id="1、常见的CSS命名规则"><a href="#1、常见的CSS命名规则" class="headerlink" title="1、常见的CSS命名规则"></a>1、常见的CSS命名规则</h3><blockquote><ul><li>头：header</li><li>内容：content/container</li><li>尾：footer</li><li>导航：nav</li><li>侧栏：sidebar</li><li>栏目：column</li><li>页面外围控制整体佈局宽度：wrapper</li><li>左右中：left right center</li><li>登录条：loginbar</li><li>标志：logo</li><li>广告：banner</li><li>页面主体：main</li><li>热点：hot</li><li>新闻：news</li><li>下载：download</li><li>子导航：subnav</li><li>菜单：menu</li><li>子菜单：submenu</li><li>搜索：search</li><li>友情链接：friendlink</li><li>页脚：footer</li><li>版权：copyright</li><li>滚动：scroll</li><li>内容：content</li><li>标签：tags</li><li>文章列表：list</li><li>提示信息：msg</li><li>小技巧：tips</li><li>栏目标题：title</li><li>加入：joinus</li><li>指南：guide</li><li>服务：service</li><li>注册：regsiter</li><li>状态：status</li><li>投票：vote</li><li>合作伙伴：partner</li></ul></blockquote><h3 id="2、Id的命名"><a href="#2、Id的命名" class="headerlink" title="2、Id的命名"></a>2、Id的命名</h3><h4 id="①-页面结构"><a href="#①-页面结构" class="headerlink" title="① 页面结构"></a>① <strong>页面结构</strong></h4><blockquote><ul><li>容器: container</li><li>页头：header</li><li>内容：content/container</li><li>页面主体：main</li><li>页尾：footer</li><li>导航：nav</li><li>侧栏：sidebar</li><li>栏目：column</li><li>页面外围控制整体布局宽度：wrapper</li><li>左右中：left right center</li></ul></blockquote><h4 id="②-导航"><a href="#②-导航" class="headerlink" title="② 导航"></a>② 导航</h4><blockquote><ul><li>导航：nav</li><li>主导航：mainnav</li><li>子导航：subnav</li><li>顶导航：topnav</li><li>边导航：sidebar</li><li>左导航：leftsidebar</li><li>右导航：rightsidebar</li><li>菜单：menu</li><li>子菜单：submenu</li><li>标题: title</li><li>摘要: summary</li></ul></blockquote><h4 id="③-功能"><a href="#③-功能" class="headerlink" title="③ 功能"></a>③ <strong>功能</strong></h4><blockquote><ul><li>标志：logo</li><li>广告：banner</li><li>登陆：login</li><li>登录条：loginbar</li><li>注册：register</li><li>搜索：search</li><li>功能区：shop</li><li>标题：title</li><li>加入：joinus</li><li>状态：status</li><li>按钮：btn</li><li>滚动：scroll</li><li>标签页：tab</li><li>文章列表：list</li><li>提示信息：msg</li><li>当前的: current</li><li>小技巧：tips</li><li>图标: icon</li><li>注释：note</li><li>指南：guild</li><li>服务：service</li><li>热点：hot</li><li>新闻：news</li><li>下载：download</li><li>投票：vote</li><li>合作伙伴：partner</li><li>友情链接：link</li><li>版权：copyright</li></ul></blockquote><h3 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h3><blockquote><p>1.一律小写;<br>2.尽量用英文;<br>3.不加下划线;<br>4.尽量不缩写，除非一看就明白的单词。</p></blockquote><h3 id="4、CSS样式表文件命名"><a href="#4、CSS样式表文件命名" class="headerlink" title="4、CSS样式表文件命名"></a>4、CSS样式表文件命名</h3><blockquote><ul><li>主要的 master.css</li><li>模块 module.css</li><li>基本共用 base.css</li><li>布局、版面 layout.css</li><li>主题 themes.css</li><li>专栏 columns.css</li><li>文字 font.css</li><li>表单 forms.css</li><li>补丁 mend.css</li><li>打印 print.css</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端代码规范 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Echart笔记</title>
      <link href="/2022/10/12/Echart%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/12/Echart%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Ⅰ-实现Echart折线图防抖自适应"><a href="#Ⅰ-实现Echart折线图防抖自适应" class="headerlink" title="Ⅰ-实现Echart折线图防抖自适应"></a>Ⅰ-实现Echart折线图防抖自适应</h2><blockquote><ol><li><p>当我需要让Echart的折线图根据当前页面大小发生变化,并且进行防抖处理节约性能</p></li><li><p>分析:</p><ol><li>利用<code>柯里化</code>与<code>高阶函数</code>的知识点写防抖函数</li><li>利用<code>Echart</code>的 <code>resize()</code>刷新函数进行适配</li></ol></li><li><p>代码示例</p><ol><li>防抖函数代码</li></ol></li></ol> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 防抖进行echart自适应</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> chartDom  传入 echarts.init(chartDom);生成的对象</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">debounceEchartResize = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timers </span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">chartDom,interval:number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timers) <span class="built_in">clearTimeout</span>(timers);</span><br><span class="line">    timers = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 只执行最后一个定时器的 结果</span></span><br><span class="line">      chartDom.<span class="title function_">resize</span>()</span><br><span class="line">    &#125;, interval); <span class="comment">// 推迟 300 ms 在执行resize 效果 </span></span><br><span class="line">    <span class="comment">// return timer</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>js调用 –&gt;本代码在React hooks 中使用</li></ol> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; tool &#125; <span class="keyword">from</span> <span class="string">&#x27;~/utils/Tool&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SaleSumInfo</span> = (<span class="params">props: IProps</span>) =&gt; &#123;</span><br><span class="line"> <span class="comment">//柯里化调用防抖自适应,在此处第一次调用,会生成timer,这样就不会因为在副作用函数中</span></span><br><span class="line">  <span class="comment">//因为重复渲染而重置</span></span><br><span class="line">  <span class="keyword">const</span> debounceResize = tool.<span class="title function_">debounceEchartResize</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//副作用函数,作用是react的生命周期</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> chartDom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(chartDom);</span><br><span class="line">     <span class="comment">//形成闭包,同时防止监听事件运行两次回调函数</span></span><br><span class="line">     <span class="keyword">const</span> <span class="title function_">resizeFunc</span>=(<span class="params"></span>)=&gt;<span class="title function_">debounceResize</span>(myChart,<span class="number">300</span>)</span><br><span class="line">     <span class="comment">//创建监听事件</span></span><br><span class="line">     <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,resizeFunc) </span><br><span class="line">      <span class="comment">//销毁的生命周期 进行监听卸载</span></span><br><span class="line">   <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>,resizeFunc)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//渲染函数</span></span><br><span class="line">    <span class="keyword">return</span> ()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>)</p>]]></content>
      
      
      <categories>
          
          <category> 实用组件库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2022/10/12/git%E4%B8%8Evim%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
      <url>/2022/10/12/git%E4%B8%8Evim%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="常用Git命令总结"><a href="#常用Git命令总结" class="headerlink" title="常用Git命令总结"></a>常用Git命令总结</h1><ul><li>git config –global user.name “你的名字” 让你全部的Git仓库绑定你的名字</li><li>git config –global user.email “你的邮箱” 让你全部的Git仓库绑定你的邮箱</li><li>git init 初始化你的仓库</li><li>git add . 把工作区的文件全部提交到暂存区</li><li>git add ./<file>/ 把工作区的<file>文件提交到暂存区</li><li>git commit -m “xxx” 把暂存区的所有文件提交到仓库区，暂存区空空荡荡</li><li>git remote add origin <a href="https://github.com/name/name_cangku.git">https://github.com/name/name_cangku.git</a> 把本地仓库与远程仓库连接起来</li><li>git push -u origin master 把仓库区的主分支master提交到远程仓库里</li><li>git push -u origin &lt;其他分支&gt; 把其他分支提交到远程仓库</li><li>git status查看当前仓库的状态</li><li>git diff 查看文件修改的具体内容</li><li>git log 显示从最近到最远的提交历史  git log –pretty=oneline(更简洁的方式显示)</li><li>git clone + 仓库地址下载克隆文件</li><li>git reset –hard + 版本号 回溯版本，版本号在commit的时候与master跟随在一起</li><li>git reflog 显示命令历史</li><li>git checkout – <file> 撤销命令，用版本库里的文件替换掉工作区的文件。我觉得就像是Git世界的ctrl + z</li><li>git rm 删除版本库的文件</li><li>git branch 查看当前所有分支</li><li>git branch &lt;分支名字&gt; 创建分支</li><li>git checkout &lt;分支名字&gt; 切换到分支</li><li>git merge &lt;分支名字&gt; 合并分支</li><li>git branch -d &lt;分支名字&gt; 删除分支,有可能会删除失败，因为Git会保护没有被合并的分支</li><li>git branch -D + &lt;分支名字&gt; 强行删除，丢弃没被合并的分支</li><li>git log –graph 查看分支合并图</li><li>git merge –no-ff &lt;分支名字&gt; 合并分支的时候禁用Fast forward模式,因为这个模式会丢失分支历史信息</li><li>git stash 当有其他任务插进来时，把当前工作现场“存储”起来,以后恢复后继续工作</li><li>git stash list 查看你刚刚“存放”起来的工作去哪里了</li><li>git stash apply 恢复却不删除stash内容</li><li>git stash drop 删除stash内容</li><li>git stash pop 恢复的同时把stash内容也删了</li><li>git remote 查看远程库的信息，会显示origin，远程仓库默认名称为origin</li><li>git remote -v 显示更详细的信息</li><li>git pull 把最新的提交从远程仓库中抓取下来，在本地合并,和git push相反</li><li>git rebase 把分叉的提交历史“整理”成一条直线，看上去更直观</li><li>git tag 查看所有标签，可以知道历史版本的tag</li><li>git tag <name> 打标签，默认为HEAD。比如git tag v1.0</li><li>git tag <tagName> &lt;版本号&gt; 把版本号打上标签，版本号就是commit时，跟在旁边的一串字母数字</li><li>git show <tagName> 查看标签信息</li><li>git tag -a <tagName> -m “&lt;说明&gt;” 创建带说明的标签。-a指定标签名，-m指定说明文字</li><li>git tag -d <tagName> 删除标签</li><li>git push origin <tagname> 推送某个标签到远程</li><li>git push origin –tags 一次性推送全部尚未推送到远程的本地标签</li><li>git push origin :refs/tags/<tagname> 删除远程标签<tagname></li><li>git config –global color.ui true 让Git显示颜色，会让命令输出看起来更醒目</li><li>git add -f <file> 强制提交已忽略的的文件</li><li>git check-ignore -v <file> 检查为什么Git会忽略该文件</li></ul><h1 id="vim常用指令"><a href="#vim常用指令" class="headerlink" title="vim常用指令"></a>vim常用指令</h1><h2 id="VIM-进入和退出命令"><a href="#VIM-进入和退出命令" class="headerlink" title="VIM 进入和退出命令"></a>VIM 进入和退出命令</h2><blockquote><p>常用命令是ESC，然后:wq（保存并退出），:q!(不保存并强制退出），i进入vim模式。另外还有其它的，我可能都不会用到。。。<br>按ESC键 跳到命令模式，然后：</p></blockquote><ol><li><strong>:w 保存文件但不退出vi</strong></li><li><strong>:w file 将修改另外保存到file中，不退出vi</strong></li><li><strong>:w! 强制保存，不推出vi</strong></li><li><strong>:wq 保存文件并退出vi</strong></li><li><strong>:wq! 强制保存文件，并退出vi</strong></li><li><strong>q: 不保存文件，退出vi</strong></li><li><strong>:q! 不保存文件，强制退出vi</strong></li><li><strong>:e! 放弃所有修改，从上次保存文件开始再编辑</strong></li></ol><h2 id="命令历史"><a href="#命令历史" class="headerlink" title="命令历史"></a>命令历史</h2><p>以:和/开头的命令都有历史纪录，可以首先键入:或/然后按上下箭头来选择某个历史命令。</p><h2 id="启动vim"><a href="#启动vim" class="headerlink" title="启动vim"></a>启动vim</h2><p>在命令行窗口中输入以下命令即可</p><p>vim 直接启动vim</p><p>vim filename 打开vim并创建名为filename的文件</p><h2 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h2><p>打开单个文件</p><p>vim file</p><p>同时打开多个文件</p><p>vim file1 file2 file3 …</p><p>在vim窗口中打开一个新文件</p><p>:open file</p><p>在新窗口中打开文件</p><p>:split file</p><p>切换到下一个文件</p><p>:bn</p><p>切换到上一个文件</p><p>:bp</p><p>查看当前打开的文件列表，当前正在编辑的文件会用[]括起来。</p><p>:args</p><p>打开远程文件，比如ftp或者share folder</p><p>:e <a href="ftp://192.168.10.76/abc.txt">ftp://192.168.10.76/abc.txt</a></p><p>:e \qadrive\test\1.txt</p><h2 id="vim的模式"><a href="#vim的模式" class="headerlink" title="vim的模式"></a>vim的模式</h2><p>正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空<br>插入模式（按i键进入） 左下角显示–INSERT–<br>可视模式（不知道如何进入） 左下角显示–VISUAL–</p><h2 id="导航命令"><a href="#导航命令" class="headerlink" title="导航命令"></a>导航命令</h2><p>% 括号匹配</p><h2 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h2><p>i 在当前位置生前插入</p><p>I 在当前行首插入</p><p>a 在当前位置后插入</p><p>A 在当前行尾插入</p><p>o 在当前行之后插入一行</p><p>O 在当前行之前插入一行</p><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><p>/text　　查找text，按n健查找下一个，按N健查找前一个。</p><p>?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个。</p><p>vim中有一些特殊字符在查找时需要转义　　.*[]^%/?~$</p><p>:set ignorecase　　忽略大小写的查找</p><p>:set noignorecase　　不忽略大小写的查找</p><p>查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。</p><p>:set hlsearch　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。</p><p>:set nohlsearch　　关闭高亮搜索显示</p><p>:nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。</p><p>:set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。</p><p>:set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。</p><h2 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h2><p>ra 将当前字符替换为a，当期字符即光标所在字符。</p><p>s/old/new/ 用old替换new，替换当前行的第一个匹配</p><p>s/old/new/g 用old替换new，替换当前行的所有匹配</p><p>%s/old/new/ 用old替换new，替换所有行的第一个匹配</p><p>%s/old/new/g 用old替换new，替换整个文件的所有匹配</p><p>:10,20 s/^/  /g 在第10行知第20行每行前面加四个空格，用于缩进。</p><p>ddp 交换光标所在行和其下紧邻的一行。</p><h2 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a>移动命令</h2><p>h 左移一个字符<br>l 右移一个字符，这个命令很少用，一般用w代替。<br>k 上移一个字符<br>j 下移一个字符<br>以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！<Esc>，这里的Esc是必须的，否则命令不生效。</p><p>w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。</p><p>b 向后移动一个单词 2b 向后移动2个单词</p><p>e，同w，只不过是光标停在单词尾部</p><p>ge，同b，光标停在单词尾部。</p><p>^ 移动到本行第一个非空白字符上。</p><p>0（数字0）移动到本行第一个字符上，</p><p><HOME> 移动到本行第一个字符。同0健。</p><p>$ 移动到行尾 3$ 移动到下面3行的行尾</p><p>gg 移动到文件头。 = [[</p><p>G（shift + g） 移动到文件尾。 = ]]</p><p>f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。</p><p>F 同f，反向查找。</p><p>跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。</p><p>Ctrl + e 向下滚动一行</p><p>Ctrl + y 向上滚动一行</p><p>Ctrl + d 向下滚动半屏</p><p>Ctrl + u 向上滚动半屏</p><p>Ctrl + f 向下滚动一屏</p><p>Ctrl + b 向上滚动一屏</p><h2 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h2><p>u 撤销（Undo）<br>U 撤销对整行的操作<br>Ctrl + r 重做（Redo），即撤销的撤销。</p><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><p>x 删除当前字符</p><p>3x 删除当前光标开始向后三个字符</p><p>X 删除当前字符的前一个字符。X=dh</p><p>dl 删除当前字符， dl=x</p><p>dh 删除前一个字符</p><p>dd 删除当前行</p><p>dj 删除上一行</p><p>dk 删除下一行</p><p>10d 删除当前行开始的10行。</p><p>D 删除当前字符至行尾。D=d$</p><p>d$ 删除当前字符之后的所有字符（本行）</p><p>kdgg 删除当前行之前所有行（不包括当前行）</p><p>jdG（jd shift + g）  删除当前行之后所有行（不包括当前行）</p><p>:1,10d 删除1-10行</p><p>:11,$d 删除11行及以后所有的行</p><p>:1,$d 删除所有行</p><p>J(shift + j)　　删除两行之间的空行，实际上是合并两行。</p><h2 id="拷贝和粘贴"><a href="#拷贝和粘贴" class="headerlink" title="拷贝和粘贴"></a>拷贝和粘贴</h2><p>yy 拷贝当前行</p><p>nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。</p><p>p 在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。</p><p>shift+p 在当前行前粘贴</p><p>:1,10 co 20 将1-10行插入到第20行之后。</p><p>:1,$ co $ 将整个文件复制一份并添加到文件尾部。</p><p>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制</p><p>ddp交换当前行和其下一行</p><p>xp交换当前字符和其后一个字符</p><h2 id="剪切命令"><a href="#剪切命令" class="headerlink" title="剪切命令"></a>剪切命令</h2><p>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切</p><p>ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴</p><p>:1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。</p><p>:1, 10 m 20 将第1-10行移动到第20行之后。</p><h2 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h2><p>:wq 保存并退出</p><p>ZZ 保存并退出</p><p>:q! 强制退出并忽略所有更改</p><p>:e! 放弃所有修改，并打开原来文件。</p><h2 id="窗口命令"><a href="#窗口命令" class="headerlink" title="窗口命令"></a>窗口命令</h2><p>:split或new 打开一个新窗口，光标停在顶层的窗口上</p><p>:split file或:new file 用新窗口打开文件</p><p>split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。</p><p>Ctrl+ww 移动到下一个窗口</p><p>Ctrl+wj 移动到下方的窗口</p><p>Ctrl+wk 移动到上方的窗口</p><p>关闭窗口</p><p>:close 最后一个窗口不能使用此命令，可以防止意外退出vim。</p><p>:q 如果是最后一个被关闭的窗口，那么将退出vim。</p><p>ZZ 保存并退出。</p><p>关闭所有窗口，只保留当前窗口</p><p>:only</p><p>录制宏</p><p>按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。</p><h2 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h2><p>:!command</p><p>:!ls 列出当前目录下文件</p><p>:!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。</p><p>:!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。</p><p>:suspend或Ctrl - Z 挂起vim，回到shell，按fg可以返回vim。</p><h2 id="注释命令"><a href="#注释命令" class="headerlink" title="注释命令"></a>注释命令</h2><p>perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入#</p><p>3,5 s/^/#/g 注释第3-5行</p><p>3,5 s/^#//g 解除3-5行的注释</p><p>1,$ s/^/#/g 注释整个文档。</p><p>:%s/^/#/g 注释整个文档，此法更快。</p><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>:help or F1 显示整个帮助<br>:help xxx 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。<br>:help ‘number’ Vim选项的帮助用单引号括起<br>:help <Esc> 特殊键的帮助用&lt;&gt;扩起<br>:help -t Vim启动参数的帮助用-<br>：help i_<Esc> 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式<br>帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回</p><h2 id="其他非编辑命令"><a href="#其他非编辑命令" class="headerlink" title="其他非编辑命令"></a>其他非编辑命令</h2><p>. 重复前一次命令</p><p>:set ruler?　　查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看</p><p>:scriptnames　　查看vim脚本文件的位置，比如.vimrc文件，语法文件及plugin等。</p><p>:set list 显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用set lcs=tab:&gt;-命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了expendtab，那么tab将被扩展为空格。</p><p>Vim教程<br>在Unix系统上<br>$ vimtutor<br>在Windows系统上<br>:help tutor</p><p>:syntax 列出已经定义的语法项<br>:syntax clear 清除已定义的语法规则<br>:syntax case match 大小写敏感，int和Int将视为不同的语法元素<br>:syntax case ignore 大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记整合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git详细笔记</title>
      <link href="/2022/10/12/Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/12/Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Git详细学习"><a href="#Git详细学习" class="headerlink" title="Git详细学习"></a>Git详细学习</h1><h1 id="Ⅰ-Git操作"><a href="#Ⅰ-Git操作" class="headerlink" title="Ⅰ-Git操作"></a>Ⅰ-Git操作</h1><h2 id="一、初始化"><a href="#一、初始化" class="headerlink" title="一、初始化"></a>一、初始化</h2><blockquote><p>该处是用来提交时当作签名使用的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;我的用户名&quot;</span><br><span class="line">git config --global user.email &quot;我的邮箱&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除配置信息</span></span><br><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure><h2 id="二、Git工作流程与区域"><a href="#二、Git工作流程与区域" class="headerlink" title="二、Git工作流程与区域"></a>二、Git工作流程与区域</h2><h3 id="1、区域"><a href="#1、区域" class="headerlink" title="1、区域"></a>1、区域</h3><ol><li><p>工作区</p><blockquote><p>平时写代码的文件目录</p></blockquote></li><li><p>暂存区</p><blockquote><p>git add 后提交暂存的地方</p></blockquote></li><li><p>版本库</p><blockquote><p>git commit 后给你生成版本的地方,注意push是提交到远程仓库而不是版本库,请勿混淆</p></blockquote></li></ol><h3 id="2、工作流程"><a href="#2、工作流程" class="headerlink" title="2、工作流程"></a>2、工作流程</h3><blockquote><p>每个项目都有一个Git目录(.git)他是Git用来保存元数据和对象数据库的地方.该目录非常重要,每次克隆镜像仓库的时候,实际拷贝的就是这个目录里的数据</p></blockquote><h5 id="①、在工作目录中修改某些文件"><a href="#①、在工作目录中修改某些文件" class="headerlink" title="①、在工作目录中修改某些文件"></a>①、在工作目录中修改某些文件</h5><blockquote><p>从项目中取出某个版本的所有文件和目录,用以开始后续工作的叫做工作目录,这些文件实际上都是从Git目录中的压缩对象数据库中提取出来的,接下去就可以在工作目录中对这些文件进行编辑</p></blockquote><h5 id="②、保存到暂存区域-对暂存区做快照"><a href="#②、保存到暂存区域-对暂存区做快照" class="headerlink" title="②、保存到暂存区域,对暂存区做快照"></a>②、保存到暂存区域,对暂存区做快照</h5><blockquote><p>暂存区域只不过是个简单的文件,一般都放在Git目录中,有时候人们会把这个区域的文件叫做索引文件,不过标准说法还是叫暂存区域</p></blockquote><h5 id="③、提交更新"><a href="#③、提交更新" class="headerlink" title="③、提交更新"></a>③、提交更新</h5><blockquote><p>将保存区在暂存区域的文件快照永久转储到本地数据库(Git目录)中</p></blockquote><p>我们可以从文件所处位置来判断状态:如果是Git目录中保存着的特定版本文件,就属于提交版本;如果做了修改并已放入暂存区域,就属于已暂存状态;如果自上次去除后,做了修改但还没有放到暂存区域,就是已修改状态</p><h2 id="三、对象详解-底层命令"><a href="#三、对象详解-底层命令" class="headerlink" title="三、对象详解(底层命令)"></a>三、对象详解(底层命令)</h2><h3 id="1、git对象"><a href="#1、git对象" class="headerlink" title="1、git对象"></a>1、git对象</h3><blockquote><ol><li>key:val 组成的键值对(key是val相应的hash)</li></ol><p>​        键值对在git内部是blob类型(git特有)</p><ol start="2"><li>存储数据文件内容,也称为数据对象</li></ol></blockquote><h5 id="①-直接写入git对象方法与读取-存入”-git-objects”"><a href="#①-直接写入git对象方法与读取-存入”-git-objects”" class="headerlink" title="① 直接写入git对象方法与读取(存入”.git/objects”)"></a>① 直接写入git对象方法与读取(存入”.git/objects”)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将打印内容写入对象(git数据库)并且返回其相应哈希值</span></span><br><span class="line">echo &quot;写入的对象内容&quot; | git hash-object -w --stdin </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">读取内容并不能直接<span class="built_in">cat</span>读取,因为git存入时已经加密,需要如下代码 -p:内容  -t:类型</span></span><br><span class="line">git cat-file -p 存入对象的哈希值(此值可以由上一步得到) </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将文件写入git对象,即我们常见的版本控制中出现的</span></span><br><span class="line">git hash-object -w ./test.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看Git存储的数据  返回其文件夹内的所有哈希文件</span></span><br><span class="line">find .git/objects -type f </span><br></pre></td></tr></table></figure><h3 id="2、树对象"><a href="#2、树对象" class="headerlink" title="2、树对象"></a>2、树对象</h3><blockquote><p>树对象是存储键值 作用为控制版本,如我们的版本前回退 就是在操作这个对象的(指向改变)</p><p>作用就是生成快照</p><p>这个也是git的必杀特性,因为他的切换分支与版本都很快 只是指针切换</p></blockquote><h4 id="构建树对象"><a href="#构建树对象" class="headerlink" title="构建树对象"></a>构建树对象</h4><blockquote><p>我们可以通过 update-index , write-tree , read-tree 等命令来构建树对象并且塞到暂存区</p></blockquote><h5 id="①-利用-update-index-命令-创建暂存区"><a href="#①-利用-update-index-命令-创建暂存区" class="headerlink" title="① 利用 update-index 命令 创建暂存区"></a>① 利用 <code>update-index</code> 命令 创建暂存区</h5><blockquote><p>利用 <code>update-index</code> 命令 为test.txt文件的首个版本创建一个暂存区,并通过<code>write-tree</code>命令生成树对象</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1生成一个树对象</span></span><br><span class="line">git update-index --add --cacheinfo 100664(文件状态码:普通文件) 哈希值 对应文件名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生成快照(树对象)</span></span><br><span class="line">git write-tree</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2 将第一个树对象加入第二个树对象,使其成为新的树对象</span></span><br><span class="line">git read-tree -prefix=bak 哈希值(树对象的)  </span><br><span class="line">git write-tree</span><br></pre></td></tr></table></figure><h5 id="②-查看暂存区当前样子"><a href="#②-查看暂存区当前样子" class="headerlink" title="② 查看暂存区当前样子"></a>② 查看暂存区当前样子</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files -s</span><br></pre></td></tr></table></figure><h3 id="3、提交对象"><a href="#3、提交对象" class="headerlink" title="3、提交对象"></a>3、提交对象</h3><blockquote><ol><li>通过上述两个对象操作后,你会发现你已经生成了不同项目的快照,但是问题是:如果想重用这些快照,你必须记住所有三个 SHA-1(快照)哈希值 .但是,你也完全不知道是谁保存了这些快照,在什么时刻保存的,以及为什么保存这些快照.而以上这些,正是提交对象(commit object)能为你保存的基本信息</li><li>我们可以通过调用commit-tree命令创建一个提交对象,为此需要指定一个树对象的SHA-1值,为此需要指定一个树对象的SHA-1值 , 以及该提交的父提交对象(如果有的话,第一次将暂存区做快照就没有父对象)</li><li>真正的一个版本其实就是提交对象</li></ol></blockquote><h5 id="①-创建提交对象"><a href="#①-创建提交对象" class="headerlink" title="① 创建提交对象"></a>① 创建提交对象</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;first commit&quot; |git commit-tree 树对象的哈希值</span><br></pre></td></tr></table></figure><p>②指定一个树对象的SHA-1值 , 以及该提交的父提交对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;second commit&quot; | git commit-tree 提交的树对象哈希值 -p 父亲树对象哈希值</span><br></pre></td></tr></table></figure><h2 id="四、高层命令"><a href="#四、高层命令" class="headerlink" title="四、高层命令"></a>四、高层命令</h2><h3 id="1、git-add"><a href="#1、git-add" class="headerlink" title="1、git add  ."></a>1、git add  .</h3><blockquote><ol><li><p>会将工作目录的修改,保存成git对象 <code>先到版本库,再到暂存区</code>,而不是直接到暂存区</p></li><li><p>在工作目录修改几个文件,就会生成几个git对象(一个文件对应一个git文件)</p></li><li><p>同一个文件,每次修改再add的时候都会生成一个新的git对象,是<code>增量</code>而不是覆盖</p></li><li><p>所以说git是绝对安全的,就算我只存到暂存区没有提交 git也会给我保存</p></li><li><p>只有后面提交的时候,才会根据暂存区内容给我生成树对象并存入版本区,然后加上我们的提交信息,才生成提交对象存入版本库</p></li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">相当于以下两个命令集合</span></span><br><span class="line">git hash-object -w 文件名(修改了多少个工作目录中的文件,就要被执行几次)</span><br><span class="line">git update-index ...</span><br></pre></td></tr></table></figure><h3 id="2、git-commit-m-“注释内容”"><a href="#2、git-commit-m-“注释内容”" class="headerlink" title="2、git  commit -m “注释内容”"></a>2、git  commit -m “注释内容”</h3><blockquote><p>将暂存区提交到版本库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git write-tree</span><br><span class="line">git commit-tree</span><br></pre></td></tr></table></figure><blockquote><p>跳过暂存区存入(之前add过的,直接提交)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="3、git-init"><a href="#3、git-init" class="headerlink" title="3、git init"></a>3、git init</h3><blockquote><p>初始化仓库 初始化后,在当前目录下出现一个名为.git的文件夹</p></blockquote><h3 id="4、git-status"><a href="#4、git-status" class="headerlink" title="4、git status"></a>4、git status</h3><blockquote><p>查看文件的状态</p></blockquote><h3 id="5、git-diff"><a href="#5、git-diff" class="headerlink" title="5、git diff"></a>5、git diff</h3><ol><li><p>当前做的那些更新没有暂存?</p><p>命令:<code>git diff</code>(不加参数直接输入git diff)</p></li><li><p>有哪些更新已经暂存起来准备好了下次提交</p><p>命令:<code>git diff --cached</code>或者<code>git diff --staged(1.6.1以上版本)</code></p></li></ol><h3 id="6、git-log"><a href="#6、git-log" class="headerlink" title="6、git log"></a>6、git log</h3><blockquote><ol><li><p><code>git log</code>(不带参数)</p><p><code>空格键</code>往下翻页 <code>b</code>向上翻页 <code>q</code>退出日志查阅</p></li><li><p>git log –oneline </p><p>将日志信息拍成一行显示</p></li><li><p>git reflog</p><p>所有的日志信息</p></li><li><p>git log –oneline –decorate –graph –all</p><p>查看所有的分支信息命令</p></li></ol></blockquote><h3 id="7、git-rm"><a href="#7、git-rm" class="headerlink" title="7、git rm"></a>7、git rm</h3><blockquote><p>删除工作目录对应的文件,再将修改添加到暂存区(如同删除后给你用了 <code>git add 文件名</code>)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除命令</span></span><br><span class="line">git rm 文件名 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接提交修改,因为<span class="built_in">rm</span>命令帮你提交到暂存区了</span></span><br><span class="line">git commit -m &quot;xxx&quot;</span><br></pre></td></tr></table></figure><h3 id="8、git-mv"><a href="#8、git-mv" class="headerlink" title="8、git mv"></a>8、git mv</h3><blockquote><p>将工作目录中的文件进行重命名,再将修改添加到暂存区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv 原文件名  新文件名</span><br></pre></td></tr></table></figure><h2 id="五、配别名"><a href="#五、配别名" class="headerlink" title="五、配别名"></a>五、配别名</h2><blockquote><p>Git并不会在你输入部分命令时自动推断出你想要的命令,如果不想每次都输入完整的Git命令,可以通过git config 文件来轻松为每一个命令设置一个别名</p><p>此处运行后将会写入你的配置文件,可以进入配置文件直接删除</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.自定义命令 &quot; `git` 命令后面的指令 &quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如配置查看分支信息 <span class="string">&quot;git log --oneline --decorate --graph --all&quot;</span></span></span><br><span class="line">git config --global alias.logbranch &quot;log --oneline --decorate --graph --all&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置切换分支</span></span><br><span class="line">git config --global alias.co checkout</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用方式</span></span><br><span class="line">git logbranch</span><br></pre></td></tr></table></figure><h2 id="六、分支"><a href="#六、分支" class="headerlink" title="六、分支"></a>六、分支</h2><blockquote><ol><li><p>前言:</p><p>几乎所有的版本控制系统都以某种形式支持分支.使用分支意味着你可以把你的工作从开发主线上分离开来,以免影响开发主线.在很多版本控制系统中,这是略微低效的过程–常常需要完全创建一个源代码目录的副本,对于大项目来说,这会耗费很多时间,而Git的分支模型极其的高校轻量,是Git的必杀特性,也正因为这一特性,是的Git从众多版本控制系统中脱颖而出</p></li><li><p>分支的本质:</p><p><code>Git的分支,其实本质上是提交对象</code>,,所有的分支都有机会被HEAD引用(<code>HEAD一个时刻只会指向一个分支</code>),当我们有新的提交的时候 HEAD会携带当前持有的分支向前移动</p><p>Git的默认分支名字是master,在多次提交后,你其实已经有一个指向最后那个提交对象的master分支.他会在每次的提交操作中自动向前</p><p>注意:Git的”master”分支并不是一个特殊分支.她就跟其他分支完全没有区别.之所以几乎每个仓库都有master分支,是因为<code>git init</code>命令默认创建它,并且大多数人懒得区改动它</p></li><li><p>分支的原理:</p><ol><li><p><code>.git/refs</code>目录中保存了分支及其对应的提交对象</p></li><li><p>当运行类似于<code>git branch (branchname)</code>这样的命令时,Git会取得当前所在分支最新提交对应的SHA-1值,并将其加入你想要创建的任何新分支中</p></li><li><p>当你执行<code>git branch (branchname)</code>时,Git如何知道最新提交的SHA-1值呢?答案是HEAD文件</p><p><code>HEAD文件</code>是一个符号引用(stmbolic reference),指向目前所在的分支.所谓符号医用,意味着它并不像普通引用那样包含一个SHA-1值.它时一个指向其他引用的指针</p></li></ol></li></ol></blockquote><h3 id="1、git-branch"><a href="#1、git-branch" class="headerlink" title="1、git branch"></a>1、git branch</h3><blockquote><ol><li><p>git branch(不加参数)</p><p>作用:<code>显示所有分支</code>信息</p></li><li><p>git branch 分支名</p><p>作用:<code>创建分支</code></p></li><li><p>git branch -v</p><p>作用:查看每一个分支最后一次提交</p></li><li><p>git branch -d(-D强制删除) 分支名</p><p>作用:<code>删除分支</code>,小d需要你这个分支是干净的才能删除(如已合并)</p></li><li><p>git branch –merged </p><p>作用:查看那些分支已经合并到当前分支</p><p>在这个列表中的分支名字前没有*号的分支通常可以使用<code>git branch -d</code> 删除掉</p></li><li><p>git branch –no-merged</p><p>作用:查看所有包含未合并工作的分支</p><p>尝试使用<code>git branch -d</code>命令删除在这个列表中的分支时会失败,如果真的想要删除分支并丢掉哪些工作,可以使用<code>-D</code> 选项爱强制删除它</p></li><li><p>git log –oneline –decorate –graph –all</p><p>作用:查看所有的分支信息命令</p></li><li><p>git branch 分支名 commitHash</p><p>作用:新建一个分支,并且使分支指向对应的提交对象(版本穿梭<code>可以替代撤销与重置</code>)</p></li></ol></blockquote><h3 id="2、git-checkout-分支名"><a href="#2、git-checkout-分支名" class="headerlink" title="2、git checkout 分支名"></a>2、git checkout 分支名</h3><blockquote><p>作用:<code>切换分支</code>  checkout还有其他作用,后面会提到</p><p>它会动三个地方:HEAD(指针) 暂存区 工作目录</p></blockquote><blockquote><ol><li><p><code>注意</code>:分支切换会改变你工作目录中的文件,所以在切换分支时,一定要注意你的工作目录里的文件会被改变,如果时切换到一个比较旧的分支,你的工作目录会回复到该分支最后一次提交的样子,如果Git不能干净利落的完成这个任务,它将禁止切换分支</p></li><li><p><code>坑</code>:在切换分支时, 如果当前分支上由未暂存的修改(<code>第一次</code>) 或者 有未提交的暂存<code>(第一次</code>) 分支可以切换成功,但是这种操作可能会污染其他分支</p><p>ps:<code>第一次</code>–当前分支如果已经提交过一次,将不让你切换,但是第一次没有提交过,git会帮你保存文件 但是它并不知道新增修改是属于哪个分支,所以会带回当前分支</p></li><li><p>最佳操作方式:<code>每次在切换分支前,需要提交一下当前分支(先使用status查看状态)</code></p></li></ol></blockquote><h3 id="3、git-checkout-b-“新的分支名”"><a href="#3、git-checkout-b-“新的分支名”" class="headerlink" title="3、git checkout -b “新的分支名”"></a>3、git checkout -b “新的分支名”</h3><blockquote><p>创建并进入该分支,类似于上面两个命令集合</p></blockquote><h3 id="4、模拟实战流程"><a href="#4、模拟实战流程" class="headerlink" title="4、模拟实战流程"></a>4、模拟实战流程</h3><blockquote><ol><li><p>需要解决主程序的的一个小BUG,所以使用<code>git  checkout -b &quot;iss_bug&quot;</code>新建分支并在这个分支进行bug调修</p></li><li><p>当你再<code>iss_bug</code>分支上开发到一半,这时,在主程序发现了一个紧急BUG需要你放下这个重要性为次要的bug进行修改.你老板都给你打了紧急电话,所以你需要先将写到一半的bug进行保存提交(<code>commit</code>提交或者储存  到暂存区,并不是提交合并到主分支,也不是push提交),确定status是干净的时候,切换回主分支,再用第一步的方法创建<code>hot_bug</code>分支(这时候<code>hit_bug</code>的版本是master没有进行<code>iss_bug</code>调修的版本),进行修复</p></li><li><p>当你将紧急bug修复后,进行提交,确定status干净后切换回master分支,进行合并:代码如下</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge hit_bug</span><br></pre></td></tr></table></figure><ol start="4"><li>修改完后再查看status(这是个好习惯,防止偶尔记忆混淆造成不必要的麻烦),再切换至普通bug分支<code>iss_bug</code>进行修改,成功后切换回去合并</li><li>如果出现冲突,去出现冲突的文件手动修改(决定保留那部分代码),再进行<code>git add</code>表示冲突解决,在进行提交 </li></ol></blockquote><h3 id="5、合并分支"><a href="#5、合并分支" class="headerlink" title="5、合并分支"></a>5、合并分支</h3><blockquote><p>命令: <code>git merge branchname</code>(分支名)</p><p>注意:合并分支时要先切换到<code>主要分支</code>(即下面的被合并分支),在这个分支上进行合并新分支,使得这个分支进行版本更新</p><ol><li><p>快进合并–&gt;不会产生冲突</p><p>​        指被合并分支并没有进行修改,停留在原地,只有新分支进行修改更新,更        新完成后进行合并,原版本相当于直接前进版本,称为快进合并</p></li><li><p>典型合并–&gt;有可能产生冲突</p><p>​        指被合并分支在新分支进行开发时,本身也进行修改开发,可能会改动到同        一代码或者文件而产生重复修改</p></li><li><p>解决冲突:<code>打开冲突的文件</code>  进行修改 ,修改完成后进行:<code>add标记修改完成</code>,然后commit进行提交</p></li></ol></blockquote><blockquote><p><code>git 在pull或者合并分支</code>的时候有时会遇到一个第一段是黄色,下面文字是青色(偏蓝色)。可以不管(直接下面3,4步)，如果要输入解释的话就需要:</p><p>1.按键盘字母 i 进入insert模式</p><p>2.修改最上面那行黄色合并信息,可以不修改</p><p>3.按键盘左上角”Esc”</p><p>4.输入”:wq”,注意是冒号+wq,按回车键即可</p></blockquote><h2 id="七、存储"><a href="#七、存储" class="headerlink" title="七、存储"></a>七、存储</h2><blockquote><ol><li><p>需求背景:</p><p>有时,当你在项目的一部分上已经工作了一段时间后,所有东西都进入了混乱的状态,而这时你想要切换到另一个分支做一点别的事情.问题是,你不想仅仅因为过会儿回到这一点而做了一半的工作创建一次提交</p></li><li><p>解决:</p><p>针对这个问题的答案是 <code>git stash</code> 命令(当然,直接提交<code>commit</code>也可以,这个是用来不想生成提交对象而用)</p></li><li><p>原理:</p><p>git切换分支之所以保留你的未提交的修改文件,是因为它不想你因为误操作使得之前代码报废所以会当你status不干净时组织你切换分支(<code>ps</code>:如果是第一次创建的文件没有追踪过,它不认识是属于那份分支将会带到你切换后的分支造成污染),</p><p>而你将其保存到栈上(<code>ps</code>:换句话说将这部分内容抽取到一个类似共有的栈上,你在哪个分支都能够通过命令取到),git就知道你这个内容已经储存并不会造成切换分支使得你写的代码丢失,便不会阻止你切换分支或者切换带文件污染分支</p></li></ol></blockquote><h3 id="1、git-stash"><a href="#1、git-stash" class="headerlink" title="1、git stash"></a>1、git stash</h3><blockquote><p><code>git stash</code>命令会将未完成的修改保存到一个栈上,而你可以在任何时候重新应用这些改动(<code>git stash apply</code>),</p><p><code>注意!!!!!</code>:使用前你要先<code>git add .</code>,否则你会发现,你执行此命令后,没有追踪的部分全部消失了</p></blockquote><h3 id="2、git-stash-list"><a href="#2、git-stash-list" class="headerlink" title="2、git stash list"></a>2、git stash list</h3><blockquote><p>查看存储</p></blockquote><h3 id="3、git-stash-pop"><a href="#3、git-stash-pop" class="headerlink" title="3、git stash pop"></a>3、git stash pop</h3><blockquote><p>来应用储藏然后立即从栈上扔掉它 <code>这是最推荐的使用</code></p></blockquote><h3 id="4、git-stash-apply-stash-2"><a href="#4、git-stash-apply-stash-2" class="headerlink" title="4、git stash apply stash@{2}"></a>4、git stash apply stash@{2}</h3><blockquote><p>如果不指定一个储藏,git认为指定栈顶<code>不常用</code></p></blockquote><h3 id="5、git-stash-drop-“储藏的名字”"><a href="#5、git-stash-drop-“储藏的名字”" class="headerlink" title="5、git stash drop “储藏的名字”"></a>5、git stash drop “储藏的名字”</h3><blockquote><p>加上要储藏的名字移除他 <code>不常用</code></p></blockquote><h3 id="6、git-stash-clear"><a href="#6、git-stash-clear" class="headerlink" title="6、git stash clear"></a>6、git stash clear</h3><blockquote><p>在查看存储后,运行此命令  清空stash栈</p></blockquote><h2 id="八、撤销与重置"><a href="#八、撤销与重置" class="headerlink" title="八、撤销与重置"></a>八、撤销与重置</h2><blockquote><p>特别是重置部分理解即可(用到了再去查),撤销尽量可以掌握</p></blockquote><h3 id="Ⅰ-撤销"><a href="#Ⅰ-撤销" class="headerlink" title="Ⅰ- 撤销"></a>Ⅰ- 撤销</h3><h4 id="1、git-commit-–amend"><a href="#1、git-commit-–amend" class="headerlink" title="1、git commit –amend"></a>1、git commit –amend</h4><blockquote><ol><li><p>这个命令会将暂存区中的文件提交,修订提交(<code>不是撤销而是重新提交</code>)</p></li><li><p>如果自上次提交以来你还未做任何修改(如:在上次提交后马上执行此命令),那么快照会保持不变,而你修改的只是提交信息</p></li><li><p>如果你提交后发现忘记了暂存某些需要的修改,可以像下面这样操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;错误的注释&quot; #或者commit了错误的修改</span><br><span class="line">git add &quot;文件名或者.&quot;  #重新add正确的文件</span><br><span class="line">git commit --amend#进行重新提交</span><br></pre></td></tr></table></figure><p>最终你只会有一个提交 (第二次提交将会替代第一次提交)</p></li><li><p>可以修改上次提交的文件与注释</p></li></ol></blockquote><h4 id="2、git-reset"><a href="#2、git-reset" class="headerlink" title="2、git reset"></a>2、git reset</h4><blockquote><ol><li>一般我们写完代码后,是这样提交的:</li></ol><ul><li>git add . //添加追踪所有文件</li><li>git commit -m “feat(前端-Git学习详细笔记):更新撤销commit操作” //添加commit提交信息</li></ul><ol start="2"><li>但是commit写完提交信息后,突然想到还有一个地方代码没改到/保存,如果放到下一个commit却不合适(同一个功能修改,分成两个commit),原因详见下方的 <a href="https://gitee.com/hongjilin/hongs-study-notes/tree/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0#%E2%85%A3-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99">版本控制工具的使用基本原则</a> </li><li>执行此命令命令:<code>git reset --soft HEAD^</code></li></ol><ul><li>HEAD^的意思是上一个版本，也可以写成HEAD~1</li><li>如果你进行了2次commit，想都撤回，可以使用HEAD~2</li><li>详见下方 <a href="https://gitee.com/hongjilin/hongs-study-notes/tree/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0#reset%E4%B8%89%E9%83%A8%E6%9B%B2">reset三部曲</a></li></ul><p>作用:将文件从<code>暂存区中撤回</code>到工作目录中(仅仅是撤回commit操作，你写的代码仍然保留)</p></blockquote><h4 id="3、git-checkout"><a href="#3、git-checkout" class="headerlink" title="3、git checkout"></a>3、git checkout</h4><blockquote><p>是的,你没看错,这个是切换分支的命令,但是他也能用来<code>撤销文件修改</code></p><p>命令:<code>git checkout --文件名</code></p><p>将在工作目录中对文件的修改撤销</p><p><code>注意</code>:这是一个危险的命令,这很重要.你对那个文件做的任何修改都会消失–你只是拷贝了另一个文件(原来版本的文件)来覆盖它.除非你确实秦楚不想要那个文件了,否则不要使用这个命令</p></blockquote><h3 id="Ⅱ-重置reset"><a href="#Ⅱ-重置reset" class="headerlink" title="Ⅱ - 重置reset"></a>Ⅱ - 重置reset</h3><blockquote><p>注意:<code>--hard</code>标记是<code>reset</code>命令唯一的<code>危险用法</code>,也是Git真正的销毁数据的几个仅有操作之一.其他任何形式的<code>reset</code>调用都可以轻松撤销,但是<code>--hard</code>选项不能,因为它强制覆盖了工作目录中的文件.</p><p>如在这种特殊情况:我们的Git数据库中的一个提交内还留有该文件的几个版本,我们可以通过<code>reflog</code>来找回它,但若是该文件还未提交,Git仍会覆盖他导致它无法恢复</p></blockquote><h4 id="reset三部曲"><a href="#reset三部曲" class="headerlink" title="reset三部曲"></a>reset三部曲</h4><blockquote><p>第一部:git reset –soft HEAD~(等于之前的–amend,后面如果跟随数字,就是回退几个版本,默认1个)</p><p>​    移动HEAD (但带着分支一起移动,与checkout不同(它只动HEAD))  –&gt;相当于回到你没有 [ commit ]的时候,代码仍在</p><p>第二部:git reset –mixed HEAD~</p><p>​    移动HEAD 并且动了了暂存区</p><p>第三部:git reset –hard HEAD~</p><p>​    移动HEAD 并且动了了暂存区 动了工作目录 ( 你的提交的代码也会没掉 )</p></blockquote><h3 id="Ⅲ-错误的git-push提交成功后如何撤销回退"><a href="#Ⅲ-错误的git-push提交成功后如何撤销回退" class="headerlink" title="Ⅲ -  错误的git push提交成功后如何撤销回退"></a>Ⅲ -  错误的git push提交成功后如何撤销回退</h3><blockquote><p>我们在使用Git进行版本控制时，有可能会出现这种情况。git push后发现提交的内容不是想要的，这时候我们怎么做呢，提交上去的内容是没有删除按钮的（比如github，或码云）。所以我们需要一些手段将提交上去内容撤销下来。</p><p>而要撤销,就要用到上面所学的 <code>git reset</code></p></blockquote><h4 id="1、错误场景示范"><a href="#1、错误场景示范" class="headerlink" title="1、错误场景示范"></a>1、错误场景示范</h4><blockquote><p>Ⅰ- 当我撰写 [ commit ] 信息没注意到,以为是对的时候直接提交 –&gt; 因为本人提交笔记时喜欢按 [ ↑ ] 找到之前的提交信息进行修改</p><img src="A_Git详细学习笔记中的图片/image-20210813153403664.png" alt="image-20210813153403664" style="zoom:67%;" /> <p>Ⅱ- 此时可以看到,错误的 [ commit ] 已经提交了 (当然,适用场景不只是commit ,也可错误代码之类的)</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813155746112.png" alt="image-20210813155746112"> </p></blockquote><h4 id="2、回退操作"><a href="#2、回退操作" class="headerlink" title="2、回退操作"></a>2、回退操作</h4><blockquote><p>咱们操作稳重一点,使用git reset –soft HEAD~就好了(如果回退后代码也不想要,可以用<code>git stash</code>,暂存,达到代码也回退的效果)</p></blockquote><h5 id="①-git-reflog"><a href="#①-git-reflog" class="headerlink" title="① git reflog"></a>① git reflog</h5><blockquote><p>commits，它在git中扮演了一个重要角色，我们平常用的一些操作git clone ,git commit 都会产生commits，通俗的讲这个就是版本号，但是git reset并不会产生commits（不是不会产生，而是会产生 但是都是一样的），我们可以先看看自己项目中的commits，使用如下命令:<code>git reflog</code></p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813154309057.png" alt="image-20210813154309057"> </p></blockquote><h5 id="②-git-reset-–soft-HEAD"><a href="#②-git-reset-–soft-HEAD" class="headerlink" title="②  git  reset –soft HEAD~"></a>②  git  reset –soft HEAD~</h5><blockquote><p>运行此代码后,我们的 [ HEAD ] 指向了上一个 [ commits ]</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813154448889.png" alt="image-20210813154448889"> </p></blockquote><h5 id="③-查看缓存"><a href="#③-查看缓存" class="headerlink" title="③  查看缓存"></a>③  查看缓存</h5><blockquote><ul><li><p>此时你可以用<code>stash staus</code>查看,会发现,之前提交的代码已经放回缓存区了</p></li><li><p>如果你不想要此次提交所有代码,可以使用<code>git stash</code> ,然后再去清空即可(当然,本人此处还是需要的,所以要留下)</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813154839981.png" alt="image-20210813154839981"> </p></li></ul></blockquote><h5 id="④-重新撰写-commit-信息"><a href="#④-重新撰写-commit-信息" class="headerlink" title="④ 重新撰写 [ commit ]信息"></a>④ 重新撰写 [ commit ]信息</h5><blockquote><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813154928064.png" alt="image-20210813154928064"> </p></blockquote><h5 id="⑤-强制提交"><a href="#⑤-强制提交" class="headerlink" title="⑤ 强制提交"></a>⑤ 强制提交</h5><blockquote><p>如果你重新撰写 [ commit ] 后马上重新push,你会发现无法提交: 因为我们当前落后远程一个版本!</p><p>所以此时直接强制提交即可,就能覆盖远程提交记录</p><blockquote><p><code>git push -f</code></p></blockquote><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813155049169.png" alt="image-20210813155049169"> </p></blockquote><h4 id="3、成功展示"><a href="#3、成功展示" class="headerlink" title="3、成功展示"></a>3、成功展示</h4><blockquote><ul><li>在网站工作台首页能看到已经将更改后的 [ coommit ] 强制推送上来了</li></ul><p> 也许你会奇怪:为啥工作台上还能看到? 其实已经删了!!!你看下方</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813155614570.png" alt="image-20210813155614570"> </p><ul><li>但是你查看提交记录,会发现之前错误的commit已经被覆盖</li></ul><img src="A_Git详细学习笔记中的图片/image-20210813155339300.png" alt="image-20210813155339300" style="zoom:80%;" /></blockquote><h2 id="九、数据恢复"><a href="#九、数据恢复" class="headerlink" title="九、数据恢复"></a>九、数据恢复</h2><blockquote><p>在你使用Git的时候,你可能会意外丢失一次提交:</p><p>①通常这是因为你强制删除了正在工作的分支,但是最后你却需要这个分支;②抑或是你硬重置了一个分支,放弃了你想要的提交.</p><p>如果这些事情已经发生,该如何找回你的提交呢?</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>推荐方法最好是<code>直接看恢复</code>,上面实例时当你使用硬重置回当初未删除版本进行恢复,出现的一系列问题解决</p></blockquote><blockquote><ol><li>假设你已经提交了五次,而现在,我们将master分支硬重置到了第三次提交来找回当时删除的分支.但是这时候你会发现一个事情:</li></ol><p>现在顶部的两个提交已经丢失了-没有分支指向这些提交(因为你将指针移到了第三个,那么前面两个就找不到了)</p><ol start="2"><li>你现在已经得到并且恢复当时第三次还存在的的提交了(<code>恢复方法在下面,恢复文件到这步,下面3、4是回到最新版本</code>)</li></ol><p>现在准备回到当初最新的版本时,你发现你进行打印竟然没有前面两次提交信息(你需要他的哈希值进行版本穿梭或者重置),你需要最新一次提交的哈希值,但是你估计想不起来了,对吗?</p><ol start="3"><li><p>最方便,也是最常用的方法,是使用一个名叫<code>log reflog</code>的工具(前面高层命令提过),当你在工作时,Git会默默记录每一次你改变的HEAD时它的值,每一次你提交或者改变分支,引用日志都会被刷新</p></li><li><p>如果<code>git reflog</code>显示的内容你觉得不足够多,可以执行<code>git log -g</code>,这个命令会以标准日志的格式输出引用日志</p></li></ol></blockquote><h3 id="恢复-推荐的"><a href="#恢复-推荐的" class="headerlink" title="恢复 推荐的"></a>恢复 <code>推荐的</code></h3><blockquote><ol><li><p>通过<code>git reflog</code>找到你需要的文件还未删除的版本哈希值,那个就是你丢失的提交,你可以通过创建一个新的分支指向这个提交来恢复它.</p><p>例如:你可以创建一个名为<code>recover-branch</code>的分支执行这个提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch recover-branch 当前需要恢复(之前丢失的)的提交哈希值</span><br></pre></td></tr></table></figure></li><li><p>现在有一个名为<code>recover-branch</code>的分支是你的<code>master</code>分支曾经指向的地方(即当时你删除该需要的文件的前的那个版本),这样你在这次提交的版本后,也能通过切换这个分支得到曾丢失的文件</p></li><li><p>这个分支功能能帮你做很多东西,善用分支,Git最强功能</p></li></ol></blockquote><h2 id="十、打tag"><a href="#十、打tag" class="headerlink" title="十、打tag"></a>十、打tag</h2><blockquote><p>Git可以给历史中的某一次提交打上标签,表示重要.比较有代表性的是人们会用这个功能来<code>标记发布节点</code>(v1.0等等)</p></blockquote><h3 id="1、列出标签"><a href="#1、列出标签" class="headerlink" title="1、列出标签"></a>1、列出标签</h3><blockquote><p>命令:<code>git tag</code> 或者 <code>git tag -l &#39;v1.*&#39;</code></p><p>​    前者列出所有,后者列出以<code>v1.</code>开头的所有</p></blockquote><h3 id="2、创建标签"><a href="#2、创建标签" class="headerlink" title="2、创建标签"></a>2、创建标签</h3><blockquote><p>git使用两种主要类型的标签:轻量标签 与 附注标签</p></blockquote><h5 id="①轻量标签"><a href="#①轻量标签" class="headerlink" title="①轻量标签"></a>①轻量标签</h5><blockquote><p>轻量标签很像一个不会改变的的分支(他只是一个特定提交的引用),直接在提交前使用命令即可给当前分支打上标签</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或者下面的</span></span><br><span class="line">git tag v1.0 提交对象哈希</span><br></pre></td></tr></table></figure><h5 id="②附注标签"><a href="#②附注标签" class="headerlink" title="②附注标签"></a>②附注标签</h5><blockquote><p>附注标签是存储在Git数据库中的一个完整对象.他们是可以被校验的,其中包含打标签者的名字、电子邮件地址、日期时间;通常<code>建议创建复制标签</code>,这样你可以拥有以上所有信息,但如果只是想用一个临时标签,或者由于某些原因不想表村那些信息,轻量标签也是可用的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.0</span><br><span class="line">git tag -a v1.0 提交对象哈希</span><br><span class="line">git tag -a v1.0 提交对象哈希 -m &quot;我的注释信息&quot;</span><br></pre></td></tr></table></figure><h3 id="3、查看特定标签"><a href="#3、查看特定标签" class="headerlink" title="3、查看特定标签"></a>3、查看特定标签</h3><blockquote><p><code>git show</code> 可以显示任意类型的对象(git对象 树对象 提交对象 tag对象)</p><p>命令: <code>git show tagname</code></p></blockquote><h3 id="4、删除标签"><a href="#4、删除标签" class="headerlink" title="4、删除标签"></a>4、删除标签</h3><blockquote><ol><li><p>删除标签 要删除你在本地仓库上的标签,可以使用命令 <code>git tag -d &lt;tagname&gt;</code>如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v1.0</span><br></pre></td></tr></table></figure></li><li><p>应该注意上述命令并不会从任何远程仓库中移出这个标签,你必须使用<code>git push &lt;tamote&gt;:refs/tags/&lt;tagname&gt;</code>来更新你的远程仓库,如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/v1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">origin是你配置的远程仓库地址别名,你可以直接用远程仓库地址</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="5、捡出标签"><a href="#5、捡出标签" class="headerlink" title="5、捡出标签"></a>5、捡出标签</h3><blockquote><ol><li><p>如果说你想查看某个标签所指向的文件版本,可以使用<code>git checkout</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout tagname</span><br></pre></td></tr></table></figure></li><li><p>虽然说这会使得你的仓库处于”分离 头指针(deacthed HEAD)”状态.在”分离头指针”状态下,如果你做了某些更改然后提交它们,标签不会发生变化,但你的新提交将不属于任何分支,并且将无法访问,除非访问确切的提交哈希,因此你如果需要进行更改–比如说你需要<code>修复旧版本</code>的错误–这通常需要创建一个新的分支(捡出后创建,就会默认将当前捡出的版本作为新分支的第一版本-前面分支提到过)</p><p>这样就可以修改到旧版本的代码(如同vue的尤雨溪在vue3.x会更新vue1.0版本生态)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b version(新的分支)</span><br></pre></td></tr></table></figure></li></ol></blockquote><h1 id="Ⅱ-代码风格"><a href="#Ⅱ-代码风格" class="headerlink" title="Ⅱ-代码风格"></a>Ⅱ-代码风格</h1><h2 id="1、Eslint"><a href="#1、Eslint" class="headerlink" title="1、Eslint"></a>1、Eslint</h2><blockquote><p>ESlint是一个开源的JavaScript代码检查工具,由红宝书作者创建</p><p>初衷是为了让程序员可以创建自己的检测规则.ESLint的所有规则都被设计成可插入的</p><p>ESLint使用Node.js编写,这样既可以有一个快速的运行环境同时也便于安装</p><p>此处引入概念,具体学习之后将开新的笔记</p></blockquote><h2 id="2、commit提交规范"><a href="#2、commit提交规范" class="headerlink" title="2、commit提交规范"></a>2、commit提交规范</h2><blockquote><ol><li><p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">参考自阮一峰老师的文章</a></p></li><li><p>Header</p></li></ol><p>Header部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和<code>subject</code>（必需）。</p><p><strong>（1）type</strong></p><p><code>type</code>用于说明 commit 的类别，只允许使用下面几个标识。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">feat：新功能（feature）。</span><br><span class="line">fix/to：修复bug，可以是<span class="variable constant_">QA</span>发现的<span class="variable constant_">BUG</span>，也可以是研发自己发现的<span class="variable constant_">BUG</span>。</span><br><span class="line">fix：产生diff并自动修复此问题。适合于一次提交直接修复问题</span><br><span class="line">to：只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix</span><br><span class="line">docs：文档（documentation）。</span><br><span class="line">style：格式（不影响代码运行的变动）。</span><br><span class="line">refactor：重构（即不是新增功能，也不是修改bug的代码变动）。</span><br><span class="line">perf：优化相关，比如提升性能、体验。</span><br><span class="line">test：增加测试。</span><br><span class="line">chore：构建过程或辅助工具的变动。</span><br><span class="line">revert：回滚到上一个版本。</span><br><span class="line">merge：代码合并。</span><br><span class="line">sync：同步主线或分支的<span class="title class_">Bug</span>。</span><br></pre></td></tr></table></figure></blockquote><p>如果<code>type</code>为<code>feat</code>和<code>fix</code>，则该 commit 将肯定出现在 Change log 之中。其他情况（<code>docs</code>、<code>chore</code>、<code>style</code>、<code>refactor</code>、<code>test</code>）由你决定，要不要放入 Change log，建议是不要。</p><p><strong>（2）scope</strong></p><p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p><strong>（3）subject</strong></p><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p><blockquote><ul><li>以动词开头，使用第一人称现在时，比如<code>change</code>，而不是<code>changed</code>或<code>changes</code></li><li>第一个字母小写</li><li>结尾不加句号（<code>.</code>）</li></ul></blockquote></blockquote><h1 id="Ⅲ-远程操作"><a href="#Ⅲ-远程操作" class="headerlink" title="Ⅲ-远程操作"></a>Ⅲ-远程操作</h1><blockquote><p>三个必须懂的概念</p><ol><li>本地分支</li></ol><p>  工作目录中的分支</p><ol start="2"><li>远程跟踪分支</li></ol><p>  当你往远程分支<code>push</code>(还有克隆)的时候会创建远程跟踪分支</p><ol start="3"><li>远程分支</li></ol><p>  指保存在git网站上的那个远程仓库中的分支</p></blockquote><h3 id="1、团队协作流程"><a href="#1、团队协作流程" class="headerlink" title="1、团队协作流程"></a>1、团队协作流程</h3><blockquote><ol><li><p>项目经理初始化远程仓库</p><p> 一定要初始化一个空的仓库:再github上操作</p></li><li><p>项目经理创建本地仓库</p><ol><li><code>git remote 别名 仓库地址</code></li><li><code>git --init</code>,然后将源码复制进来</li><li>修改用户名 修改邮箱(双账号的才需要这步)</li><li><code>git  add</code> 和 <code>git commit</code></li></ol></li><li><p>项目经理推送到本地仓库到远程仓库</p><ol><li>清理window凭据</li><li><code>git push 别名 分支</code>(输入账号密码;推完之后会附带生成远程跟踪分支) </li></ol></li><li><p>项目邀请成员&amp;&amp;成员接受邀请</p><p> 在git网站上操作</p></li><li><p>成员克隆远程仓库</p><p> <code>git clone 仓库地址</code></p><p> 只有在克隆的时候 本地分支master 和 远程跟踪分支别名/master 是有同步关系的(可以直接pull或者push后面不用加origin)</p><p> 原因是,每次你push的时候是你远程跟踪分支替换掉(同步)你的远程分支，如果你想要新分支能直接push，需要本地分支去追踪远程追踪分支</p></li><li><p>成员做出贡献</p><ol><li>修改源代码文件</li><li><code>git add -&gt; commit -&gt; push</code></li></ol></li><li><p>项目经理更新修改</p><ol><li><code>git fetch 别名</code>(将修改同步到远程跟踪分支上)</li><li>git merge 远程跟踪分支</li></ol></li></ol></blockquote><h3 id="2、远程库"><a href="#2、远程库" class="headerlink" title="2、远程库"></a>2、远程库</h3><blockquote><p>正常的数据推送 和 拉取步骤</p><ol><li>确保本地分支已经跟踪了远程跟踪分支</li><li>拉取上传数据： git <code>pull</code> or <code>push</code></li></ol></blockquote><h4 id="Ⅰ-远程跟踪分支"><a href="#Ⅰ-远程跟踪分支" class="headerlink" title="Ⅰ-远程跟踪分支"></a>Ⅰ-远程跟踪分支</h4><blockquote><p>流程与释义:</p><ol><li><p><code>远程跟踪分支</code>是远程分支状态的引用。它们是你不能移动的本地分支。当你做任何网络通信操作时，它们会自动移动</p></li><li><p>它们以（remote）/(branch)形式命名，如果你想要看你最后一次与远程仓库origin时master分支的状态，可以查看origin/master分支</p></li><li><p>当<code>克隆</code>一个仓库时,它通常会自动的创建一个跟踪<code>origin/master</code>的master分支（所以你可以不跟踪直接pull与push后面不跟origin）</p></li><li><p>当我克隆之后，别人新建了一个分支push上去，我这时候想要或者并且跟踪这个新分支，我需要先<code>git fetch origin</code>获取下来，获取下来后想要切换并且跟踪这个分支时使用命令<code>git checkout --track 远程跟踪分支名(origin/分支名)</code></p></li></ol></blockquote><h5 id="做跟踪"><a href="#做跟踪" class="headerlink" title="做跟踪:"></a>做跟踪:</h5><blockquote><ol><li><p>克隆仓库时,会自动为master做跟踪</p></li><li><p>本地没有分支,要新建分支且追踪</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --track 远程跟踪分支(remote/分支名)</span><br></pre></td></tr></table></figure><ol start="3"><li>本地已经创建了分支,</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u 远程跟踪分支(remote/分支名)</span><br></pre></td></tr></table></figure></blockquote><h4 id="Ⅱ-本地分支怎么跟踪远程跟踪分支"><a href="#Ⅱ-本地分支怎么跟踪远程跟踪分支" class="headerlink" title="Ⅱ-本地分支怎么跟踪远程跟踪分支"></a>Ⅱ-本地分支怎么跟踪远程跟踪分支</h4><blockquote><ol><li><p>当克隆的时候 会自动生成一个master本地分支（已经跟踪了对应的远程跟踪分支）</p></li><li><p>在新建其他分支时，可以指定想要跟踪的远程跟踪分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 本地分支名 远程跟踪分支名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">简写形式</span></span><br><span class="line">git checkout --track 远程跟踪分支名(origin/分支名)</span><br></pre></td></tr></table></figure></li><li><p>将一个已经存在的本地分支 改成 一个跟踪分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u 远程跟踪分支名</span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="Ⅲ-冲突"><a href="#Ⅲ-冲突" class="headerlink" title="Ⅲ-冲突"></a>Ⅲ-冲突</h4><blockquote><ol><li>git本地操作会不会有冲突？</li></ol><p>  典型合并的时候（如新建分支合并时）</p><ol start="2"><li>git远程协作的时候会不会有冲突</li></ol><p>  <code>push</code>与<code>pull</code></p></blockquote><blockquote><p>解决流程：</p><ol><li><p>假设你修改了a.js的代码，已经<code>add &amp;&amp;commit</code>（必须先这样才能提交，才能触发冲突）</p></li><li><p>但是这时别人也改了a.js同一行代码并且已经push上去了，你这时候进行push将会报错</p></li><li><p>这时候你需要先将其pull下来，这时候你会发现你的git将会给你提示，并且在本地的a.js中文件代码中，保留了你们两个的代码（并且会给你标注出来）</p></li><li><p>这时候一定要去与<code>与你冲突的开发人员交流</code>,讨论保留哪一个人的代码，或者进行修改（直接在你pull后的本地目录中修改），修改完成后使用<code>git add .</code>标记解决冲突然后<code>push</code>提交，这样别人pull的时候git就知道这部分时保留哪部分代码，直接覆盖（即在一个地方更改然后标记提交即可）</p></li><li><p>如果你发生冲突<code>不进行沟通</code>，将别人代码<code>直接注释掉</code>，让自己代码能跑，那么–真的很爽</p></li></ol><p>  但是别人功能可能就炸了，这时候你会被暴打:smirk:</p><p>  因为你解决冲突后（git add .）别人pull的时候并不会提示冲突，因为你用<code>add</code>标记解决了冲突，git认出来后会直接默认<code>覆盖</code>他的代码，不知不觉，你可能就毁了另外一个程序员美好的一天（莫名其妙的BUG导致加班），如果他没反应过来，可能就是两天甚至…，你到时候住院的时间也与这个成正比:smirk:</p></blockquote><h4 id="Ⅳ-pull-request-流程"><a href="#Ⅳ-pull-request-流程" class="headerlink" title="Ⅳ- pull request 流程"></a>Ⅳ- pull request 流程</h4><blockquote><p>​    <code>如果你想要参加某个项目，但是并没有推送权限</code>，这时候可以对这个项目进行”派生“（<code>Fork</code>),派生是指GitHub将在你的空间创建一个完全属于你的项目副本,且你对其有推送权限.通过这种方式,项目的管理者不再需要忙着把用户添加到贡献者列表并给予它们推送权限.人们可以派生这个项目,将修改推送到派生出的项目副本中,并通过创建合并请求(pull request)让它们改动进入原版本库</p><p>基本流程:</p><ol><li>自己在git网站上fork的项目到自己空间中,下面的操作都是基于这个fork的项目</li><li>从master分支中创建一个新的分支</li><li>提交一些修改来改进项目</li><li>将这个分支推送到git上</li><li>创建一个<code>合并</code>请求(在网站上点击发送信息)</li><li>在网站上进行讨论,并且根据实际情况继续修改</li><li>项目的拥有者合并或者关闭你的合并请求</li></ol><p>注意:</p><p> 每次在发起新的<code>Pull Request</code>时 要去拉去最新的原仓库的代码 而不是自己fork的那个仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;源仓库名字（自己定义）&gt; &lt;仓库地址链接&gt;</span><br><span class="line">git fetch 远程仓库名字</span><br><span class="line">git merge 对应的远程跟踪分支</span><br></pre></td></tr></table></figure></blockquote><hr><h1 id="Ⅳ-版本控制工具的使用基本原则"><a href="#Ⅳ-版本控制工具的使用基本原则" class="headerlink" title="Ⅳ-版本控制工具的使用基本原则"></a>Ⅳ-版本控制工具的使用基本原则</h1><h2 id="1、精准的提交"><a href="#1、精准的提交" class="headerlink" title="1、精准的提交"></a>1、精准的提交</h2><p>每次提交都是一个小儿完整的功能或者一个BUG的修复。不应该出现多个功能点一块提交或者多个BUG一起修复的情况。如果一旦发现提交的代码有问题，可以方便的会滚到改动之前的正确状态，不会影响到其他协作者开发进程。</p><h2 id="2、频繁的提交"><a href="#2、频繁的提交" class="headerlink" title="2、频繁的提交"></a>2、频繁的提交</h2><p>尽可能频繁的提交你的改动到远程仓库，这样，可以避免将来合并代码的时候产生大量的冲突以至于难以解决。同时，也可以让其他同事比较快的共享你的改动。</p><h2 id="3、不要提交不完整的功能"><a href="#3、不要提交不完整的功能" class="headerlink" title="3、不要提交不完整的功能"></a>3、不要提交不完整的功能</h2><p>如果你正在开发的新功能比较庞大，那么可以讲这个功能尽可能拆分为几个逻辑模块，并且要保证分次提交的逻辑模块不会影响到整个系统的正确性。如果你只是因为临时的一些事情需要切到别的分支或者是临时需要中断开发（比如说下班）,那么应该使用<code>Stash</code>储藏功能来保存你的更改。   –&gt;<a href="#%E4%B8%83%E3%80%81%E5%AD%98%E5%82%A8">相关知识点部分我跳转</a></p><h2 id="4、提交前进行测试"><a href="#4、提交前进行测试" class="headerlink" title="4、提交前进行测试"></a>4、提交前进行测试</h2><p>不要想当然的认为自己的代码是正确的，提交之前应该经过充分的测试才能提交，即使是提交到本地仓库，也应该进行测试，因为这些代码在未来会被推送到远程共享给你的同事。</p><h2 id="5、高质量的提交注释"><a href="#5、高质量的提交注释" class="headerlink" title="5、高质量的提交注释"></a>5、高质量的提交注释</h2><p>每次提交都应该包含完整的注释。团队成员应当遵循统一的提交规则，一般应当明确的体现出提交的类型以及具体的事情，例如 feat: add message list;</p><h2 id="6、遵循统一的流程规范"><a href="#6、遵循统一的流程规范" class="headerlink" title="6、遵循统一的流程规范"></a>6、遵循统一的流程规范</h2><p>Git 可以支持很多不同的工作流程：长期分支、功能分支、合并以及 rebase、git-flow 等等。选择什么样的开发流程要取决如下一些因素：项目开发的类型，部署模式和（可能是最重要的）开发团队成员的个人习惯。不管怎样，选择什么样的流程都需要得到所有开发成员的一致认可，并且一直遵循它。</p><h1 id="Ⅴ-实际遇到的问题与解决Mark"><a href="#Ⅴ-实际遇到的问题与解决Mark" class="headerlink" title="Ⅴ- 实际遇到的问题与解决Mark"></a>Ⅴ- 实际遇到的问题与解决Mark</h1><h2 id="1、将本地已有的一个项目上传到新建的git仓库的方法"><a href="#1、将本地已有的一个项目上传到新建的git仓库的方法" class="headerlink" title="1、将本地已有的一个项目上传到新建的git仓库的方法"></a>1、将本地已有的一个项目上传到新建的git仓库的方法</h2><p>将本地已有的一个非git项目上传到新建的git仓库的方法一共有两种。</p><h3 id="Ⅰ-克隆-拷贝"><a href="#Ⅰ-克隆-拷贝" class="headerlink" title="Ⅰ-  克隆+拷贝"></a>Ⅰ-  克隆+拷贝</h3><blockquote><p>第一种方法比较简单，直接用把远程仓库拉到本地，然后再把自己本地的项目拷贝到仓库中去。然后push到远程仓库上去即可。<strong>此方法适用于本地项目不是一个git仓库的情况。</strong></p><p>具体步骤如下：</p><h4 id="1、首先克隆"><a href="#1、首先克隆" class="headerlink" title="1、首先克隆"></a>1、首先克隆</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git <span class="built_in">clone</span> git@github.com:yuanmingchen/tensorflow_study.git</span><br></pre></td></tr></table></figure><h4 id="2、然后复制自己项目的所有文件到刚刚克隆下来的仓库中"><a href="#2、然后复制自己项目的所有文件到刚刚克隆下来的仓库中" class="headerlink" title="2、然后复制自己项目的所有文件到刚刚克隆下来的仓库中"></a>2、然后复制自己项目的所有文件到刚刚克隆下来的仓库中</h4><h4 id="3、最后push到远程仓库上面去："><a href="#3、最后push到远程仓库上面去：" class="headerlink" title="3、最后push到远程仓库上面去："></a>3、最后push到远程仓库上面去：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git push -u origin master</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅱ-强行合并两个仓库"><a href="#Ⅱ-强行合并两个仓库" class="headerlink" title="Ⅱ-  强行合并两个仓库"></a>Ⅱ-  强行合并两个仓库</h3><blockquote><p>第二种方法就是先将本地的项目初始化为一个git仓库，然后再强行合并本地仓库和远程仓库，由于这两个仓库是完全不同的两个仓库，所以直接pull都会报错，需要在pull的时候假加上–allow-unrelated-histories才可以pull成功。<strong>此方法适用于本地项目已经是一个git仓库的情况。</strong></p><p>具体步骤如下：</p><h4 id="1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下："><a href="#1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下：" class="headerlink" title="1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下："></a>1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git init</span><br></pre></td></tr></table></figure><h4 id="2、把当前目录下的已有文件全部加到刚刚新建的git仓库中："><a href="#2、把当前目录下的已有文件全部加到刚刚新建的git仓库中：" class="headerlink" title="2、把当前目录下的已有文件全部加到刚刚新建的git仓库中："></a>2、把当前目录下的已有文件全部加到刚刚新建的git仓库中：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git add .</span><br></pre></td></tr></table></figure><h4 id="3、保存刚刚加入的文件，并书写保存信息："><a href="#3、保存刚刚加入的文件，并书写保存信息：" class="headerlink" title="3、保存刚刚加入的文件，并书写保存信息："></a>3、保存刚刚加入的文件，并书写保存信息：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git commit -m <span class="string">&quot;push current files&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4、将本地仓库与远程仓库关联起来："><a href="#4、将本地仓库与远程仓库关联起来：" class="headerlink" title="4、将本地仓库与远程仓库关联起来："></a>4、将本地仓库与远程仓库关联起来：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git remote add origin git@github.com:yuanmingchen/tensorflow_study.git</span><br></pre></td></tr></table></figure><h4 id="5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）："><a href="#5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）：" class="headerlink" title="5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）："></a>5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><h4 id="6、把本地仓库的内容push到远程仓库："><a href="#6、把本地仓库的内容push到远程仓库：" class="headerlink" title="6、把本地仓库的内容push到远程仓库："></a>6、把本地仓库的内容push到远程仓库：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git push -u origin master</span><br></pre></td></tr></table></figure><p>然后就ok了。</p></blockquote><h3 id="Ⅲ-其他git命令"><a href="#Ⅲ-其他git命令" class="headerlink" title="Ⅲ- 其他git命令"></a>Ⅲ- 其他git命令</h3><blockquote><p>最后附上git的一些其他命令：<br>1、删除已将关联的远程主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git remote <span class="built_in">rm</span> origin</span><br></pre></td></tr></table></figure><p>2、查看所有本地分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git branch -a</span><br></pre></td></tr></table></figure><p>3、新建一个分支，名字叫xf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git branch xf</span><br></pre></td></tr></table></figure><p>4、切换分支到xf分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git checkout xf</span><br></pre></td></tr></table></figure><p>5、把远程分支的代码pull到本地分支：git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;<br>如：取回origin主机的master分支，与本地的xf分支合并，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git pull origin master:xf</span><br></pre></td></tr></table></figure><p>6、推送当前的分支，git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br>PS:注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。<br>如：把本地的xf分支推送到origin主机的master分支，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git push origin xf:master</span><br></pre></td></tr></table></figure></blockquote><h2 id="2、解决同一台电脑生成两份或多份ssh密钥、公钥映射两个或多个GitHub账号"><a href="#2、解决同一台电脑生成两份或多份ssh密钥、公钥映射两个或多个GitHub账号" class="headerlink" title="2、解决同一台电脑生成两份或多份ssh密钥、公钥映射两个或多个GitHub账号"></a>2、解决同一台电脑生成两份或多份ssh密钥、公钥映射两个或多个GitHub账号</h2><blockquote><p>此解决方案由百度多个方案结合而来,截取对我有用部分</p></blockquote><h3 id="Ⅰ-需求分析"><a href="#Ⅰ-需求分析" class="headerlink" title="Ⅰ- 需求分析"></a>Ⅰ- 需求分析</h3><blockquote><p>本人注册一个GitHub账户，用来分享本人自己的开源项目或者代码，同时，公司注册了一个GitHub账户，用来分享公司的开源项目。如果按照单个ssh公钥生成的方法则会把之前的公钥覆盖掉，这样将导致其中一方在下一次上传代码，本机和GitHub无法映射成功。</p><p>解决这个问题首先要明确如何生成单个ssh公钥。<br>ssh生成单个公钥命令：<code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code>。<a href="https://blog.csdn.net/mynameissls/article/details/50528048">如何生成ssh公钥</a><br>上述命令会在当前<code>~/.ssh</code>目录下生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。其中<code>id_rsa</code>是私钥文件，<code>id_rsa_.pub</code>是公钥文件。<br><code>id_rsa</code>和<code>id_rsa_.pub</code>文件都是通过一个邮箱号生成的，同一个公钥文件不可以配置两个不同GitHub账户（已测试）。<br>那么两个GitHub账户就需要两个不同的邮箱号，来生成两组不同的公钥文件。</p></blockquote><h3 id="Ⅱ-解决方案思路"><a href="#Ⅱ-解决方案思路" class="headerlink" title="Ⅱ- 解决方案思路"></a>Ⅱ- 解决方案思路</h3><blockquote><p>命令：<code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot; -f ~/.ssh/id_rsa_example</code><br>示例：分别以<a href="mailto:&#55;&#x39;&#49;&#56;&#49;&#53;&#x35;&#54;&#x37;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;">&#55;&#x39;&#49;&#56;&#49;&#53;&#x35;&#54;&#x37;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;</a>和<a href="mailto:&#103;&#97;&#x6c;&#97;&#120;&#x79;&#x73;&#111;&#x66;&#116;&#64;&#x73;&#x69;&#x6e;&#x61;&#46;&#x63;&#110;">&#103;&#97;&#x6c;&#97;&#120;&#x79;&#x73;&#111;&#x66;&#116;&#64;&#x73;&#x69;&#x6e;&#x61;&#46;&#x63;&#110;</a>两个邮箱在<code>~/.ssh</code>目录下生成两级不同的公钥文件。<br><a href="mailto:&#x37;&#x39;&#49;&#56;&#49;&#53;&#53;&#x36;&#55;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;">&#x37;&#x39;&#49;&#56;&#49;&#53;&#53;&#x36;&#55;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;</a>邮箱：<code>ssh-keygen -t rsa -C &quot;791815567@qq.com&quot; -f ~/.ssh/id_rsa_me</code><br><a href="mailto:&#x67;&#x61;&#x6c;&#97;&#x78;&#121;&#115;&#x6f;&#x66;&#x74;&#x40;&#115;&#x69;&#x6e;&#97;&#x2e;&#x63;&#x6e;">&#x67;&#x61;&#x6c;&#97;&#x78;&#121;&#115;&#x6f;&#x66;&#x74;&#x40;&#115;&#x69;&#x6e;&#97;&#x2e;&#x63;&#x6e;</a>邮箱：<code>ssh-keygen -t rsa -C &quot;galaxysoft@sina.cn&quot; -f ~/.ssh/id_rsa_galaxysoft</code><br>生成过程可参考<a href="https://blog.csdn.net/mynameissls/article/details/50528048">如何生成单个ssh公钥</a> 这篇文章。<br>执行完成后，会以<code>~/.ssh</code>目录下看<a href="mailto:&#x37;&#x39;&#x31;&#56;&#49;&#53;&#53;&#54;&#55;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;">&#x37;&#x39;&#x31;&#56;&#49;&#53;&#53;&#54;&#55;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;</a>邮箱对应的私钥文件<code>id_rsa_me</code>、公钥文件<code>id_rsa_me.pub</code>和<a href="mailto:&#x67;&#97;&#108;&#x61;&#120;&#x79;&#x73;&#x6f;&#102;&#x74;&#64;&#x73;&#105;&#x6e;&#x61;&#x2e;&#99;&#110;">&#x67;&#97;&#108;&#x61;&#120;&#x79;&#x73;&#x6f;&#102;&#x74;&#64;&#x73;&#105;&#x6e;&#x61;&#x2e;&#99;&#110;</a>邮箱对应的私钥文件<code>id_rsa_galaxysoft</code>、公钥文件<code>id_rsa_galaxysoft.pub</code><br>分别在两个GitHub账户中添加对应的公钥信息即可，可参考<a href="https://blog.csdn.net/mynameissls/article/details/50528048">如何生成单个ssh公钥</a> 这篇文章</p></blockquote><h3 id="Ⅲ-生成新ssh-key"><a href="#Ⅲ-生成新ssh-key" class="headerlink" title="Ⅲ- 生成新ssh key"></a>Ⅲ- 生成新ssh key</h3><blockquote><p>如果我们电脑上已经存在了一个ssh key，那么我们需要在我们电脑上生成第二个你想在本电脑上使用的id_rsa，使用命令：<code>ssh-keygen -t rsa -C &quot;你的github注册邮箱&quot;</code>。</p><p>下图红色标注部分会提示你把新生成的id_rsa存放到哪里，此处默认会存放在c盘的用户名下的.ssh文件夹下（即你第一个github用户ssh key存放的目录），因此我们需要输入路径/c/Users/DodoMonster/.ssh（注意此路径是你的系统盘下用户目录安放ssh密钥的目录，请使用自己电脑上相对应的目录），最后我以“id_rsa_me”重新命名了ssh key防止默认与已有的ssh key重复。</p><blockquote><p>在输入了路径后，会提示你输入提交项目时输入的验证密码，不输则表示不用密码，这是为了防止别人随便在你的项目上push东西，所以最好还是输入以下你的密码。回车，再重复输入确认回车即可。</p></blockquote></blockquote><h3 id="Ⅳ-添加新ssh-key"><a href="#Ⅳ-添加新ssh-key" class="headerlink" title="Ⅳ- 添加新ssh key"></a>Ⅳ- 添加新ssh key</h3><blockquote><p>默认SSH只会读取id_rsa，所以为了让SSH识别新的私钥，需要将其添加到SSH agent<br>使用命令：<code>ssh-add ~/.ssh/id_rsa_me</code>(后面的是自己取的名字)</p><p>如果报错：Could not open a connection to your authentication agent.无法连接到ssh agent<br>可执行<code>ssh-agent bash</code>命令后再执行<code>ssh-add</code>命</p><p>然后将公钥添加到git账号中 <a href="https://github.com/settings/keys">https://github.com/settings/keys</a></p></blockquote><h3 id="Ⅴ-配置config文件"><a href="#Ⅴ-配置config文件" class="headerlink" title="Ⅴ- 配置config文件"></a>Ⅴ- 配置config文件</h3><blockquote><p>查看.ssh文件中是否存在config文件</p><p>如果已存在则直接编辑config文件，命令：<code>vim config</code> #这是linux的命令，进入了vim界面后按<code>a或i或A或I</code>进入编辑模式，编辑完成后按esc键输入<code>:wq</code> 保存文件退出</p><p>如果不存在则需要创建config文件，命令：<code>touch config</code>，再对config文件进行编辑</p><p>对config文件进行配置填写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Default 第一个账号(123456@xxxx.com)</span></span><br><span class="line"></span><br><span class="line">Host gsgit</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_me</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="comment">#second 第二个账号（38894403@xxxx.com）</span></span><br><span class="line">    </span><br><span class="line">Host mygit</span><br><span class="line">     HostName gitee.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><blockquote><p>其中Host 后的名字可以随意方便自己记忆，但HostName必须为<code>github.com(或者其它git地址)。</code></p></blockquote></blockquote><h3 id="Ⅵ-测试是否配置成功"><a href="#Ⅵ-测试是否配置成功" class="headerlink" title="Ⅵ- 测试是否配置成功"></a>Ⅵ- 测试是否配置成功</h3><blockquote><p>使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;ssh -T git@zc</span><br></pre></td></tr></table></figure><p>出现欢迎语则为配置成功。</p><p>注意：配置完成后，在连接Host不是github.com的github仓库时，远程库的地址要对应地做一些修改：</p><p>而并非原来的<a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">git <span class="built_in">clone</span> git@gitee.com:hongjilin/cx.git</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">//改为</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">git <span class="built_in">clone</span> git@mygit:hongjilin/cx.git</span></span><br></pre></td></tr></table></figure><p>这样每次连接都会使用id_rsa_me与服务器进行连接。</p><p>配置至此，大功告成！</p></blockquote><h3 id="Ⅶ-问题Mark"><a href="#Ⅶ-问题Mark" class="headerlink" title="Ⅶ- 问题Mark"></a>Ⅶ- 问题Mark</h3><blockquote><p>当我切换到另外一个账号提交时 commit的提交者仍寻找全局配置中的username作为签名 而不是当前本地库绑定提交账号的用户名(所以我用公司账号的<code>.ssh</code>配置绕过了组织检测,但是署名却用的是个人账户)</p><p>别小看这个BUG,挺恐怖的,下面举个我的栗子:</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210621172453710.png" alt="image-20210621172453710"></p><p>到这时候你可能觉得好像也没啥吧?但是我个人账号不是公司组织里面的(也不好解释)、计算公司个人绩效时也无法统计、之前版本还无法用搜索条件查找我个人账号(因为本身个人账号就不是组织里面的)的提交…..问题可大可小</p><p>所以此处<code>Mark</code>,留待后续学习生活解决</p></blockquote><h4 id="此问题解决"><a href="#此问题解决" class="headerlink" title="此问题解决"></a>此问题解决</h4><blockquote><p>之前只是将此问题Mark,但是未将解决方式具体写下,现将其更新</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210621171934972.png" alt="image-20210621171934972"></p><p>或者可以直接写个python小脚本来修改:如果根据该仓库clone时的账号来进行切换是否更合理,这是个好办法… </p></blockquote><h2 id="3、commit报错无法提交"><a href="#3、commit报错无法提交" class="headerlink" title="3、commit报错无法提交"></a>3、commit报错无法提交</h2><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; running pre-commit hook: lint-staged</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">[STARTED] Preparing...</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">[FAILED] warning: LF will be replaced by CRLF <span class="keyword">in</span> sh.exe.stackdump.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">[FAILED] The file will have its original line endings <span class="keyword">in</span> your working directory.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">[STARTED] Running tasks...</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">[SKIPPED] Skipped because of previous git error.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">[STARTED] Applying modifications...</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">[SKIPPED]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">[SKIPPED]   × lint-staged failed due to a git error.</span></span><br><span class="line"></span><br><span class="line"> × lint-staged failed due to a git error.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">[STARTED] Cleaning up...</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">[SKIPPED]   × lint-staged failed due to a git error.</span></span><br><span class="line"> Any lost modifications can be restored from a git stash:</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">pre-commit hook failed (add --no-verify to bypass)</span></span><br></pre></td></tr></table></figure><p>解决方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">执行npm run lint， 根据提示修改错误（推荐）</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">git commit -m <span class="string">&quot;&quot;</span> --no-verify 绕过了lint的检查</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="4、Git提交时出现-合并提示-Merge-branch-39-master-39-of-之解决方法"><a href="#4、Git提交时出现-合并提示-Merge-branch-39-master-39-of-之解决方法" class="headerlink" title="4、Git提交时出现(合并提示)Merge branch &#39;master&#39; of ...之解决方法"></a>4、Git提交时出现(<code>合并提示</code>)<code>Merge branch &#39;master&#39; of ...</code>之解决方法</h2><blockquote><p>多人协作开发项目，在上传代码时通常会先pull一下远程代码，使本地与远程同步更新，但是如果远程此时与自己代码存在冲突，在解决冲突后提交有时会出现“Merge branch ‘master’ of …”这条信息。这是因为pull其本质是fetch+Merge的结合。通常会分为以下两种情况：</p><p>1.如果远程分支超前于本地分支，并且本地也没有commit操作，此时pull会采用’fast-forward’模式，该模式不会产生合并节点，也即不产生”Merge branch ‘master’ of …”信息。</p><p>2.如果本地有commit提交，此时若存在冲突，pull拉取代码时远程和本地会出现分叉，会进行分支合并，就会产生”Merge branch ‘master’ of …”信息。</p><p><strong>解决方法</strong></p><blockquote><p>使用<code>git pull --rebase</code>命令，如果没有冲突,则会直接合并，如果存在冲突，手动解决冲突即可，不会再产生那条多余的信息。如果你不想每次都rebase，可以在git bash里执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;git config --global pull.rebase <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p>这个配置就是告诉git在每次pull前先进行rebase操作。</p></blockquote></blockquote><h3 id="①-可能出现的相关报错error-Cannot-pull-with-rebase"><a href="#①-可能出现的相关报错error-Cannot-pull-with-rebase" class="headerlink" title="① 可能出现的相关报错error:Cannot pull with rebase"></a>① 可能出现的相关报错<code>error:Cannot pull with rebase</code></h3><blockquote><ol><li>git 执行<code>git pull –rebase</code>后报错误如下：</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: cannot pull with rebase: Your index contains uncommitted changes.</span><br><span class="line">error: please commit or stash them.</span><br></pre></td></tr></table></figure><ol start="2"><li><p>原因：如果有未提交的更改，是不能git pull的</p></li><li><p>解决：</p></li></ol><ul><li>先执行<code>git stash</code>    –&gt;#可用来暂存当前正在进行的工作</li><li>再执行<code>git pull –-rebase</code></li><li>最后再执行<code>git stash pop</code>  –&gt;#从Git栈中读取最近一次保存的内容</li></ul><ol start="4"><li>截图示例</li></ol><p>  <img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210705115521085.png" alt="image-20210705115521085"></p></blockquote><h3 id="②-防止冲突的有效操作"><a href="#②-防止冲突的有效操作" class="headerlink" title="② 防止冲突的有效操作"></a>② <em>防止冲突的有效操作</em></h3><blockquote><p>不要直接用<code>git pull</code>拉取,而是分开操作,先拉取代码(拉取后可以先查看冲突部分取解决).随后再去合并</p><ol><li><code>git fetch 别名</code>(将修改同步到远程跟踪分支上)</li><li>git merge 远程跟踪分支</li></ol></blockquote><h2 id="5、Git删除误提交的大文件历史记录"><a href="#5、Git删除误提交的大文件历史记录" class="headerlink" title="5、Git删除误提交的大文件历史记录"></a>5、Git删除误提交的大文件历史记录</h2><blockquote><ol><li>应用场景:在我们日常使用Git的时候，一般比较小的项目，我们可能不会注意到.git 这个文件。其实.git文件主要用来记录每次提交的变动，当我们的项目越来越大的时候，我们发现.git文件越来越大。很大的可能是因为提交了大文件，如果你提交了大文件，那么即使你在之后的版本中将其删除，但是<code>实际上记录中的大文件仍然存在</code>。</li><li>原因分析:为什么呢？仔细想一想，虽然你在后面的版本中删除了大文件，但是Git是有版本倒退功能的吧，那么如果大文件不记录下来，git拿什么来给你回退呢？</li><li>导致的问题:.git文件越来越大导致的问题是–每次拉项目都要耗费大量的时间，并且每个人都要花费那么多的时间。</li><li>git给出了解决方案，使用git branch-filter来遍历git history tree, 可以永久删除history中的大文件，达到让.git文件瘦身的目的。</li></ol><p>下面给出步骤（以下步骤非常危险，<code>操作需谨慎!</code>,最好最好不要在公司项目中使用）</p></blockquote><h3 id="Ⅰ-列出仓库中最大的几个对象及其文件名"><a href="#Ⅰ-列出仓库中最大的几个对象及其文件名" class="headerlink" title="Ⅰ-列出仓库中最大的几个对象及其文件名"></a>Ⅰ-列出仓库中最大的几个对象及其文件名</h3><blockquote><p>列出所有仓库中的对象（包括SHA值、大小、路径等），并按照大小降序排列，列出TOP 5(本人示例,你也可多展示)</p><ol><li>命令示例</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rev-list --all --objects | grep <span class="string">&quot;<span class="subst">$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -n 5 | awk -F &#x27; &#x27;  &#x27;&#123;print $1&#125;&#x27;)</span>&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>图示</li></ol><p>  <img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/%E5%88%97%E5%87%BA%E4%BB%93%E5%BA%93%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E5%87%A0%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%85%B6%E6%96%87%E4%BB%B6%E5%90%8D.png" alt="image-20210508171542001"></p></blockquote><h3 id="Ⅱ-将某文件从历史记录中删除"><a href="#Ⅱ-将某文件从历史记录中删除" class="headerlink" title="Ⅱ-将某文件从历史记录中删除"></a>Ⅱ-将某文件从历史记录中删除</h3><blockquote><p>既然文件找到了(此处删除<code>杂记_其他(如破解与配置)的碎片化笔记/Typora笔记软件分享/tools/软件包/Typora.dmg</code>)，那么得将该文件从历史记录中删除，执行以下命令：</p><ol><li>命令示例:</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline --branches -- <span class="string">&quot;杂记_其他(如破解与配置)的碎片化笔记/Typora笔记软件分享/tools/软件包/Typora.dmg&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>图示</li></ol><p>  <img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210508171916951.png" alt="image-20210508171916951"></p></blockquote><h3 id="Ⅲ-重写所有-commit，将该文件从-Git-历史中完全删除"><a href="#Ⅲ-重写所有-commit，将该文件从-Git-历史中完全删除" class="headerlink" title="Ⅲ-重写所有 commit，将该文件从 Git 历史中完全删除"></a>Ⅲ-重写所有 commit，将该文件从 Git 历史中完全删除</h3><blockquote><p>上面的命令执行后只是从历史记录中移除，还没有完全删除它，我们需要重写所有 commit，将该文件从 Git 历史中完全删除：</p><ol><li>代码示例:</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --index-filter <span class="string">&#x27;git rm --cached --ignore-unmatch  &quot;杂记_其他(如破解与配置)的碎片化笔记/Typora笔记软件分享/tools/软件包/Typora.dmg&quot;&#x27;</span> -- --all</span><br></pre></td></tr></table></figure><ol start="2"><li>图示</li></ol><p>  <img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/%E5%88%A0%E9%99%A4%E6%88%AA%E5%9B%BE.png"></p><ol start="3"><li>补充注意点:</li></ol><p>  如果你像我一样,工作区有新写的内容没有追踪与提交导致无法进行删除操作时,千万不要直接暂存<code>stash</code>,否则这些没有暂存的内容就没了,要记得先<code>git add .</code></p></blockquote><h3 id="Ⅳ-把该文件的引用完全删除"><a href="#Ⅳ-把该文件的引用完全删除" class="headerlink" title="Ⅳ-把该文件的引用完全删除"></a>Ⅳ-把该文件的引用完全删除</h3><blockquote><p>上面的命令执行后，此时历史记录中已经没有该文件了，此时是真正删除了它。 不过我们运行 filter-branch 产生的日志还是会对该文件有引用，所以我们还需要运行以下几条命令，把该文件的引用完全删除：</p><ol><li>命令示例:</li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf .git/refs/original/</span><br><span class="line">git reflog expire --expire=now --all</span><br><span class="line">git gc --prune=now</span><br><span class="line">git gc --aggressive --prune=now</span><br></pre></td></tr></table></figure><ol start="2"><li>图示</li></ol><p> <img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210510183253770.png" alt="image-20210510183253770"></p><ol start="3"><li>果真编程其实殊途同归,该学的都得学,这里就暴露的Linux没学好的弊端,所以暗下决心,争取今年内将linux系统学习一遍</li></ol></blockquote><h3 id="Ⅴ-强制提交"><a href="#Ⅴ-强制提交" class="headerlink" title="Ⅴ-强制提交"></a>Ⅴ-强制提交</h3><blockquote><p>现在我们再看 .git 文件的大小明显变小了，少了那个大文件，说明我们之前误提交的大文件已经删除了。 最后一步就是 push 代码了，不过就是需要强制 push</p><ol><li>命令示例</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force</span><br></pre></td></tr></table></figure><ol start="2"><li>图示</li></ol><p>  <img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/%E5%BC%BA%E5%88%B6%E6%8F%90%E4%BA%A4.jpg"></p></blockquote><h3 id="Ⅵ-远程仓库GC"><a href="#Ⅵ-远程仓库GC" class="headerlink" title="Ⅵ-远程仓库GC"></a>Ⅵ-远程仓库GC</h3><blockquote><p>网上所能百度的方法中都没有说到要进行远程存储库GC,但是本人操作后发现,明明命令行中运行了<code>git gc</code>,但你的远程仓库仍然会非常庞大甚至更加庞大,也许你本地已经删减至几十兆,但是远程仓库已经”爆仓”达到<code>1300+兆</code>,详见<code>问题7</code></p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210510180757993.png" alt="image-20210510180757993"></p></blockquote><h3 id="Ⅶ-删除前后-git大小对比"><a href="#Ⅶ-删除前后-git大小对比" class="headerlink" title="Ⅶ-删除前后.git大小对比"></a>Ⅶ-删除前后<code>.git</code>大小对比</h3><blockquote><p>本人此时测试删除的文件正好为10M,成功删除</p><ol><li>删除前截图</li></ol> <img src="A_Git详细学习笔记中的图片/删除大文件前大小.png" style="zoom:67%;" /><ol start="2"><li>删除后截图</li></ol> <img src="A_Git详细学习笔记中的图片/删除大文件后大小.png" style="zoom:67%;" /><ol start="3"><li>删除多个文件后</li></ol>  <img src="A_Git详细学习笔记中的图片/image-20210508182039450.png" alt="image-20210508182039450" style="zoom:67%;" /></blockquote><h2 id="6、git出现文件夹后面跟-数字问题"><a href="#6、git出现文件夹后面跟-数字问题" class="headerlink" title="6、git出现文件夹后面跟@+数字问题"></a>6、git出现文件夹后面跟<code>@+数字</code>问题</h2><blockquote><ol><li><p>问题出现场景:本人欲将两个仓库代码合到一个仓库中,但是原本文件夹内还有.git，导致这些文件夹push后变成了子模块</p></li><li><p>问题场景图例–&gt;具体出问题时并没有截图,此处截图提交时差别(原本应该是一大堆V1.0的文件,结果只有一个文件夹,后面跟着哈希值)</p></li></ol><p>  <img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210510171915185.png" alt="image-20210510171915185"></p><ol start="3"><li>解决思路</li></ol><blockquote><p>删除原来的子文件夹的.git  –&gt;<code>rm -r .git</code>,当然也可以手动删除</p><p>删除本地git缓存  –&gt;<code>git rm -r --cached fileName</code></p><p>重新add，push </p></blockquote><ol start="4"><li>解决结果截图</li></ol>  <img src="A_Git详细学习笔记中的图片/image-20210510172159472.png" alt="image-20210510172159472" style="zoom:67%;" /></blockquote><h2 id="7、远程仓库过大导致无法push"><a href="#7、远程仓库过大导致无法push" class="headerlink" title="7、远程仓库过大导致无法push"></a>7、远程仓库过大导致无法push</h2><blockquote><p>问题出现场景:在前两天本人发现笔记仓库过大 已经达到600M的时候,本人花了一些时间将无用的大文件删除(详见<code>问题5</code>),并且减小到了100M+,然后推送上了gitee上,但是今天push的时候突然报错仓库过大无法推送</p><ol><li><p>问题报错截图<img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210510180415796.png" alt="image-20210510180415796"></p></li><li><p>本人就产生很大的疑惑,明明我本地仓库才100+M,<code>.git</code>文件也才86M,但是远程仓库竟然达到了恐怖的1300M+(当时急于寻找解决方案,没有截图)</p></li></ol><p>  本人推测(不确定,也找不到人问,朋友都没经历过这个情况,所以引出记录待定,如果有小伙伴知道了希望可以发在评论区或者私信我)</p><ol><li><p>当时我是将多条命令一起复制进去运行,可能导致<code>git gc</code>命令没有运行到(可能性极小,但还是留下悔恨的泪水)</p></li><li><p>也许本地的gc命令只是清理了本地仓库的,远程也要清理,但这个并不重要,知道了这个点后我们能进行解决了</p><p> <img src="A_Git详细学习笔记中的图片/image-20210510180539437.png" alt="image-20210510180539437" style="zoom:50%;" /><img src="A_Git详细学习笔记中的图片/image-20210510181407805.png" alt="image-20210510181407805" style="zoom:67%;" /></p></li><li><p>问题解决:</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210510180757993.png" alt="image-20210510180757993"></p><p>GC后内存<img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210510181329197.png" alt="image-20210510181329197"></p></li><li><p>GC详解</p></li></ol><blockquote><p>Git的底层并没有采用 CVS、SVN 底层所采用的那套增量式文件系统，而是采用一套自行维护的存储文件系统。当文件变动发生提交时，该文件系统存储的不是文件的差异信息，而是文件快照，即整个文件内容，并保存指向快照的索引。这种做法，提高 Git 分支的使用效率；但也容易导致代码仓库中内容重复程度过高，从而仓库体积过大。当遇到这种情况时，或者需要将仓库推送到远程主机时，就需要Git中的gc（garbage collect）功能，也就是<code>垃圾回收功能</code>。</p><p>大体来说，当运行 “git gc” 命令时，Git会收集所有松散对象并将它们存入 packfile，合并这些 packfile 进一个大的 packfile，然后将不被任何 commit 引用并且已存在一段时间 (数月) 的对象删除。 此外，Git还会将所有引用 (references) 并入一个单独文件。</p><p>就细节而言，Git做了这几件事：</p><p>pack_refs 过程<br>reflog expire 过程<br>repack 过程<br>prune 过程<br>rerere 过程</p><p>pack_refs 过程相当于执行”git pack-refs –all –prune”，它会将$GIT_DIR/refs目录下的所有heads和tags打包成一个文件并保存为$GIT_DIR/packed-refs下。</p><p>reflog expire 过程相当于执行”git reflog expire –all”，它会将删除所有超过期限而且没有被refs涉及的reflog条目。</p><p>repack 过程相当于执行”git repack -d -l”，一般情况下还会包括”-A”选项，它会将所有未被包含在一个pack的松散对象连结成一个pack，也会将现有的pack重新组织为一个新的更有效率的pack，并删除冗余的pack（如果她们中存在不可达的松散对象，会先把这些对象释放出来）。</p><p>prune 过程相当于执行”git prune –expire”，他会删除所有过期的、不可达的且未被打包的松散对象。</p><p>rerere 过程相当于执行”git rerere gc”，这种情形下似乎没什么用。</p><p>所以本人推测应该是进行了<code>问题5</code>操作后还需要<code>进行一次GC操作</code></p></blockquote></blockquote><h2 id="8、Git-GUI中文乱码问题解决方法"><a href="#8、Git-GUI中文乱码问题解决方法" class="headerlink" title="8、Git GUI中文乱码问题解决方法"></a>8、Git GUI中文乱码问题解决方法</h2><blockquote><p>当我们使用Git GUI的查看代码的时候，有时候会出现中文乱码：</p><ol><li>解决方案1:直接在<code>GIT GUI</code>中操作</li></ol><p>  **<img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210701180547401.png" alt="image-20210701180547401"> </p><ol start="2"><li>解决方案2:命令行</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global gui.encoding utf-8</span><br></pre></td></tr></table></figure><ol start="3"><li>解决方案3:直接修改配置文件</li></ol><blockquote><p>在软件的安装目录下，在<code>Git\mingw32\etc\gitconfig</code>文件末尾添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;[gui]encoding=utf-8</span><br></pre></td></tr></table></figure></blockquote></blockquote><h2 id="9、Git-切换远程仓库地址"><a href="#9、Git-切换远程仓库地址" class="headerlink" title="9、Git 切换远程仓库地址"></a>9、Git 切换远程仓库地址</h2><blockquote><p>在公司开发中,也许会遇到公司项目地址迁移的问题(本人就遇到了) : 比如从码云gitee上将项目迁移到gitLab上,那么我们本地怎么切换远程仓库地址呢? 很简单!</p><ol><li>切换远程仓库地址</li></ol><ul><li><p><strong>方式一：修改远程仓库地址</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin URL <span class="comment">#更换远程仓库地址，URL为新地址。一步到胃</span></span><br></pre></td></tr></table></figure></li><li><p><strong>方式二：先删除远程仓库地址，然后再添加</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin <span class="comment">#删除现有远程仓库</span></span><br><span class="line">git remote add origin url <span class="comment">#添加新远程仓库</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>查看远程仓库地址</li></ol><blockquote><p>没错,改完了,很简单是吧,但是你怎么确定自己是否修改成功了呢?</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v  <span class="comment">#查看远程仓库的地址</span></span><br></pre></td></tr></table></figure></blockquote><ol start="3"><li>截图示例</li></ol><blockquote><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/Git%E5%88%87%E6%8D%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt="Git 切换远程仓库地址"></p></blockquote></blockquote><h2 id="10、如何撤销-commit-提交"><a href="#10、如何撤销-commit-提交" class="headerlink" title="10、如何撤销 commit 提交"></a>10、如何撤销 commit 提交</h2><blockquote><ol><li>一般我们写完代码后,是这样提交的:</li></ol><ul><li>git add . //添加追踪所有文件</li><li>git commit -m “feat(前端-Git学习详细笔记):更新撤销commit操作” //添加commit提交信息</li></ul><ol start="2"><li>但是commit写完提交信息后,突然想到还有一个地方代码没改到/保存,如果放到下一个commit却不合适(同一个功能修改,分成两个commit),原因详见上方的 <a href="https://gitee.com/hongjilin/hongs-study-notes/tree/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0#%E2%85%A3-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99">版本控制工具的使用基本原则</a> </li><li>执行此命令命令:<code>git reset --soft HEAD^</code></li></ol><ul><li>HEAD^的意思是上一个版本，也可以写成HEAD~1</li><li>如果你进行了2次commit，想都撤回，可以使用HEAD~2</li><li>详见 <a href="https://gitee.com/hongjilin/hongs-study-notes/tree/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0#reset%E4%B8%89%E9%83%A8%E6%9B%B2">reset三部曲</a></li></ul><p>作用:将文件从<code>暂存区中撤回</code>到工作目录中(仅仅是撤回commit操作，你写的代码仍然保留)</p></blockquote><h2 id="11、错误的git-push提交成功后如何撤销回退"><a href="#11、错误的git-push提交成功后如何撤销回退" class="headerlink" title="11、错误的git push提交成功后如何撤销回退"></a>11、错误的git push提交成功后如何撤销回退</h2><blockquote><p>我们在使用Git进行版本控制时，有可能会出现这种情况。git push后发现提交的内容不是想要的，这时候我们怎么做呢，提交上去的内容是没有删除按钮的（比如github，或码云）。所以我们需要一些手段将提交上去内容撤销下来。</p><p>而要撤销,就要用到上面所学的 <code>git reset</code></p></blockquote><h3 id="1、错误场景示范-1"><a href="#1、错误场景示范-1" class="headerlink" title="1、错误场景示范"></a>1、错误场景示范</h3><blockquote><p>Ⅰ- 当我撰写 [ commit ] 信息没注意到,以为是对的时候直接提交 –&gt; 因为本人提交笔记时喜欢按 [ ↑ ] 找到之前的提交信息进行修改</p><img src="A_Git详细学习笔记中的图片/image-20210813153403664.png" alt="image-20210813153403664" style="zoom:67%;" /> <p>Ⅱ- 此时可以看到,错误的 [ commit ] 已经提交了 (当然,适用场景不只是commit ,也可错误代码之类的)</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813155746112.png" alt="image-20210813155746112"> </p></blockquote><h3 id="2、回退操作-1"><a href="#2、回退操作-1" class="headerlink" title="2、回退操作"></a>2、回退操作</h3><blockquote><p>咱们操作稳重一点,使用git reset –soft HEAD~就好了(如果回退后代码也不想要,可以用<code>git stash</code>,暂存,达到代码也回退的效果)</p></blockquote><h4 id="①-git-reflog-1"><a href="#①-git-reflog-1" class="headerlink" title="① git reflog"></a>① git reflog</h4><blockquote><p>commits，它在git中扮演了一个重要角色，我们平常用的一些操作git clone ,git commit 都会产生commits，通俗的讲这个就是版本号，但是git reset并不会产生commits（不是不会产生，而是会产生 但是都是一样的），我们可以先看看自己项目中的commits，使用如下命令:<code>git reflog</code></p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813154309057.png" alt="image-20210813154309057"> </p></blockquote><h4 id="②-git-reset-–soft-HEAD-1"><a href="#②-git-reset-–soft-HEAD-1" class="headerlink" title="②  git  reset –soft HEAD~"></a>②  git  reset –soft HEAD~</h4><blockquote><p>运行此代码后,我们的 [ HEAD ] 指向了上一个 [ commits ]</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813154448889.png" alt="image-20210813154448889"> </p></blockquote><h4 id="③-查看缓存-1"><a href="#③-查看缓存-1" class="headerlink" title="③  查看缓存"></a>③  查看缓存</h4><blockquote><ul><li><p>此时你可以用<code>stash staus</code>查看,会发现,之前提交的代码已经放回缓存区了</p></li><li><p>如果你不想要此次提交所有代码,可以使用<code>git stash</code> ,然后再去清空即可(当然,本人此处还是需要的,所以要留下)</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813154839981.png" alt="image-20210813154839981"> </p></li></ul></blockquote><h4 id="④-重新撰写-commit-信息-1"><a href="#④-重新撰写-commit-信息-1" class="headerlink" title="④ 重新撰写 [ commit ]信息"></a>④ 重新撰写 [ commit ]信息</h4><blockquote><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813154928064.png" alt="image-20210813154928064"> </p></blockquote><h4 id="⑤-强制提交-1"><a href="#⑤-强制提交-1" class="headerlink" title="⑤ 强制提交"></a>⑤ 强制提交</h4><blockquote><p>如果你重新撰写 [ commit ] 后马上重新push,你会发现无法提交: 因为我们当前落后远程一个版本!</p><p>所以此时直接强制提交即可,就能覆盖远程提交记录</p><blockquote><p><code>git push -f</code></p></blockquote><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813155049169.png" alt="image-20210813155049169"> </p></blockquote><h3 id="3、成功展示-1"><a href="#3、成功展示-1" class="headerlink" title="3、成功展示"></a>3、成功展示</h3><blockquote><ul><li>在网站工作台首页能看到已经将更改后的 [ coommit ] 强制推送上来了</li></ul><p>也许你会奇怪:为啥工作台上还能看到? 其实已经删了!!!你看下方</p><p><img src="A_Git%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210813155614570.png" alt="image-20210813155614570"> </p><ul><li>但是你查看提交记录,会发现之前错误的commit已经被覆盖</li></ul><img src="A_Git详细学习笔记中的图片/image-20210813155339300.png" alt="image-20210813155339300" style="zoom:80%;" /></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 前端笔记整合 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
